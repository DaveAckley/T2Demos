/** PlateOperator
    \symbol PO
    \color #33a
 */
element PlateOperator : PlOpUtils + Plate1 + Stride2x2 {
  typedef EventWindow.SiteNum SN;
  typedef B2DStreamPlate.B2DStreamPayload MyPayload;
  DebugUtils du;
  Random random;
  SN mRootSN;
  SN mRPeerSN;
  Bool mNoDiffuse; //< true to suppress seeking open areas if nothing else to do

  typedef Unsigned(3) Clearance;
  typedef Clearance DirClearance[4];
  DirClearance mInnerClearance;
  DirClearance mOuterClearance;
  
  typedef B2D SizeCoord;
  SizeCoord mDesiredPlateSize;

  constant Unsigned cTIMER_BITS = 4u;
  typedef XTimer(cTIMER_BITS,Unsigned(cTIMER_BITS).maxof,1u) CommandTimer;
  CommandTimer mCmdTimer;

  typedef UMod(8,3) CommandSpinner;
  CommandSpinner mCommandSpinner;

  typedef B2DPacketAct.ActTag CommandTag;

  CommandTag nextCommandTag() {
    ++mCommandSpinner;
    return (CommandTag) mCommandSpinner.get();
  }

  Unsigned(2) nextSenseTag() {
    Unsigned v = nextCommandTag();
    return (Unsigned(2)) (v&0x3);
  }

  /** \returns < 0 to indicate incomparability; caller should take extreme measure like dying.
      \returns == 0 to indicate exact command tag expected
      \returns > 0 to indicate \c tag is obsolete, but not invalid.
   */
  Int interpretCommandTag(CommandTag tag) {
    CommandSpinner tmp;
    tmp.set(tag);
    if (!mCommandSpinner.isComparable(tmp)) return -1;
    if (mCommandSpinner.isEqual(tmp)) return 0;
    return 1;
  }

  //// UrSelf API
  @Override
  ARGB getColor(Unsigned selector) {
    ARGB ret = super.getColor(selector);
    ColorUtils cu;
    //ret = cu.between(ret,cu.color(0xffff0000),75);
    return ret;
  }

  Void considerOuter() {  // We just got new outer data.  Should we act on it?
    if (!mDesiredPlateSize.isValid()) return;  // Nothing to do without a valid size
    EventWindow ew;
    MyContainer & root = (MyContainer&) ew[mRootSN];
    C2D rootsiz = root.sizeOfPlate();
    C2D targetsiz = mDesiredPlateSize.toC2D();

    Bool needx = rootsiz.getX() < targetsiz.getX();
    Bool needy = rootsiz.getY() < targetsiz.getY();

    ByteStreamLogger bsl;
    //    bsl.printf("CONSIDROO:(%d,%d)\n",needx,needy);

    Unsigned actcount = 0;
    Bool actwantsgrow;
    PlateUtils.PlateDir actdir;
    PlateUtils pu;
    Random random;
    //    C2D str = self.Stride2x2.stride();
    C2D str = self.Stride2x2.stride();
    for (Unsigned i = 0; i < 4u; ++i) {
      PlateUtils.PlateDir pd = (PlateUtils.PlateDir) i;
      PlateUtils.PlateDir oppd = (PlateUtils.PlateDir) ((i+2u)%4u);
      Unsigned strindir = pu.strideInDir(pd,str);
      if (mOuterClearance[i] < strindir+1u) continue;

      C2D incr = pu.stepInDir(pd);
      //      bsl.printf("CONSIDROO11:%d=%d/%d=%d(%d,%d)\n",
      //                 pd,mOuterClearance[pd],
      //                 oppd,mOuterClearance[oppd],
      //                 incr.getX(),incr.getY());

      if (needx && incr.getX() != 0) {
        if (random.oneIn(++actcount)) { actdir = pd; actwantsgrow = true; }
      } else if (needy && incr.getY() != 0) {
        if (random.oneIn(++actcount)) { actdir = pd; actwantsgrow = true; }
      } else if ((mOuterClearance[pd] - 1u > mOuterClearance[oppd]) ||
                 (!mNoDiffuse && mOuterClearance[pd] > 3u)) {
        //        bsl.printf("CONSIDROO1110:%d\n",actcount);
        if (random.oneIn(++actcount)) { actdir = pd; actwantsgrow = false; }
        //        bsl.printf("CONSIDROO1111:%d/%d/%d\n",actcount,actdir,actwantsgrow);
      }
    }
    //    bsl.printf("CONSIDROO12:%d/%d)\n",actcount,actdir);

    if (actcount > 0u) {
      B2DPacket pkt;
      B2DPacketAct.ActOp op = B2DPacketAct.cAOP_SIDE_MOVE;
      if (actwantsgrow && actdir != pu.cPLATE_GOES_E && actdir != pu.cPLATE_GOES_S)
        op = B2DPacketAct.cAOP_SIDE_GROW;
      pkt.initAct(op,actdir,nextCommandTag());
      MyPayload pay;
      pay.mBits = (MyPayload.MyBits) pkt;
      pay.mHasPayload = true;
      //      bsl.printf("CONSIDROO13:%x -- ",pay.mBits);
      //      pkt.print(bsl);
      //      bsl.printf("\n");
      if (root.trySendPayload(true,pay)) {
        mCmdTimer.set(1u);
        return;
      }
      //      bsl.printf("CONSIDROO14\n");
    }

  }

  Void receivePacket(B2DPacket bp) {
    ByteStreamLogger bsl;
    if (bp.isSense()) {
      //    bsl.printf("RECVOO:");
      //bp.print(bsl);
      //bsl.printf("\n");
      B2DPacketSense & sp = bp.asSense();
      Bool outer = sp.mSenseDir == sp.cSDIR_OUTWARD;
      for (Unsigned i = 0; i < 4u; ++i) {
        B2DPacketSense.Clearance c = sp.mDirData[i];
        if (c > 4u) continue;
        if (outer)
          mOuterClearance[i] = c;
        else
          mInnerClearance[i] = c;
      }

      if (outer) {
        Unsigned tagbits = sp.mSenseTag;
        Unsigned lasttag = mCommandSpinner.get();
        Unsigned mask = ((Unsigned) (1u << sp.mSenseTag.sizeof))-1u;
        if ((tagbits & mask) == (lasttag & mask))
          considerOuter();
        else {       
          bsl.printf("Mismatch sense tag %x vs %x (on %x)\n",
                     (tagbits & mask), (lasttag & mask), lasttag);
          mCmdTimer.set(1u); // don't ship anything in response to this.
        }
      }
    } else if (bp.isAct()) {
      B2DPacketAct & ap = bp.asAct();
      Unsigned tagbits = ap.mActTag;
      Unsigned lasttag = mCommandSpinner.get();
      Unsigned mask = ((Unsigned) (1u << ap.mActTag.sizeof))-1u;

      if ((tagbits & mask) != (lasttag & mask)) {
          bsl.printf("Mismatch act tag %x vs %x (on %x)\n",
                     (tagbits & mask), (lasttag & mask), lasttag);
          mCmdTimer.set(1u); // don't ship anything in response to this.
      }
    }
  }

  /** search the ew for any tecton, regardless of plate relationships.
     This is big bogus hammer by the way.
   */
  Bool iSeeTecton() {
    EventWindow ew;
    for (SN sn = 1u; sn < 41u; ++sn) {
      if (!ew.isAccessible(sn)) continue;
      Atom & a = ew[sn];
      if (a as Tecton) return true;
    }
    return false;
  }

  Void behave() {
    EventWindow ew;
    if (mustBlockOrDie()) return;
    if (iSeeTecton()) return;
    if (!tryToFindContainer(mRootSN, mRPeerSN, false)) return;
    {
      ByteStreamLogger bsl;
      // PLATEOPS
      MyContainer & root = (MyContainer&) ew[mRootSN];
      MyContainer & rpeer = (MyContainer&) ew[mRPeerSN];

      // If we don't have a reasonable desired size, assume existing size is desired
      if (!mDesiredPlateSize.isValid() || mDesiredPlateSize.toC2D().length() == 0u)
        mDesiredPlateSize.fromC2D(root.sizeOfPlate());

      MyPayload pay;
      Random random;
      DebugUtils du;
      B2DPacket bp;
      if (rpeer.tryRecvPayload(false,pay)) {
        mCmdTimer.reset();
        bp = (B2DPacket) pay.mBits;
        receivePacket(bp);
      } else if (mCmdTimer.current() == 0u) {
        bp.initSense(random.oddsOf(4,5), nextSenseTag()); 
        //        bsl.printf("SENDOO:");
        //        bp.print(bsl);
        //        bsl.printf("\n");
        pay.mBits = (MyPayload.MyBits) bp;
        pay.mHasPayload = true;
        //        du.printContext();
        //        du.print("RELKEKLASKLAKRKEN");
        //        du.print((Unsigned) pay.mBits);
        mCmdTimer.set(1u);
        if (root.trySendPayload(true,pay)) return;
        //        du.print("AWAYRELKEKLASKLAKRKEN");
      } else if (mCmdTimer.countAlarm()) {
        du.printContext();
        du.print("LOST CMD TIMER RESET");
        mCmdTimer.reset();
      }
    }
  }
}
