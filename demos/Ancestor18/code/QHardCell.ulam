
use HC3NgbState;

transient QHardCellState : Intention + DTU + QDebugUtils + Fail {

  HC3State mHC3State;
  HC3State & getHC3State() { return mHC3State; }

  Unsigned mysettleddowns;
  Unsigned mytotaldowns;

  Bool block() {
    mD&&pR("QHCSBLOCK10");
    return true;
  }

  //// Intention API
  @Override virtual Bool init(Intender & in) {
    mD&&pR("QHCSIN10");
    if (super.init(in)) return true;
    HC3State & hc3 = getHC3State();
    hc3.takeDebug(in);

    mD&&pR("QHCSIN11");
    QHardCell & qc = (QHardCell&) in;

    if (qc.countWatchdog()) {
      DebugUtils du;
      du.printContext();
      fail(__FILE__,__LINE__,"QHARDCELL WATCHDOG TIMEOUT");
      return true; // NOT REACHED
    }
    mD&&pR("QHCSIN11WD");

    mHC3State.init(qc);
    mD&&pR("QHCSIN12");
    return false;
  }

  @Override
  virtual Bool observe(Intender & in) {
    QHardCell & hc = (QHardCell&) in;
    mD&&pR("QHCSOBS10");
    if (super.observe(in)) return true;
    mD&&pR("QHCSOBS11");

    //// NEIGHBORS INITS AND MIN UPHOP 
    HC3State & hc3 = getHC3State();
    hc3.examineNgbs(hc);
    mD&&pR("QHCSOBS12NGBS");
    mD&&pR(hc3);
    
    return false;
  }

  @Override
  virtual Bool stabilize(Intender & in) {
    if (super.stabilize(in)) return true;
    
    QHardCell & hc = (QHardCell&) in;
    mD&&pR("QHCSSTAB10");

    if (initIfNeeded(hc)) return true;
    mD&&pR("QHCSSTAB11");

    // if (stabilizeHCPointOrDie(hc)) return true;
    // mD&&pR("QHCSSTAB1210");

    if (stabilizeHopsOrDie(hc)) return true;
    mD&&pR("QHCSSTAB12");

    if (stabilizeAccessibleOrDie(hc)) return true;
    mD&&pR("QHCSSTAB1211");

    if (stabilizeProductivity(hc)) return true;
    mD&&pR("QHCSSTAB12P");

    if (stabilizeDSHops(hc)) return true;
    mD&&pR("QHCSSTAB13");
    mD&&pR(hc);

    if (stabilizeZone(hc)) return true;
    mD&&pR("QHCSSTAB13ZONE");
    mD&&pR(hc);

    if (stabilizeContactWarnings(hc)) return true;
    mD&&pR("QHCSSTAB14");
    mD&&pR(hc);
    
    if (stabilizeSpawning(hc)) return true;
    mD&&pR("QHCSSTAB15");
    mD&&pR(hc);

    return false;
  }

  @Override virtual Bool act(Intender & in) {
    QHardCell & hc = (QHardCell&) in;
    mD&&pR("QHCSACT10");

    if (super.act(hc)) return true;
    mD&&pR("QHCSACT11");

    if (updatePatch(hc)) return true;
    mD&&pR("QHCSACT12");

    if (checkMoving(hc)) return true;
    mD&&pR("QHCSACT13");

    return false;
  }

  //// QHCS SERVICES

  Bool initIfNeeded(QHardCell & qc) {

    HC3State& hc3 = getHC3State();

    //// AM I UNINITTED?
    if (hc3.myUpHops > hc3.myUpHopsGoal) {
      mD&&pR("QHCUP12");
      // YES
      /// ARE THERE ANY NGBS TO LOOK TO?
      if (hc3.minUpHops >= hc3.myUpHopsGoal) return qc.die(); // NO

      HCPoint qchcp;
      hc3.minHCPoint.updateAdjacentHCPointFromUs(qchcp,-hc3.minUpHopsC2D);

      if (qchcp.length() < hc3.minHCPoint.length())
        return qc.die();        // Don't init from downhill

      qc.setHCPoint(qchcp);
      qc.setDSHops(hc3.minDSHops + 1u);
      qc.setMaxHopsGoal(hc3.minUpHopsGoal);

      return block();
    }
    //// I AM INITTED
    mD&&pR("QHCUP13");
    return false;
  }

  Bool stabilizeHopsOrDie(QHardCell & qc) {

    HC3State& hc3 = getHC3State();

    //// MIGHT I NEED TO UPDATE UPHOPS OR GOAL HOPS?
    if (hc3.myIsRoot) return false; // I'M ROOT THEREFORE NO

    //// I'M NOT ROOT AND SO MIGHT NEED TO UPDATE UPHOPS OR GOAL HOPS.

    mD&&pR("QHCUP14");
    // DIE IF NO NGBS.
    if (hc3.minUpHops == hc3.minUpHops.maxof) return qc.die();

    // DO I NEED TO UPDATE EITHER MINUP (HOP &) GOAL?
    Bool changed = false;

    if (hc3.minUpHops + 1u != hc3.myUpHops ||
        hc3.minUpHopsGoal != hc3.myUpHopsGoal) {
      mD&&pR("QHDCL MAXGOALHOPS CHG") 
        &&pRContext();

      // I DO. BUT DO I HAVE A LEGIT MINUP TO UPDATE FROM?
      if (hc3.minUpHops >= hc3.myUpHops) { // I DO NOT. 
        HCPoint hcp = qc.getHCPoint();
        return qc.die(); 
        //return qc.blockOrDie(qc.cNO_MINUP_DEATH_ODDS); 
      }

      qc.setMaxHopsGoal(hc3.minUpHopsGoal); // Be consistent with chosen
      {
        // Want to update OUR hcp from minHCPoint and minUpHopsC2D
        HCPoint newus;
        mD&&pR("QHDCLUPHCP10");
        mD&&pR(qc);
        mD&&pR(hc3.minUpHops);
        mD&&pR(hc3.minHCPoint);
        mD&&pR(hc3.minUpHopsC2D);
        newus.unsetHCPoint();
        hc3.minHCPoint.updateAdjacentHCPointFromUs(newus,-hc3.minUpHopsC2D);
        if (newus.isValid())
          qc.setHCPoint(newus);
        mD&&pR("QHDCLUPHCP11");
        mD&&pR(newus);
        mD&&pR(qc);
      }
      qc.setSettledDownHops(0u);  // and downstream is now considered unsettled
      changed = true;             // continue to the beyond goal check
    }
    //// I DO NOT NEED TO UPDATE (HOPS OR) GOAL
      
    mD&&pR("QHCUP1610");

    // AM I (NOW, DON'T TRUST HC3) BEYOND THE GOAL?
    if (qc.getUpHops() >= qc.getMaxHopsGoal()) { // YES
      mD&&pR("QHCUP1610DIE");
      return qc.die(); // I MUST DIE
    }

    mD&&pR("QHCUP1611");

    //// DO I HAVE UNINITTED NGBS?
    if (changed || hc3.uninits)
      return block();
    //// I HAVE NO UNINITTED NGBS.

    mD&&pR("QHCUP17");

    return false;
  }

  Bool stabilizeHCPointOrDieUNUSED(QHardCell & qc) {

    HC3State& hc3 = getHC3State();

    //// MIGHT I NEED TO UPDATE MY HCPOINT?
    if (hc3.myIsRoot) return false; // I'M ROOT THEREFORE NO

    //// I'M NOT ROOT AND SO MIGHT NEED TO UPDATE MY HCPOINT

    mD&&pR("QHSTHCP14");
    // DIE IF NO NGBS.
    if (hc3.minUpHops == hc3.minUpHops.maxof) return qc.die();

    C2D upc = hc3.minUpHopsC2D;
    mD&&pR(upc);
    EventWindow ew;

    HCPoint qchcp = qc.getHCPoint();
    if (upc.length() != 3u) // if not relaxed up, block if we're invalid,
      return !qchcp.isValid(); // else just hope for the best?
    {
      HCPointable & uphcable = (HCPointable&) ew[upc];
      HCPoint uphcp = uphcable.getHCPoint();
      if (!uphcp.isValid()) return true; // BLOCK

      HCPoint qchcpcopy = qchcp;
      uphcp.updateAdjacentHCPointFromUs(qchcp, -upc/3);
      mD&&pR("QHSTHCP15");
      mD&&pR(uphcp);
      mD&&pR(qchcp);
      mD&&pR(qchcpcopy);
      if (qchcp != qchcpcopy) {
        mD&&pR("QHSTHCP16");
        qc.setHCPoint(qchcp);
        return true;
      }
    }
    mD&&pR("QHSTHCP17");

    return false;
  }

  Bool stabilizeAccessibleOrDie(QHardCell & qc) {
    mD&&pR("QHSTACP10");
    //// If we are not relaxed..
    //// and anything in vonN ngb inaccessible, die
    EventWindow ew;
    if (!qc.isRelaxed()) 
      for (SN sn = 1u; sn <= 4u; ++sn) 
        if (!ew.isAccessible(sn)) {
          mD&&pR("QHSTACP11");
          EventWindow ew;
          ew[0] = Empty.instanceof;
          return true;
        }
    mD&&pR("QHSTACP12");
    return false;
  }

  Bool stabilizeProductivity(QHardCell & qc) {
    if (qc.consumeProductivityReport()) {

      HC3State& hc3 = getHC3State();
      if (hc3.myIsRoot) qc.resetWatchdog(); // HERE'S (PART OF) WHERE ROOT IS KEPT ALIVE
      else {
        EventWindow ew;
        C2D upc = hc3.minUpHopsC2D;
        QHardCell & qup = (QHardCell &) ew[upc];
        qup.reportProductivity();
      }
    }

    return false;
  }

  Bool stabilizeDSHops(QHardCell& qc) {
    HC3State& hc3 = getHC3State();

    //// AM I NOT A DS?
    if (!(qc is DiamondSequencer)) {
      //      qc.setOnDSAxes(hc3.myOnDSAxes); //FOG IT JUST ALWAYS UPDATE AXES??

      //// I AM NOT A DS. DO I NEED TO UPDATE DSHOPS?
      if (hc3.myDSHops != (DSHops) (hc3.minDSHops + 1u)) {
        mD&&pR("QHCUP1710");
        // I DO.
        qc.setDSHops(hc3.minDSHops + 1u);
        return block();
      }
    }

    //// MY UPHOPS WAS CONSISTENT WITH NGBS
    // (I MAY OR MAY NOT BE ROOT.)
    mD&&pR("QHCUP212");

    //// DO I HAVE ANY cNGB_MULTI NGBS?
    for (Unsigned i = 0u; i < hc3.mHC3NgbStates.lengthof; ++i) {
      HC3NgbState & n = hc3.mHC3NgbStates[i];
      if (n.ngbState() == HC3NgbState.cNGB_MULTI)
        return block();
    }
    //// I HAVE NO cNGB_MULTI NGBS.
    mD&&pR("QHCUP213");

    //// REFRESH MY SETTLEDDOWNHOPS?
    for (Unsigned i = 0u; i < hc3.mHC3NgbStates.lengthof; ++i) {
      HC3NgbState & n = hc3.mHC3NgbStates[i];
      if (n.foundAnyDownstream()) {
        ++mytotaldowns;

        if (!n.hasValidNeighbor()) {
          DebugUtils du;
          du.print("INVALID SETTLEDDOWNHOPS");
          du.print(i);
          du.print(n);
          n.assertHasNeighbor(); // boom
        }
        NgbState ngbstate = n.ngbState();
        if (ngbstate != cNGB_CENTER ||    // Downstream not settled on us
            n.getNgbMaxGoalHops() != hc3.myUpHopsGoal) { // or disagreement about size
          mysettleddowns = 0u;
          break;
        }
        QHardCell & ngb = n.getNgb();
        Unsigned downsbythis = ngb.getSettledDownHops() + 1u;
        if (mysettleddowns == 0u || mysettleddowns > downsbythis)
          mysettleddowns = downsbythis;
      }
    }
    // mysed == 0 : we have an unaligned down or no downs at all
    // otherwise : all downs aligned at least this far to us
    qc.setSettledDownHops(mysettleddowns);
    //// MY SETTLEDDOWNHOPS IS CURRENT
    mD&&pR("QHCUP214");
    return false;
  }

  Bool maybeRezone(QHardCell& qc, XZone oldxz, XZone newxz) {
    mD&&pR("QHCMYBREZ10");
    if (oldxz == newxz ||
        newxz == cXZONE_CT) // Can't store _CT why are we here
      return false;

    mD&&pR("QHCMYBREZ11") &&
      mD&&pR(getXZoneName(oldxz)) &&
      mD&&pR(getXZoneName(newxz));
    qc.setDSZone((Zone) newxz);
    mD&&pR(getXZoneName(qc.getDSXZone()));
    return true;
  }

  Bool stabilizeZone(QHardCell& qc) {
    mD&&pR("QHCSTBZON10START");
    HC3State & hc3 = getHC3State();
    for (Unsigned i = 0u; i < hc3.mHC3NgbStates.lengthof; ++i) {
      HC3NgbState & n = hc3.mHC3NgbStates[i];
      mD&&pR(i);
      mD&&pR(n);
      if (n.mState >= cNGB_WEST && n.mState <= cNGB_EAST)
        return false;           // don't do zones when bent
    }
    mD&&pR("QHCSTBZON10");
    XZone myxz = qc.getDSXZone();
    if (myxz == cXZONE_CT) // zone root always be stable yo
      return false;
    mD&&pR("QHCSTBZON11");

    XZone upzone = hc3.xzoneOfMinDSHops;
    C2D upzoneasc2d = xzone2C2D(upzone);
    C2D upc = hc3.minDSHopsC2D/3; // /3 to reduce to max length 2

    mD&&pR(getXZoneName(upzone)) &&
    mD&&pR(upzoneasc2d) &&
    mD&&pR(upc);

    if (upzone == cXZONE_UN) // can't do squat til they init
      return false;          // (if there's any way for them to be uninit)

    //// THEY ARE INITTED
    mD&&pR("QHCSTBZON12");

    if (upzone == cXZONE_CT) {
      // We are dsroot-adjacent
      mD&&pR("QHCSTBZON13");
      XZone newxz = c2D2XZone(-upc);
      mD&&pR(getXZoneName(newxz));
      if (newxz >= cXZONE_CT) fail(__FILE__,__LINE__);
      return maybeRezone(qc, myxz, newxz);
    }

    //// NGB IS NOT DSROOT
    mD&&pR("QHCSTBZON14");

    if (upzoneasc2d.length() == 1u) {
      mD&&pR("QHCSTBZON15ONAX");
      //// NGB IS ON AXIS
      C2D newc = upzoneasc2d-upc;
      XZone newxz = c2D2XZone(newc);
      mD&&pR(newc);
      mD&&pR(getXZoneName(newxz));
      return maybeRezone(qc, myxz, newxz);
    }

    //// NGB IS OFF-AXIS
    mD&&pR("QHCSTBZON16OFFAX");
    return maybeRezone(qc, myxz, upzone);
  }

  Bool stabilizeContactWarnings(QHardCell & qc) {
    HC3State& hc3 = getHC3State();
    EventWindow ew;

    /// UPDATE MY CONTACTWARNINGS IF NEEDED
    DEWLineC dl;
    if (mytotaldowns == 0u) {
      HCPoint myhcp = qc.getHCPoint();
      if (!myhcp.isValid())
        fail(__FILE__,__LINE__); // Shouldn't be here by now?
      Zone myzone;
      hcPoint2Zone(myhcp, myzone); // cannot fail since myhcp is valid
      Bool imACorner = myhcp.area() == 0u; // or zone2AxialDir(myzone, tmpad)
      PocketDir opendir;                   // NOT VALID IF imACorner
      if (!imACorner && !qc.hcPoint2PocketDir(myhcp,opendir))
        fail(__FILE__,__LINE__); 
      mD&&pR("QHCUP215");
      mD&&pR(imACorner);

      /// ..BASED ON OBSERVATIONS, BECAUSE I AM A LEAF (NO DOWNSTREAM?)
      for (Unsigned i = 0u; i < hc3.mHC3NgbStates.lengthof; ++i) {
        HC3NgbState & n = hc3.mHC3NgbStates[i];
        if (n.foundInaccessible() || n.foundBlockage()) {
          mD&&pR("QHCUP21510");
          mD&&pR(i);
          dl.maxDC((AxialDir) i, DEWLine.cDC_HERE);
          mD&&pR(dl);
        }
      }

      mD&&pR("QHCUP21910");
      mD&&pR(dl);

      /// ..OR BY MEMBRANE REPORTS
      for (SN sn = 1u; sn <= 8u; ++sn) {
        if (!ew.isAccessible(sn)) continue;
        Atom & a = ew[sn];
        if (a as Membrane) {
          if (!imACorner && a.mOpenDir == opendir) {
            mD&&pR("QHCUP21511");
            mD&&pR(a);
            dl.mergeDCs(a);
            mD&&pR("QHCUP21512");
            mD&&pR(dl);
          }
        } else if (a as Antenna) { /// ..OR ANTENNA REPORTS
          DEWLineC aadl = a.getAntennaWarnings();
          mD&&pR("QHCUP21513");
          mD&&pR(aadl);
          mD&&pR(a);
          if (imACorner) { // only signal on the corner's own ad
            mD&&pR("QHCUP21514");
            AxialDir ad;
            if (zone2AxialDir(myzone,ad)) {
              mD&&pR("QHCUP21517");
              dl.maxDC(ad,a.mDefCons[ad]);
              mD&&pR(dl);
            }
          } else { // !corner
            if (a.mOpenDir == opendir) {
              mD&&pR("QHCUP21516");
              mD&&pR(dl);
              mD&&pR(aadl);
              dl.mergeDCs(aadl); // on edge
              mD&&pR("QHCUPa21516");
              mD&&pR(dl);
              mD&&pR(aadl);
            }
          }
        }
      }

    } else {
      mD&&pR("QHCUP216");
      /// ..OR BY MAXING DOWNSTREAM, BECAUSE I AM NOT A LEAF
      for (Unsigned i = 0u; i < hc3.mHC3NgbStates.lengthof; ++i) {
        HC3NgbState & n = hc3.mHC3NgbStates[i];
        if (n.foundAnyDownstream()) {
          QHardCell & hc = n.getNgb();
          dl.mergePlausibleDCs(hc,(AxialDir) i);
        }
      }
    }
    mD&&pR("QHCUP217");
    mD&&pR(dl);
    mD&&pR(qc);
    if (dl != qc) {
      mD&&pR("QHCUP21710");
      mD&&pR(dl);
      mD&&pR("QHCUP21710PRE");
      mD&&pR(qc);
      qc.copyDEWLine(dl);
      mD&&pR("QHCUP21710POST");
      mD&&pR(qc);
      return block();         // AND QUIT (HELP WARNINGS SPEED AHEAD)
    }
    //// MY CONTACTWARNINGS ARE UNCHANGED

    mD&&pR("QHCUP218");
    mD&&pR(qc);
    return false;
  }

  Bool stabilizeSpawning(QHardCell & qc) {
    HC3State& hc3 = getHC3State();
    EventWindow ew;

    //// AM I TAIL?
    if (hc3.myUpHops < hc3.myUpHopsGoal - 1u) {
      // I'M NOT TAIL
      
      mD&&pR("QHCUP219");
      //// DO I NEED TO SPAWN?
      Bool spawns = false;

      //// EXTRA SPAWNING CONDITIONS SUPPORT

      Unsigned ourhops = hc3.myUpHops;

      for (Unsigned i = 0u; i < hc3.mHC3NgbStates.lengthof; ++i) {
        AxialDir ad = (AxialDir) i;
        HC3NgbState & n = hc3.mHC3NgbStates[i];

        if (ourhops != 0u && n.hasValidNeighbor() && n.getUpHops() == ourhops - 1u)
          continue;             // Ignore our uphops here

        if (!n.foundBlockage() &&         // unblocked ctr
            n.isEmpty() &&                // Whole ngb empty
            ew.isAccessible(n.mNgbCtr)) { // ctr is accessible

          //// WE HAVE A POTENTIAL SPAWNING DIR.
          // Check for vetoes by adjacent upstreams

          if (ourhops != 0u) {
            Bool skip = false;
            for (Unsigned rot = 0u; rot < 2u; ++rot) {
              Bool clockwise = rot == 0u;
              AxialDir rad = adjacentAxialDir(ad, clockwise);
              HC3NgbState & nr = hc3.mHC3NgbStates[rad];
              if (!nr.hasValidNeighbor()) continue; // can't be our upstream
              if (nr.getUpHops() != ourhops - 1u) continue; // isn't our upstream
              // We have an upstream of us. At 2?
              if (nr.mState != cNGB_CENTER) { skip = true; break; } // no
              // upstream ngb is at 2 to us
              
              // upstream at 2 in spawn dir?
              C2D upc = nr.getNgbC2D(); // Find ngb pos
              QHardCell & qhcup = (QHardCell &) ew[upc]; // or fail, at this point
              if (qhcup.mNgbRels[i] != 2u) {  // No it is not: Unrelaxed pocket
                skip = true; break;
              }
            }
            if (skip)
              continue; // upstream ngb vetoed this spawn
          }

          //// THERE ARE NO VETOES BY ADJACENT UPSTREAMS

          qc.setSettledDownHops(0u);  // After I spawn, downstream will be unsettled
          Atom a = qc.toSpawn();      // Get a concete Self subclass to spawn
          mD&&pR("QHCUP219SPONG");
          mD&&pR(a);
          QHardCell & copy = (QHardCell&) a;
          copy.initCopy();

          HCPoint qch = qc.getHCPoint(); // our pos
          HCPoint cch = qch;
          // If updateAdjacent finds they are (0,0), it leaves cch unchanged..
          qch.updateAdjacentHCPointFromUs(cch, n.mNgbCtr); // ..so trying to heal root..
          if (cch.length() > qch.length()) { // CAN ONLY SPAWN DOWNHILL
            copy.setHCPoint(cch);  
            ew[n.mNgbCtr] = a;
            mD&&pR("QHCUP219DONE");
            mD&&pR(n.mNgbCtr);
            mD&&pR(ew[n.mNgbCtr]);
            spawns = true;
          }
        }
      }

      if (spawns) {
        qc.signalLocalDamage(); // spawning means (had been) damage
        return true;            // I SPAWNED.
      }

      mD&&pR("QHCUP220");

      //// I DID NOT NEED TO SPAWN.
      // (I MAY OR MAY NOT BE TAIL)
    } else {
      mD&&pR("QHCUP221");
      //// I AM TAIL
      if (qc as EdgeHG) { // Let's do smart foaming if we can
        PocketDir opendir;
        Unsigned foamed = 0u;
        if (qc.hasEdgeZone() && zone2PocketDir(qc.getEdgeZone(),opendir)) {
          PocketDir cwpd = rotatePocketDir(opendir, true);
          C2D c = pocketDir2C2D(cwpd);
          for (C2D.Coord i = -2; i <= 2; ++i) {
            if (i == 0) continue;
            C2D diagc = c*i;
            if (ew.isAccessible(diagc) && ew[diagc] is Empty) {
              MBase mb;
              mb.mOpenDir = opendir; // Let's start these guys off
              mb.mDirBound = true;   // with some kind of clude
              ew[diagc] = mb.atomof;
              ++foamed;
            }
          }
          return foamed > 0u; 
        }
      }
    }
    mD&&pR("QHCUP222");

    return false;
  }

  Void resetSettledDownHops(QHardCell & qc, HC3State & hc3) {
    qc.setSettledDownHops(0u);     // Full restart for settlements
    for (Unsigned i = 0u; i < hc3.mHC3NgbStates.lengthof; ++i) {
      HC3NgbState & n = hc3.mHC3NgbStates[i];
      if (n.hasValidNeighbor()) {
        QHardCell & nqc = n.getNgb();
        nqc.setSettledDownHops(0u); // NUKE all down ngb hops
      }
    }

  }

  Bool checkMoving(QHardCell & hc) {
    HC3State& hc3 = getHC3State();
    EventWindow ew;

    /////// CONSIDERATIONS FOR MOVING (ROOT OR NON-ROOT)

    //// DO I HAVE ENOUGH DOWN ALIGNMENT TO MOVE NOW?
    if (mytotaldowns > 0u &&                  // If I have any downs at all (not tail)
        mysettleddowns < hc.cMIN_DOWN_SETTLED &&  // No good if not there yet and
        hc3.myUpHops + mysettleddowns < hc3.myUpHopsGoal - 1u) { // not near the tail
      mD&&pR("QHCUP223");
      
      ByteStreamLogger bsl;
      return block(); // NOT SETTLED DOWN ENOUGH TO MOVE
    }
    //// I HAVE AT LEAST cMIN_DOWN_SETTLED DOWN ALIGNMENT OR TO TAIL

    mD&&pR("QHCUP224");
    //// AM I ROOT?
    if (hc.isRoot())
      return hc.rootBehave(self); // YES, HANDLE ME
    //// I AM NOT ROOT.

    mD&&pR("QHCUP225");
    //// DO MY UPS HAVE A CONSENSUS ALIGNMENT?
    NgbState upstate = cNGB_INIT;
    for (Unsigned i = 0u; i < hc3.mHC3NgbStates.lengthof; ++i) {
      HC3NgbState & n = hc3.mHC3NgbStates[i];
      if (n.foundAnyUpstream()) {
        if (!n.hasValidNeighbor()) {
          DebugUtils du;
          du.print("INVALID FOUND UPS");
          n.assertHasNeighbor(); // boom
        }
        NgbState ngbstate = n.ngbState();
        if (upstate == cNGB_INIT) upstate = ngbstate;
        else if (upstate != ngbstate)
          return block(); // MY UPS ARE NOT ALL ALIGNED WITH EACH OTHER
      }
    }
    //// MY UPS ARE ALL ALIGNED upstate.

    mD&&pR("QHCUP226");
    //// AM I UNALIGNED WITH upstate?
    if (upstate == 0u) return false; // I (AM NOT ROOT AND I) ALIGN WITH UPSTATE NOTHING TO DO HERE
    //// I AM NOT ALIGNED WITH upstate.

    mD&&pR("QHCUP227");

    /// AM I BLOCKED FROM MOVING upstate?
    if (!ew.isEmpty(upstate))
      return block(); // I AM BLOCKED.

    /// I AM NOT BLOCKED: upstate IS EMPTY (OR INACCESSIBLE)

    //// I AM GOING TO FOGGEN MOVE. I WILL NOT REMAIN SETTLED.
    resetSettledDownHops(hc, hc3);
    mD&&pR("QHCUP228");
    hc.moveEntourage(self, upstate); // GO HERE
    //// I MOVED.
    
    return true; // CANNOT SAFELY CALL (eg) done() HERE!
  }

  PatchState mPatchState;
  PatchState & getPatchState() { return mPatchState; }

  Bool updatePatch(QHardCell & qhc) {
    mD&&pR("QSUPTC10");

    constant Unsigned cUPDATE_PATCH_ODDS = 1u; // XXX
    Random random;
    if (!random.oneIn(cUPDATE_PATCH_ODDS))
      return false;

    mD&&pR("QSUPTC1010");

    //// CAN WE INIT PATCH STATE?
    if (!mPatchState.init(qhc)) return false; // NO WE CANNOT

    //// WE INITTED PATCH STATE

    mD&&pR("QSUPTC11");

    //// IS THERE A POCKETABLE TO UPDATE?
    if (mPatchState.mPCount > 0u) {
      EventWindow ew;
      D1Pocketable & pa = (D1Pocketable&) ew[mPatchState.mPSN];
      mD&&pR("QSUPTC12");
      mD&&pR(pa);
      return pa.updatePatch(self, qhc);
    }

    mD&&pR("QSUPTC13");
    return false;
  }

}

quark Unpocketed { } // Flag type meaning don't move me

quark QHardCell : Intender
  + HCPointable
  + QDSHops
  + DEWLine
  + DTU
  + QDebugUtils
{
 
  //// Intender API
  @Override
  virtual ClassId getIntentionClass() { return QHardCellState.classidof; }

  //// QHardCell STATE
  constant Unsigned cNO_MINUP_DEATH_ODDS = 10u;

  NgbRels mNgbRels;

  Bool mProductivity;

  Void reportProductivity() { mProductivity = true; }

  Bool consumeProductivityReport() {
    Bool ret = mProductivity;
    mProductivity = false;
    return ret;
  }

  //// QHardCell API
  typedef EventWindow.SiteNum SN;

  virtual Bool countWatchdog() ;
  virtual Void resetWatchdog() ;

  virtual Bool inMyGroup(QHardCell & qh) { return true; }

  virtual Unsigned getUpHops() ;          // Distance to root
  virtual Unsigned getMaxUpHops() ;       // uphops val that means uninitted
  // XXX  virtual Void setUpHops(Unsigned uphops) ;

  virtual Unsigned getMaxHopsGoal() ;     // Intended max hops (here)
  virtual Void setMaxHopsGoal(Unsigned maxup) ; 
  
  virtual Unsigned getSettledDownHops() ; // Down hops all aligned with me 
  virtual Void setSettledDownHops(Unsigned settledown) ;

  virtual Bool isRoot() { return false; } 
  virtual Bool rootBehave(QHardCellState &hcs) { return false; } 
  virtual Void initCopy() { getHCPoint().unsetHCPoint(); /*setUpHops(Unsigned.maxof);*/ /* set uninitted */ }

  virtual Atom toSpawn() ;      //< Concrete subclass to build for spawning

  //// QHardCell SERVICES
  /** \returns true if all neighbor relations are 2
   */
  Bool isRelaxed() {
    for (Unsigned i = 0u; i < 4u; ++i)
      if (mNgbRels[i] != 2u) return false; // NO
    return true;
  }

  Bool isTail() { return getUpHops() == getMaxHopsGoal() - 1u; }

  Bool done() { return true; }  // Things are different now 

  Bool die() {
    mD&&pR("QHCDIE10");
    EventWindow ew;
    ew[0] = Empty.instanceof; 
    return true;
  }
  
  Bool blockOrDie(Unsigned deathOdds) {
    mD&&pR("QHCBLOCKORDIE10");
    mD&&pR(deathOdds);
    Random random;
    return random.oneIn(deathOdds) ? die() : done();
  }

  Void signalLocalDamage() {
    // Possible conditions:
    // (1) We spawned (so there had been damage)
    // Action: Signal damage on axes base on our HCPoint
    mD&&pR("QHCSLD10");
    mD&&pR((DEWLine&) self);
    Zone zone;
    HCPoint ushc = getHCPoint();
    mD&&pR(ushc);
    if (!hcPoint2Zone(ushc, zone)) // can't signal if we're
      return;                      // lost or the foggen root
    AxialDir ads[2];
    Unsigned dirs = zone2AxialDirs(zone, ads[0], ads[1]);
    mD&&pR("QHCSLD11");
    mD&&pR(dirs);
    DEWLineC dl;
    for (Unsigned i = 0u; i < dirs; ++i) {
      mD&&pR("QHCSLD12");
      mD&&pR(dirs);
      dl.maxDC(ads[i], cDC_HERE);
    }
    mD&&pR("QHCSLD13");
    mD&&pR(dl);
    mergeDCs(dl);
    mD&&pR("QHCSLD14");
    mD&&pR((DEWLine&) self);
  }
  
  //  constant Unsigned cMIN_DOWN_SETTLED = 3u; // DEBUG TEST Say we must be this settled to ride
  //  constant Unsigned cMIN_DOWN_SETTLED = 4u; // 202303050355 Still see rare deadlocks at 3..
  //  constant Unsigned cMIN_DOWN_SETTLED = 5u; // 202305072330 We don't believe this is the answer but still..
  constant Unsigned cMIN_DOWN_SETTLED = 8u; // 202305100056 Not to avoid deadlocks but to shorten motion pipeline

  Void moveEntourage(QHardCellState& qcs, SN destsn) {
    HC3State & hcs = qcs.getHC3State();
    DebugUtils du;
    EventWindow ew;
    C2D dest = ew.getCoord(destsn);
    C2D side(dest.y,dest.x); // swap coords

    //// RECOMPUTE NGBRELS AS OF AFTER I MOVE
    {
      ByteStreamLogger bsl;
      //      bsl.printf("rels %d %d %d %d + %d\n",mNgbRels[0],mNgbRels[1],mNgbRels[2],mNgbRels[3],destsn);
      hcs.updateNgbsForMove(destsn);
      hcs.summarizeRels(mNgbRels);
      //      bsl.printf("rels %d %d %d %d\n",mNgbRels[0],mNgbRels[1],mNgbRels[2],mNgbRels[3]);
    }

    // Advance the entourage
    for (C2D.Coord flip = -1; flip < 2; flip += 2) {
      C2D sideout = side*flip;
      C2D fmover = dest + sideout;

      if (!(ew[fmover] is Empty)) { // Need to advance front bein

        if (!(ew[fmover] is Unpocketed)) { // if is unpocketed, just delete
          C2D mdest = dest*2 + sideout;
          if (!(ew[mdest] is Empty)) { // Need to push
            C2D altdest = mdest + sideout;
            if (!(ew[altdest] is Empty)) {
              DebugUtils du;
              //du.print("SMASH OUT");
              //du.print(ew[altdest]);
            }
            ew[altdest] = ew[mdest]; // pushed
          }
          ew[mdest] = ew[fmover];
        }
        ew[fmover] = Empty.instanceof;
      }

      C2D bmover = dest*-1 + sideout;
      if (!(ew[bmover] is Empty)) { // Need to advance back bein
        if (!(ew[bmover] is Unpocketed)) { // if is unpocketed, just delete
          C2D bdest = bmover + dest;
          ew[bdest] = ew[bmover];
        }
        ew[bmover] = Empty.instanceof;
        
      }
    }

    // Lastly, advance self
    ew.swap(0u,destsn);
  }

}
