transient PocketChainState : SegmentState + Fail {
  Bool mGrowTemp = false;

  Bool mInDSPValid = false; // set in observe(..) if all goes well
  Bool mInDSP[MatchCodePosition.maxof + 1u];
  Bool haveInDSP() { return mInDSPValid; }
  Bool isInDSP(MatchCodePosition mcp) {
    if (!haveInDSP()) fail(__FILE__,__LINE__);
    return mInDSP[mcp];
  }
  Bool isInDSPBodyDir(BodyDir bd) {
    return isInDSP( bd == cBODY_UP ?
                    cMCP_NEXT :
                    cMCP_PREV );
  }


  //// PocketChainState API

  //// Intention API

  @Override
  virtual Bool init(Intender & seg) {
    print("PCHNS10");
    if (super.init(seg)) { // If segmentstate can't init, we might need to die
      PocketHC3 & p = self.mPocket;

      print("PCHNS11");
      print(p.mStatus);
      /* Movement puts pocket content on edge; can't die about it in general
      if (p.mStatus == PocketHC3.cSTATUS_EDGE) {
        print("PCHNS11EDGE");
        PocketChain & qc = (PocketChain&) seg;
        return qc.die("PocketChain: Met on edge");
      }
      */
      if (p.mStatus == PocketHC3.cSTATUS_OPEN) {
        print("PCHNS12");
        if (p.mCoordCount < 3u) {
          PocketChain & qc = (PocketChain&) seg;
          return qc.die("PocketChain: Too open pocket");
        }
        print("PCHNS13");
      }
      print("PCHNS14");
      return true;
    }
    print("PCHNS15");
    return false;
  }

  @Override
  virtual Bool observe(Intender & in) {
    if (super.observe(in)) return true;
    print("QchObs10");

    PocketChain & qc = (PocketChain&) in;
    
    PocketHC3 & p = self.mPocket;
    p.takeDebug(in);

    if (p.mStatus != PocketHC3.cSTATUS_OK) {
      return true; // Distorted pocket
    }
    print("QchObs11");

    Segment.MateStatus ms = qc.findMates(self);
    print("QchObs12");
    print(ms);
    if (ms > Segment.cMATE_UNSURE) {
      return qc.die("PocketChain:>MATE_UNSURE");
    }
    if (ms > Segment.cMATE_OK) return qc.diffuse(self);

    print("QchObs13");

    mInDSP[cMCP_PREV] = p.isDSP(mPocketWithMate[cBODY_DOWN]);
    print("QchObs14PREV");
    print(mPocketWithMate[cBODY_DOWN]);
    print(mInDSP[cMCP_PREV]);

    mInDSP[cMCP_HERE] = p.isDSP(cPP_SELF);
    print("QchObs15HERE");
    print(mInDSP[cMCP_HERE]);

    mInDSP[cMCP_NEXT] = p.isDSP(mPocketWithMate[cBODY_UP]);
    print("QchObs16NEXT");
    print(mPocketWithMate[cBODY_UP]);
    print(mInDSP[cMCP_NEXT]);

    mInDSPValid = true;

    //// MateStatus is cMATE_OK
    print("QchObs17");
    return false;
  }

  @Override
  virtual Bool stabilize(Intender & in) {
    if (super.stabilize(in)) return true;
    print("QchStab10");

    PocketChain & qc = (PocketChain &) in;
    if (qc.propagateChainControls(self)) return true;

    /* only gradients left are the chain controls
    if (qc.updateGradients(self)) return true;
    */

    print("QchStab11");
    return false;
  }

  @Override
  virtual Bool act(Intender & in) {
    print("QchAct10");
    if (super.act(in)) return true;

    print("QchAct11");
    PocketChain & qc = (PocketChain &) in;
    if (qc.actMovingSeg(self)) return true;
    print("QchAct12");
    if (qc.actHeadSpecial(self)) return true;
    print("QchAct13");
    if (qc.actTailSpecial(self)) return true;
    print("QchAct14");
    return false;
  }
}

quark PocketChain : Segment + Fail {

  ChainControlUp mChainControlUp;        // control signals from body up
  ChainControlDown mChainControlDown;    // control signals from body down
  
  DriveStatusCode mDSType = cDS_DUMB;
  Bool mArrived;                //< true when we've had an event after moving

  //// UrSelf API
  @Override
  ARGB getColor(Unsigned selector) {
    if (selector == 1u) {
      ColorUtils cu;
      if (mDSType == cDS_DUMB) return cu.color(0xffcccccc);
      if (mDSType == cDS_UP)   return cu.color(0xff00cccc);
      if (mDSType == cDS_DOWN) return cu.color(0xffcccc00);
      // cDS_NORM
      ARGB head = cu.color(0xff0000cc);
      ARGB tail = cu.color(0xff00cc00);
      return cu.between(tail, head, 100u/**mSegsDown/cMAX_SEG*/);
    }
    return super.getColor(selector);
  }

  @Override
  virtual Void renderGraphics() {
    Drawable drawable;
    if (!drawable.canDraw()) return;
    super.renderGraphics();

    renderLinks(350u);

    if (!Parms.cRENDER_POCKETCHAIN_BOXES) return;

    C2D.Coord size;
    which (mDSType) {
    case cDS_DUMB: { size = 900; }
    case cDS_NORM: { size = 700; }
    otherwise: { size = 350; }
    }
    ARGB col = getColor(2u);
    C2D siz(size, size);
    C2D pos(-size/2,-size/2);

    drawable.fillRectangle(pos, siz, col);
  }
  
  Void renderLinks(Unsigned width) {
    Drawable drawable;
    if (!drawable.canDraw()) return;
    SN side;

    side = mPocketPtrs[cBODY_DOWN];
    if (side >= 1u && side <= 4u) 
      drawPocketArrow_(side,width,true);

    side = mPocketPtrs[cBODY_UP];
    if (side >= 1u && side <= 4u) 
      drawPocketArrow_(side,width,false);
  }

  //// Pocketable API
  @Override
  virtual Bool inMyGroup(Pocketable & other) {
    return other is Self; // We'll dance with any other PocketChain!
  }

  //// Intender API
  @Override
  virtual ClassId getIntentionClass() { //< default unless overridden
    PocketChainState qcs; // Ensure concrete
    return qcs.classidof;
  }

  //// PocketChain API
  /** Can this segment be swapped with its upstream (or downstream)
      neighbor? Default says no if isInDSP, otherwise yes if non-DUMB segments
   */
  virtual Bool isSwappable(PocketChainState & ds, Bool upstream) {
    print("PCISWP10");
    if (mDSType == cDS_DUMB) return false;
    if (ds.haveInDSP()) {
      if (ds.isInDSP(cMCP_HERE)) return false;
      if (ds.isInDSP(upstream ? cMCP_NEXT : cMCP_PREV)) return false;
    }
    return true;
  }

  /** Courtesy notification that this segment is about to get
      swapped. */
  virtual Void preswapActions(PocketChainState & ds) { /* default no action */ }

  //// PocketChain SERVICES
  virtual Void copySegAndPChain(PocketChain & from) {
      PocketChain & qg = self;
      qg = from;             // Copy other qchain info
      Segment & sg = self;
      sg = from;             // and their Segment info
  }

  /** \returns true if this PocketChain is a temp heading up or down */
  Bool isTemp() { return mDSType == cDS_DOWN || mDSType == cDS_UP; }

  /** \returns true if this PocketChain is a mobile or immobile non-temp */
  Bool isReal() { return mDSType == cDS_NORM || mDSType == cDS_DUMB; }

  /** \returns true if this PocketChain is a mobile non-temp */
  Bool isRealMobile() { return mDSType == cDS_NORM; }

  Void setDSType(DriveStatusCode ds) { mDSType = ds; }

  Bool drawPocketArrow_(SN towardSide, Unsigned width, Bool long) {
    Drawable drawable;
    if (!drawable.canDraw()) return false;
    MDist md; // No ew when rendering!  Can't use ew.getCoordRaw()!
    
    C2D sc = md.getSiteCoord(towardSide); 
    constant Int cSHIFT = 2*Drawable.cUNITS_PER_SITE/5;
    Int bs = (Int) width; // box small
    Int bl =
      long
      ? (3*Drawable.cUNITS_PER_SITE/2 - cSHIFT)
      : (7*Drawable.cUNITS_PER_SITE/8 - cSHIFT);
    C2D siz, pos;

    which (towardSide) {
      case cPP_WEST:  { siz.set(bl,bs); pos.set(-bl-cSHIFT,-bs/2); }
      case cPP_NORTH: { siz.set(bs,bl); pos.set(-bs/2,-bl-cSHIFT); }
      case cPP_SOUTH: { siz.set(bs,bl); pos.set(-bs/2,cSHIFT); }
      case cPP_EAST:  { siz.set(bl,bs); pos.set(cSHIFT,-bs/2); }
    }
    ARGB oncol = getColor(0xff00ff00u);
    /*
    print("DPAR11");
    print(towardSide);
    print(bl);
    print(bs);
    print(siz);
    print(pos);
    */
    drawable.fillRectangle(pos, siz, oncol);
    return true;
  }

  /*
  virtual Bool chainOp(PocketChainState & ds) {
    return false;
  }
  */

  /** Assuming self is inDSP
   */
  Void doDSPSwapOut(PocketChainState & pcs, Self & other, SN destsn) {
    // Spread our DSP-is-root control info to swappee
    other.mChainControlUp = mChainControlUp;
    other.mChainControlDown = mChainControlDown;
    swapPocketPtrs(other);
    doSwap(pcs,destsn);
  }

  Void swapPocketPtrs(Self & other) {
    PocketPtrs temp = other.mPocketPtrs; // Exchange ptrs
    other.mPocketPtrs = mPocketPtrs;
    mPocketPtrs = temp;
  }

  Void doSwap(PocketChainState & ds, SN destsn) {
    preswapActions(ds);          // Run hook
    EventWindow ew;
    ew.swap(0u,destsn);
  }

  Bool diffuse(PocketChainState & ds) {
    EventWindow ew;
    Random random;
    DebugUtils du;
    PocketHC3 & p = ds.mPocket;
    RectIterator ri;
    if (!p.initIterator(ri)) {
      return true; // Bad pocket
    }
    Unsigned empcount = 0u;
    SN empsn;
    while (ri.hasNext()) {
      C2D n = ri.next();
      if (!ew.isAccessible(n)) continue;
      if (ew[n] is Empty && random.oneIn(++empcount))
        empsn = ew.getSiteNumber(n);
    }
    if (empcount > 0u) {
      doSwap(ds,empsn);
    }
    return true;
  }

  Bool die() {
    DebugUtils du;
    du.printContext();
    du.print("^^^ PocketChain.die ^^^");
    EventWindow ew;
    ew[0] = Empty.instanceof;
    return true;
  }

  Bool die(String msg) {
    DebugUtils du;
    du.print("vvv DYING vvv");
    du.print(msg);
    return die();
  }

  Bool propagateChainControls(PocketChainState & ds) {
    EventWindow ew;

    Bool iAmInDSP = ds.isInDSP(cMCP_HERE);
    
    print("PRCHCN10");
    printContext();
    print(iAmInDSP);
    Unsigned changes = 0;
    if (mPocketPtrs[cBODY_DOWN] == cPP_NULL || iAmInDSP) {
      print("PRCHCN11");
      mChainControlDown.atEnd
        (ds);  // Tail has nobody down
    } else {
      print("PRCHCN12");
      SN down = ds.mEWSNMate[Segment.cBODY_DOWN];
      Atom & a = ew[down];
      if (a as Self) {
        print("PRCHCN13");
        print(mChainControlDown);
        ChainControlDown & ccd = a.mChainControlDown;
        if (mChainControlDown.takeFrom(ccd)) {
          print("PRCHCN1310");
          print(mChainControlDown);
          print(a.mChainControlDown);
          ++changes;
        }
      } else die("PRCHCN14: Down not Self");
    }
    print("PRCHCN15");
    
    // Check ups if any
    if (mPocketPtrs[cBODY_UP] == cPP_NULL || iAmInDSP ) {
      print("PRCHCN16");
      mChainControlUp.atEnd(ds);  // Head has nobody up
    } else {
      SN up = ds.mEWSNMate[Segment.cBODY_UP];
      Atom & a = ew[up];
      if (a as Self) {
        print("PRCHCN17");
        print(mChainControlUp);
        ChainControlUp & ccu = a.mChainControlUp;
        if (mChainControlUp.takeFrom(ccu)) {
          print("PRCHCN1710");
          print(mChainControlUp);
          print(a.mChainControlUp);
          ++changes;
        }
      } else die("PRCHCN18: Up not Self");
    }
    print("PRCHCN19");
    print(changes);
    return changes != 0u;
  }

  Bool updateGradients(PocketChainState & ds) {
    EventWindow ew;

    Bool iAmFixedUp = !isSwappable(ds, true);  // can't go up
    Bool iAmFixedDown = !isSwappable(ds, false); // can't go down
    
    print("UPGD10");
    //    print(iAmFixed);
    // Check downs if any
    if (mPocketPtrs[cBODY_DOWN] == cPP_NULL || iAmFixedDown) {
      print("UPGD11");
      mChainControlDown.atEnd(ds);  // Tail has nobody down
    } else {
      print("UPGD12");
      SN down = ds.mEWSNMate[Segment.cBODY_DOWN];
      Atom & a = ew[down];
      if (a as Self) {
        print("UPGD13");
        if (mDSType == cDS_DOWN) {
          print("UPGD14");
          print("XXCHAINCONTROLCHECKHERE 10");
          //          mSegsDown = a.mSegsDown;
          //          mTempsDown = (SegCount) (a.mTempsDown + 1u);
        } else {
          print("UPGD15");
          print("XXCHAINCONTROLCHECKHERE 11");
          //          mSegsDown = (SegCount) (a.mSegsDown + 1u);
          //          mTempsDown = a.mTempsDown;
        }
      } else die("updateGradients: Down not Self");
    }
    print("UPGD16");
    
    // Check ups if any
    if (mPocketPtrs[cBODY_UP] == cPP_NULL || iAmFixedUp ) {
      print("UPGD17");
      mChainControlUp.atEnd(ds);  // Head has nobody up
    } else {
      SN up = ds.mEWSNMate[Segment.cBODY_UP];
      Atom & a = ew[up];
      if (a as Self) {
        print("UPGD18");
        if (mDSType == cDS_UP) {
          print("UPGD19");
          print("XXCHAINCONTROLCHECKHERE 12");
          //          mSegsUp = a.mSegsUp;
          //          mTempsUp = (SegCount) (a.mTempsUp + 1u);
        } else {
          print("UPGD210");
          print("XXCHAINCONTROLCHECKHERE 13");
          //          mSegsUp = (SegCount) (a.mSegsUp + 1u);
          //          mTempsUp = a.mTempsUp;
        }
      } else die("updateGradients: Up not Self");
    }
    print("UPGD211");
    return false;
  }

  Bool actMovingSeg(PocketChainState & ds) {
    print("AMVS10");
    EventWindow ew;

    //// ARE WE IN A DSP?
    if (ds.isInDSP(cMCP_HERE)) {
      // DON'T MOVE (VIA THIS METHOD) IF SO
      return false;
    }

    //// ARE WE A MOVING SEG?
    if (isTemp()) {
      print("AMVS11");
      BodyDir movedir =
        (mDSType == cDS_UP) ? Segment.cBODY_UP : Segment.cBODY_DOWN;
      BodyDir backdir = (BodyDir) (1u - movedir);

      /// HAVE WE REACHED THE END OF OUR MOVE?
      if (mPocketPtrs[movedir] == cPP_NULL) {
        print("AMVS12");

        /// WE HAVE REACHED THE END OF OUR MOVE.

        /// ARE WE DETACHED FROM THE CHAIN?
        if (mPocketPtrs[backdir] != cPP_NULL) {
          print("AMVS13");
          /// WE ARE NOT DETACHED FROM THE CHAIN.

          SN backsn = ds.mEWSNMate[backdir];

          /// CAN WE ACCESS OUR BACK BEIN?
          if (backsn == 0u) 
            return diffuse(ds); // No, go jiggle maybe
          /// WE CAN ACCESS OUR BACK BEIN.

          print("AMVS14");
          Atom & a = ew[backsn];
          if (a as Self) {
            print("AMVS15");
            a.mPocketPtrs[movedir] = cPP_NULL;
            // XXX PRE-FIXUP mTempDown IF DOWN?
          } else fail("DETACHING SEG BACK MISSING");
        }
        /// WE ARE DETACHED FROM THE CHAIN.

        print("AMVS16");
        ew[0u] = Empty.instanceof;
        /// WE ARE GONE.
        return true;
      }
      /// WE HAVE NOT REACHED THE END OF OUR MOVE.

      print("AMVS17");
      /// CAN WE ADVANCE IN OUR MOVING DIRECTION?
      SN movesn = ds.mEWSNMate[movedir];
      if (movesn == 0u)
        return diffuse(ds); // No go jiggly puff

      print("AMVS18");
      /// WE CAN ACCESS OUR NEXT BEIN.
      Atom & a = ew[movesn];
      if (a as Self) {
        print("AMVS19");
        print(movedir);
        print(ds.isInDSPBodyDir(movedir));
        print(a);
        print(ds);
        /// IS IT SWAPPABLE?
        if (a.mDSType != cDS_DUMB && // if not dumb and 
            !ds.isInDSPBodyDir(movedir)) {  // not in DSP, it's swappable
          print("AMVS210");
          swapPocketPtrs(a);   // Exchange ptrs
          doSwap(ds,movesn);   // Then swap wholesale
          /// WE ADVANCED IN OUR MOVING DIRECTION
          return true;
        }
        // ELSE FALL THROUGH
        print("AMVS211");
      } else fail("MOVING SEG NEXT MISSING");
    }
    print("AMVS212");
    return false;
  }

  Bool tryDelAtom(PocketChainState & ds, ClassId baseid) { return tryDelAtom(ds,baseid,cPP_SELF); }
  Bool tryDelAtom(PocketChainState & ds, ClassId baseid, PocketPtr pkt) {
    PocketHC3 & p = ds.mPocket;
    RectIterator ri;
    if (!p.initIterator(ri,pkt,true)) 
      return false;             // Can't iterate like that
    Unsigned matches = 0u;
    SN msn;
    ClassUtils cu;
    EventWindow ew;
    Random random;
    while (ri.hasNext()) {
      C2D n = ri.next();
      if (!ew.isAccessible(n)) continue;
      ClassId cid = cu.getClassId(ew[n]);
      if (cu.isBase(cid,baseid) && random.oneIn(++matches))
        msn = ew.getSiteNumber(n);
    }
    if (matches == 0u)
      return false;
    ew[msn] = Empty.instanceof;
    return true;
  }

  PocketPtr tryGrowOrMove(PocketChainState & ds, Bits axialdirmap, Bool canGrow, Bool canMove) {
    print("tGoM10");
    findAvailables(ds); 

    SN newsn;
    Unsigned newcount;
    PocketPtr pickedptr;
    Random random;
    EventWindow ew;
    print("tGoM11");
    for (PocketPtr ptr = cPP_SELF; ptr <= cPP_EAST; ++ptr) {
      print("tGoM12");
      print(ptr);
      if (((axialdirmap>>ptr)&1u) == 0u) continue; // don't even want to consider there
      print("tGoM13");
      if (ds.mPocketUsCount[ptr] > 0u) continue; // can't go there if we are there
      print("tGoM14");
      if (ds.mPocketEmpty[ptr] > 0u &&           // if has an empty
          ds.mPocketFull[ptr] < 2u &&            // and not too full
          ds.mPocketInaccessible[ptr] == 0u) {   // and no hidden surprises
        print("tGoM15");
        if (random.oneIn(++newcount)) {          // count and maybe pick
          print("tGoM16");
          pickedptr = ptr;
          newsn = ds.mEWSNAvailables[pickedptr];
          print(pickedptr);
          print(newsn);
        }
      }
    }
    print("tGoM17");
    if (newcount > 0u) {
      print("tGoM18");
      // init new head
      Atom a = self.atomof;       // Copy as is
      Self & copy = (Self&) a;
      copy.mPocketPtrs[Segment.cBODY_DOWN] = reversePocket(pickedptr);
      self.mPocketPtrs[Segment.cBODY_UP] = pickedptr;
      
      if (canGrow) {
        print("tGoM19");
        print("XXCHAINCONTROLCHECKHERE 14");
        //        ++copy.mSegsDown;       // Preupdate for us as a new segment
      } else /* canMove */ {
        print("tGoM210");
        self.mDSType = cDS_DOWN; // We're a new temp
        print("XXCHAINCONTROLCHECKHERE 15");
        //        Unsigned pres = copy.mSegsDown;
        //        Unsigned prec = copy.mTempsDown;
        //        ++copy.mTempsDown;      // Preupdate them for that
        //        Unsigned posts = copy.mSegsDown;
        //        Unsigned postc = copy.mTempsDown;

        //        if (pres != posts || postc != prec + 1u)
        //          fail("THIS CANNOT HAPPEN RIGHT?");
      }
      print("tGoM211");

      // plant new head
      ew[newsn] = copy.atomof;

      //// WE GREW OR MOVED FROM THE HEAD.
      return pickedptr; // into SN mEWSNAvailables[this]
    }
    print("tGoM212");
    return cPP_NULL; // WE DIDN'T
  }

  Bool actHeadSpecial(PocketChainState & ds) {
    EventWindow ew;
    Random random;
    
    //// SHALL WE GROW OR MOVE FROM THE HEAD?
    if (self is EmptyCodon) // EC does not have that
      return false;         // kind of initiative

    print("XXCHAINCONTROLCHECKHERE 16");

    Bool canGrow = false; //mSegsDown < cMAX_SEG;
    Bool canMove = false; //mTempsDown < cMAX_TMP;
    print("aHS10");
    print(mDSType);
    if (mDSType != cDS_DUMB && isHead() && (canGrow || canMove)) 
      return tryGrowOrMove(ds, 0xffu, canGrow, canMove) != cPP_NULL;

    print("aHS11");
    //// WE DID NOT GROW OR MOVE FROM THE HEAD.
    return false;
  }

  Bool actTailSpecial(PocketChainState & ds) {
    EventWindow ew;
    Random random;

    print("XXCHAINCONTROLCHECKHERE 17");

    //// SHALL WE MOVE FROM THE TAIL?
    Bool canTailMove = false; //mTempsUp < cMAX_TMP;
    if (mDSType != cDS_DUMB && isTail() && canTailMove) {

      SN newsn;
      Unsigned newcount;
      PocketPtr pickedptr;
      for (PocketPtr ptr = cPP_SELF; ptr <= cPP_EAST; ++ptr) {
        if (ds.mPocketUsCount[ptr] > 0u) continue; // can't go there if we are there
        if (ds.mPocketEmpty[ptr] > 0u &&           // if has an empty
            ds.mPocketFull[ptr] < 2u &&            // and not too full
            ds.mPocketInaccessible[ptr] == 0u) {   // and no hidden surprises
          if (random.oneIn(++newcount)) {          // count and maybe pick
            pickedptr = ptr;
            newsn = ds.mEWSNAvailables[pickedptr];
          }
        }
      }
      if (newcount > 0u) {
        // init new head
        Atom a = self.atomof;       // Copy as is
        Self & copy = (Self&) a;
        copy.mPocketPtrs[Segment.cBODY_UP] = reversePocket(pickedptr);
        self.mPocketPtrs[Segment.cBODY_DOWN] = pickedptr;
        
        self.mDSType = cDS_UP; // We're a new temp
        //        ++copy.mTempsUp;      // Preupdate them for that

        // plant new tail
        ew[newsn] = copy.atomof;

        //// WE GREW OR MOVED FROM THE TAIL.
        return true;
      }
    }
    //// WE DID NOTHING EXCITING.
    return false;
  }

}

quark PocketChainTQ : PocketChain {
  PocketDir mTargetQuadrant;

  //// PocketChainTQ SERVICES
  @Override
  virtual Void copySegAndPChain(PocketChain & from) {
    super.copySegAndPChain(from);
    if (from as Self) {
      mTargetQuadrant = from.mTargetQuadrant;
    } else fail(__FILE__,__LINE__);
  }
  
}

