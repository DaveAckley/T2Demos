transient PocketChainState : SegmentState {
  Bool mGrowTemp = false;
  
  //// Intention API

  @Override
  virtual Bool init(Intender & seg) {
    print("PCHNS10");
    if (super.init(seg)) { // If segmentstate can't init, we might need to die
      PocketHC3 & p = self.mPocket;

      print("PCHNS11");
      print(p.mStatus);
      if (p.mStatus == PocketHC3.cSTATUS_OPEN) {
        print("PCHNS12");
        if (p.mCoordCount < 3u) {
          PocketChain & qc = (PocketChain&) seg;
          return qc.die("PocketChain: Too open pocket");
        }
        print("PCHNS13");
      }
      print("PCHNS14");
      return true;
    }
    print("PCHNS15");
    return false;
  }

  @Override
  virtual Bool observe(Intender & in) {
    if (super.observe(in)) return true;
    print("QchObs10");

    PocketChain & qc = (PocketChain&) in;
    
    PocketHC3 & p = self.mPocket;

    if (p.mStatus != PocketHC3.cSTATUS_OK) {
      return true; // Distorted pocket
    }
    print("QchObs11");

    Segment.MateStatus ms = qc.findMates(self);
    if (ms > Segment.cMATE_UNSURE) {
      print(ms);
      return qc.die("PocketChain:>MATE_UNSURE");
    }
    print("QchObs12");
    if (ms > Segment.cMATE_OK) return qc.diffuse(self);

    print("QchObs13");
    return false;
  }

  @Override
  virtual Bool stabilize(Intender & in) {
    if (super.stabilize(in)) return true;
    print("QchStab10");

    PocketChain & qc = (PocketChain &) in;
    if (qc.updateGradients(self)) return true;

    print("QchStab11");
    return false;
  }

  @Override
  virtual Bool act(Intender & in) {
    print("QchAct10");
    if (super.act(in)) return true;

    print("QchAct11");
    PocketChain & qc = (PocketChain &) in;
    if (qc.actMovingSeg(self)) return true;
    print("QchAct12");
    if (qc.actHeadSpecial(self)) return true;
    print("QchAct13");
    if (qc.actTailSpecial(self)) return true;
    print("QchAct14");
    return false;
  }
}

quark PocketChain : Segment {
  typedef Unsigned(4) SegCount;
  constant SegCount cMAX_SEG = 12u;
  constant SegCount cMAX_TMP = 2u;
  SegCount mSegsDown;
  SegCount mTempsDown;
  SegCount mSegsUp;
  SegCount mTempsUp;
  
  typedef Unsigned(2) DemoSegType;
  constant DemoSegType cDS_DUMB = 0u; //< Unswappable, No auto move or grow
  constant DemoSegType cDS_NORM = 1u; //< Swappable, auto move and grow
  constant DemoSegType cDS_DOWN = 2u; //< Downbound Temp
  constant DemoSegType cDS_UP =   3u; //< Upbound Temp

  DemoSegType mDSType = cDS_DUMB;

  //// UrSelf API
  @Override
  ARGB getColor(Unsigned selector) {
    ColorUtils cu;
    if (mDSType == cDS_DUMB) return cu.color(0xffcccccc);
    if (mDSType == cDS_UP)   return cu.color(0xff00cccc);
    if (mDSType == cDS_DOWN) return cu.color(0xffcccc00);
    // cDS_NORM
    ARGB head = cu.color(0xff0000cc);
    ARGB tail = cu.color(0xff00cc00);
    return cu.between(tail, head, 100u*mSegsDown/cMAX_SEG);
  }

  @Override
  virtual Void renderGraphics() {
    renderLinks(300u);
  }

  Void renderLinks(Unsigned width) {
    Drawable drawable;
    if (!drawable.canDraw()) return;
    SN side;

    side = mPocketPtrs[cBODY_DOWN];
    if (side >= 1u && side <= 4u) 
      drawPocketArrow_(side,width,true);

    side = mPocketPtrs[cBODY_UP];
    if (side >= 1u && side <= 4u) 
      drawPocketArrow_(side,width,false);
  }

  //// Pocketable API
  @Override
  virtual Bool inMyGroup(Pocketable & other) {
    return other is Self; // We'll dance with any other PocketChain!
  }

  //// Intender API
  @Override
  virtual ClassId getIntentionClass() { //< default unless overridden
    PocketChainState qcs; // Ensure concrete
    return qcs.classidof;
  }

  //// PocketChain API
  /** Can this segment be swapped by moving segments? Default says
      true.
   */
  virtual Bool isSwappable(PocketChainState & ds) { return true; }

  /** Courtesy notification that this segment is about to get
      swapped. */
  virtual Void preswapActions(PocketChainState & ds) { /* default no action */ }

  Bool drawPocketArrow_(SN towardSide, Unsigned width, Bool long) {
    Drawable drawable;
    if (!drawable.canDraw()) return false;
    MDist md; // No ew when rendering!  Can't use ew.getCoordRaw()!
    
    C2D sc = md.getSiteCoord(towardSide);
    C2D start = sc*(3*Drawable.cUNITS_PER_SITE/8); // Try to avoid atom label
    C2D end;
    if (long) end = sc*(3*Drawable.cUNITS_PER_SITE/2);
    else end = sc*(7*Drawable.cUNITS_PER_SITE/8);
    ARGB oncol = getColor(0xff000000u);
    drawable.drawMaskedLine(start, end, oncol, oncol, (Bits) 0xffffffff, width);
    return true;
  }

  /*
  virtual Bool chainOp(PocketChainState & ds) {
    return false;
  }
  */

  Void doSwap(PocketChainState & ds, SN destsn) {
    preswapActions(ds);          // Run hook
    EventWindow ew;
    ew.swap(0u,destsn);
  }

  Bool diffuse(PocketChainState & ds) {
    EventWindow ew;
    Random random;
    DebugUtils du;
    PocketHC3 & p = ds.mPocket;
    RectIterator ri;
    if (!p.initIterator(ri)) {
      return true; // Bad pocket
    }
    Unsigned empcount = 0u;
    SN empsn;
    while (ri.hasNext()) {
      C2D n = ri.next();
      if (!ew.isAccessible(n)) continue;
      if (ew[n] is Empty && random.oneIn(++empcount))
        empsn = ew.getSiteNumber(n);
    }
    if (empcount > 0u) {
      doSwap(ds,empsn);
    }
    return true;
  }

  Bool die() {
    DebugUtils du;
    du.print("PocketChain.die");
    EventWindow ew;
    ew[0] = Empty.instanceof;
    return true;
  }

  Bool die(String msg) {
    DebugUtils du;
    du.print("DYING");
    du.print(msg);
    du.print(self);
    return die();
  }

  Bool updateGradients(PocketChainState & ds) {
    EventWindow ew;

    Bool iAmFixed = !isSwappable(ds);
    
    // Check downs if any
    if (mPocketPtrs[cBODY_DOWN] == cPP_NULL || iAmFixed) {
      mSegsDown = 0u; // Tail has nobody down
      mTempsDown = (mDSType == cDS_DOWN) ? 1u : 0u;
    } else {
      SN down = ds.mEWSNMate[Segment.cBODY_DOWN];
      Atom & a = ew[down];
      if (a as Self) {
        if (mDSType == cDS_DOWN) {
          mSegsDown = a.mSegsDown;
          mTempsDown = (SegCount) (a.mTempsDown + 1u);
        } else {
          mSegsDown = (SegCount) (a.mSegsDown + 1u);
          mTempsDown = a.mTempsDown;
        }
      } else die("updateGradients: Down not Self");
    }
    
    // Check ups if any
    if (mPocketPtrs[cBODY_UP] == cPP_NULL || iAmFixed ) {
      mSegsUp = 0u; // Head has nobody up
      mTempsUp = (mDSType == cDS_UP) ? 1u : 0u;
    } else {
      SN up = ds.mEWSNMate[Segment.cBODY_UP];
      Atom & a = ew[up];
      if (a as Self) {
        if (mDSType == cDS_UP) {
          mSegsUp = a.mSegsUp;
          mTempsUp = (SegCount) (a.mTempsUp + 1u);
        } else {
          mSegsUp = (SegCount) (a.mSegsUp + 1u);
          mTempsUp = a.mTempsUp;
        }
      } else die("updateGradients: Up not Self");
    }
    return false;
  }

  Bool actMovingSeg(PocketChainState & ds) {
    EventWindow ew;
    //// ARE WE A MOVING SEG?
    if (mDSType == cDS_UP || mDSType == cDS_DOWN) {
      BodyDir movedir =
        (mDSType == cDS_UP) ? Segment.cBODY_UP : Segment.cBODY_DOWN;
      BodyDir backdir = (BodyDir) (1u - movedir);

      /// HAVE WE REACHED THE END OF OUR MOVE?
      if (mPocketPtrs[movedir] == cPP_NULL) {
        /// WE HAVE REACHED THE END OF OUR MOVE.

        /// ARE WE DETACHED FROM THE CHAIN?
        if (mPocketPtrs[backdir] != cPP_NULL) {
          /// WE ARE NOT DETACHED FROM THE CHAIN.

          SN backsn = ds.mEWSNMate[backdir];

          /// CAN WE ACCESS OUR BACK BEIN?
          if (backsn == 0u) 
            return diffuse(ds); // No, go jiggle maybe
          /// WE CAN ACCESS OUR BACK BEIN.

          Atom & a = ew[backsn];
          if (a as Self) {
            a.mPocketPtrs[movedir] = cPP_NULL;
            // XXX PRE-FIXUP mTempDown IF DOWN?
          } else {
            Fail f; f.fail("DETACHING SEG BACK MISSING");
          }
        }
        /// WE ARE DETACHED FROM THE CHAIN.

        ew[0u] = Empty.instanceof;
        /// WE ARE GONE.
        return true;
      }
      /// WE HAVE NOT REACHED THE END OF OUR MOVE.

      /// CAN WE ADVANCE IN OUR MOVING DIRECTION?
      SN movesn = ds.mEWSNMate[movedir];
      if (movesn == 0u)
        return diffuse(ds); // No go jiggly puff

      /// WE CAN ACCESS OUR NEXT BEIN.
      Atom & a = ew[movesn];
      if (a as Self) {
        if (a.isSwappable(ds)) {
          PocketPtrs temp = a.mPocketPtrs; // Exchange ptrs
          a.mPocketPtrs = mPocketPtrs;
          mPocketPtrs = temp;
          doSwap(ds,movesn);     // Then swap wholesale
          /// WE ADVANCED IN OUR MOVING DIRECTION
          return true;
        }
        // ELSE FALL THROUGH
      } else {
        Fail f; f.fail("MOVING SEG NEXT MISSING");
      }
    }
    return false;
  }

  Bool actHeadSpecial(PocketChainState & ds) {
    EventWindow ew;
    Random random;
    
    findAvailables(ds); 

    //// SHALL WE GROW OR MOVE FROM THE HEAD?
    Bool canGrow = mSegsDown < cMAX_SEG;
    Bool canMove = mTempsDown < cMAX_TMP;
    if (mDSType != cDS_DUMB && isHead() && (canGrow || canMove)) {

      SN newsn;
      Unsigned newcount;
      PocketPtr pickedptr;
      for (PocketPtr ptr = cPP_SELF; ptr <= cPP_EAST; ++ptr) {
        if (ds.mPocketUsCount[ptr] > 0u) continue; // can't go there if we are there
        if (ds.mPocketEmpty[ptr] > 0u &&           // if has an empty
            ds.mPocketFull[ptr] < 2u &&            // and not too full
            ds.mPocketInaccessible[ptr] == 0u) {   // and no hidden surprises
          if (random.oneIn(++newcount)) {          // count and maybe pick
            pickedptr = ptr;
            newsn = ds.mEWSNAvailables[pickedptr];
          }
        }
      }
      if (newcount > 0u) {
        // init new head
        Atom a = self.atomof;       // Copy as is
        Self & copy = (Self&) a;
        copy.mPocketPtrs[Segment.cBODY_DOWN] = reversePocket(pickedptr);
        self.mPocketPtrs[Segment.cBODY_UP] = pickedptr;
        
        if (canGrow) {
          ++copy.mSegsDown;       // Preupdate for us as a new segment
        } else /* canMove */ {
          self.mDSType = cDS_DOWN; // We're a new temp
          Unsigned pres = copy.mSegsDown;
          Unsigned prec = copy.mTempsDown;
          ++copy.mTempsDown;      // Preupdate them for that
          Unsigned posts = copy.mSegsDown;
          Unsigned postc = copy.mTempsDown;

          if (pres != posts || postc != prec + 1u) {
            Fail f; f.fail("THIS CANNOT HAPPEN RIGHT?");
          }
        }

        // plant new head
        ew[newsn] = copy.atomof;

        //// WE GREW OR MOVED FROM THE HEAD.
        return true;
      }
    }
    //// WE DID NOT GROW OR MOVE FROM THE HEAD.
    return false;
  }

  Bool actTailSpecial(PocketChainState & ds) {
    EventWindow ew;
    Random random;

        //// SHALL WE MOVE FROM THE TAIL?
    Bool canTailMove = mTempsUp < cMAX_TMP;
    if (mDSType != cDS_DUMB && isTail() && canTailMove) {

      SN newsn;
      Unsigned newcount;
      PocketPtr pickedptr;
      for (PocketPtr ptr = cPP_SELF; ptr <= cPP_EAST; ++ptr) {
        if (ds.mPocketUsCount[ptr] > 0u) continue; // can't go there if we are there
        if (ds.mPocketEmpty[ptr] > 0u &&           // if has an empty
            ds.mPocketFull[ptr] < 2u &&            // and not too full
            ds.mPocketInaccessible[ptr] == 0u) {   // and no hidden surprises
          if (random.oneIn(++newcount)) {          // count and maybe pick
            pickedptr = ptr;
            newsn = ds.mEWSNAvailables[pickedptr];
          }
        }
      }
      if (newcount > 0u) {
        // init new head
        Atom a = self.atomof;       // Copy as is
        Self & copy = (Self&) a;
        copy.mPocketPtrs[Segment.cBODY_UP] = reversePocket(pickedptr);
        self.mPocketPtrs[Segment.cBODY_DOWN] = pickedptr;
        
        self.mDSType = cDS_UP; // We're a new temp
        ++copy.mTempsUp;      // Preupdate them for that

        // plant new tail
        ew[newsn] = copy.atomof;

        //// WE GREW OR MOVED FROM THE TAIL.
        return true;
      }
    }
    //// WE DID NOTHING EXCITING.
    return false;
  }

}

