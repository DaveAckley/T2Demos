quark Flood : Plate {
  //// Flood API
  virtual C2D getRoot() ; //< Closeness to this plate coord defines 'upstream'
  virtual Bool fire() ;   //< return \c true if fire() action completed
  virtual Bool consider(Flood & ngb, Bool isUpstream) ; //< return \c true to consider
  
  //// Flood SERVICES
  Bool floodReady() { return mCommandState == cSTATE_READY; }
  Bool floodTrigger() {
    if (!floodReady()) return false;
    mCommandState = cSTATE_FIRING;
    return true;
  }
  // Bool floodUpdate() 

  typedef Unary(3) CommandState;
  constant CommandState cSTATE_READY     = 0u; //< Ready to fire command
  constant CommandState cSTATE_FIRING    = 1u; //< Command firing, adv to fired
  constant CommandState cSTATE_FIRED     = 2u; //< Command fired, pass it down
  constant CommandState cSTATE_RECOVERED = 3u; //< All fired, pass it up
  CommandState mCommandState;

  CommandState getCommandState() { return mCommandState; }
  Void setCommandState(CommandState newcs) { mCommandState = newcs; }

  ARGB getFloodColor() {
    ColorUtils cu;
    ARGB ret = cu.color(0xffffffff);

    which (mCommandState) {
      case cSTATE_READY:    { ret = cu.color(0x333333); } // near invisible
      case cSTATE_FIRING:   { ret = cu.color(0xaaaa33); }
      case cSTATE_FIRED:    { ret = cu.color(0xaa3333); }
      case cSTATE_RECOVERED:{ ret = cu.color(0x3333aa); }
    }
    return ret;
  }

  Bool doFire() {

    DebugUtils du;
    if (mCommandState != cSTATE_READY) {
      du.print("SGGFRFAL");
      du.print(mCommandState);
      return false;
    }
    mCommandState = cSTATE_FIRING;
    return true;
  }


  // Return true if action
  Bool floodUpdate() {
    if (mCommandState == cSTATE_FIRING && fire()) {
      mCommandState = cSTATE_FIRED;
      return true;
    }

    DebugUtils du;
    EventWindow ew;
    MDist md;
    PlateUtils pu;
    C2D headwaters = getRoot();
    SN ssn = ew.getSiteNumber(self);
    if (ssn == ssn.maxof) { Fail f; f.fail("NOT IN EW ISANT"); return false; }
    C2D selfc = ew.getCoord(ssn);     // Where self is in ew
    C2D pos = positionOnPlate();
    C2D siz = sizeOfPlate();
    Unsigned mydistance = pos.manhattanDistance(headwaters);
    Unsigned upcount = 0u;
    Unsigned upfired = 0u;
    Unsigned uprecovered = 0u;
    Unsigned downcount = 0u;
    Unsigned downrecovered = 0u;
    Unsigned downready = 0u;
    for (MDist.Index i = 1u; i <= 4u; ++i) {
      C2D pcoffset = md.getSiteCoord(i); // PLATE COORD offset
      C2D pc = pos + pcoffset;
      if (!siz.contains(pc)) continue;
      SN ewsn = self.plateCoordToEWSN(pc);
      if (!ew.isAccessible(ewsn)) continue;
      Atom & a = ew[ewsn];
      if (a as Self) {
        C2D ewc = md.getSiteCoord(ewsn);
        PlateUtils.PlateRelation rel = pu.relationTo(self, selfc, a, ewc);
        if (rel != pu.cSAME_PLATE_AS) continue;
        Unsigned adistance = pc.manhattanDistance(headwaters);
        if (adistance < mydistance) {
          if (!consider(a,true)) continue;
          ++upcount;
          if (a.mCommandState == cSTATE_FIRED) ++upfired;
          if (a.mCommandState == cSTATE_RECOVERED) ++uprecovered;
        } else if (adistance > mydistance) {
          if (!consider(a,false)) continue;
          ++downcount;
          if (a.mCommandState == cSTATE_RECOVERED) ++downrecovered;
          if (a.mCommandState == cSTATE_READY) ++downready;
        }
      }
    }
    //    du.print("SGCFC 12");
    //    du.print(upcount);
    //    du.print(upfired);
    //    du.print(downcount);
    //    du.print(downrecovered);
    //    du.print(downready);
    //// RULES
    Bool ret = true;
    if (mCommandState == cSTATE_READY &&
        upcount > 0u &&
        upcount == upfired) 
      mCommandState = cSTATE_FIRING;
    else if (mCommandState == cSTATE_FIRED && downcount == downrecovered)
      mCommandState = cSTATE_RECOVERED;
    else if (mCommandState == cSTATE_RECOVERED && upcount == uprecovered && downcount == downready)
      mCommandState = cSTATE_READY;
    else ret = false;
    return ret;
  }
}
