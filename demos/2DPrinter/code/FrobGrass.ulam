local typedef EventWindow.SiteNum SiteNum;
local typedef QID(0xFEEDF00Du, 5, 4, 15) MyQID;

/** 'Intelligent' Grass inspired by FrobWorld growth dynamics.
  \symbol Gf
  \color #3c3
  \radius 2
*/
element FrobGrass : Content + MyQID {
  typedef Unsigned(3) Distance;
  Distance mRootDistance;
  Bool mDead;

  Bool die() { mDead = true; return true; }
  Bool isDead() { return mDead; }

  @Override
  ARGB getColor(Unsigned selector) {
    ColorUtils cu;
    ARGB c1 = cu.color(80,255,80);
    ARGB c2 = cu.color(80,80,255);
    return cu.between(c1, c2, 100u-mRootDistance*10u);
  }

  Void behave() {
    self.Content.behave();
    self.MyQID.behave();
    if (self.MyQID.isDead()) return;
    if (update()) return;
  }

  Bool update() {
    if (super.update()) return true;

    // Scan neighborhood
    FrobGrassState state;
    state.init(self);
    state.scan();

    // Stay quiet in repro
    if (state.isRepro()) {
      progress();
      return true;
    }

    // Update non-root distances
    if (mRootDistance != 0) {
      mRootDistance = (Distance) (state.minDistance()+1u);
      progress(); 
    } else {
      // Root considers kids
      if (boredom() >= 10u) {
        SiteNum sn = state.chosenEmpty();
        if (sn != sn.maxof) {  // Have spot?
          typedef RotateSPOT.WindowRotation Rot;
          Random r;
          Rot rot = (Rot) r.between(Rot.minof, Rot.maxof);
          which (rot) {
            case 0u: { ew[sn] = NorthPlateGen.instanceof; }
            case 1u: { ew[sn] = EastPlateGen.instanceof; }
            case 2u: { ew[sn] = SouthPlateGen.instanceof; }
            case 3u: { ew[sn] = WestPlateGen.instanceof; }
          }
          progress(); // We tried
        }
      }
    }
    
    // Die if overextended
    if (mRootDistance == Distance.maxof) {
      ew[0] = Empty.instanceof;
      return die();
    }

    // Perhaps grow
    if (mRootDistance + 1u < Distance.maxof) {
      SiteNum growSite = state.growIntoEmpty();
      if (growSite != SiteNum.maxof) {
        Self s = self;
        s.mRootDistance++;
        ew[growSite] = s;
        return true;
      }
    }
    return false;
  }
}


transient FrobGrassState : SiteVisitor {
  FrobGrass mCenterGrass;
  typedef FrobGrass.Distance Distance;
  WindowScanner mWS;
  WindowScanner.Category mReproCat;
  WindowScanner.Category mEmptyCat;
  WindowScanner.Category mGrassCat;
  WindowScanner.Category mRootDCat;

  Distance minDistance() {
    if (mWS.getHits(mRootDCat) == 0u) return Distance.maxof;
    Distance min = (Distance) (Distance.maxof - mWS.getMax(mRootDCat));
    return (min); 
  }

  Bool isRepro() { return mWS.getHits(mReproCat) > 0u; }

  SiteNum chosenEmpty() { return mWS.getSiteNum(mEmptyCat); }

  SiteNum growIntoEmpty() {
    Unsigned empties = mWS.getHits(mEmptyCat);
    Unsigned repros  = mWS.getHits(mReproCat);
    Unsigned grasses = mWS.getHits(mGrassCat);
    if (repros == 0u && empties > 0u && grasses < 2u)
      return mWS.getSiteNum(mEmptyCat);
    return SiteNum.maxof;
  }

  Void init(FrobGrass theCenter) {
    mCenterGrass = theCenter;
    mWS.resetCategories();
    mReproCat = mWS.allocateCategory();
    mEmptyCat = mWS.allocateCategory();
    mGrassCat = mWS.allocateCategory();
    mRootDCat = mWS.allocateMaxCategory(); // Actually min
  }

  Void scan() {
    mWS.scan(self);
  }

  // SiteVisitor API
  @Override
  virtual Void visit(WindowScanner& ws, Atom & a, SiteNum sn) {
    if (sn <= 4u) { // Only check out to radius one for grass business
      if (a is Empty) ws.categorize(sn, mEmptyCat);
      else if (a as FrobGrass) {
        ws.categorize(sn, mGrassCat);
        if (a.getMyTag() == mCenterGrass.getMyTag())
          ws.categorize(sn, mRootDCat, FrobGrass.Distance.maxof - a.mRootDistance);
      }
    }
  }

}
