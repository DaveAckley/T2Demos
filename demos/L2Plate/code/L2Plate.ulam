use B2DStreamPlate;
use Stride2x2;

quark L2PlateBase : B2DStreamPlate6 + QStream12 + Payload + Stride1x1FP {

  // L2PlateBase API
  virtual C2D sizeOfL2Plate() ;
  virtual C2D positionOnL2Plate() ;
}

quark RingOL2Plate : L2PlateBase + RingOPlateBase {
  //// RingO API
  @Override
  virtual Bool inCircuit(RingOCircuit & roc) {
    return
      roc is L1PlateRingOCircuit ||
      roc is L2PlateRingOCircuit;
  }
  @Override
  virtual RingOState & ringOState(RingOCircuit & roc) {
    if (roc is L1PlateRingOCircuit) return mL1RingOState;
    if (roc is L2PlateRingOCircuit) return mL2RingOState;
    Fail f;
    f.fail();
    return mL1RingOState; // NOT REACHED
  }


  ARGB getRingOColor(Unsigned selector) {
    if (selector == 0u) return super.getColor(selector);
    ARGB l1col = mL1RingOState.color();
    ARGB l2col = mL2RingOState.color();
    ColorUtils cu;
    return cu.between(cu.dimmer(l2col),l1col,75);
  }

  RingOState mL1RingOState;
  RingOState mL2RingOState;

  //// RingOL2Plate SERVICES
  Bool updateRingOPlate() {

    L2PlateRingOCircuit ckt2;
    if (updateRingOCircuit(ckt2)) return true;

    L1PlateRingOCircuit ckt1;
    if (updateRingOCircuit(ckt1)) return true;

    return false;
  }
}

/**
   \symbol L2
   \color #2233bb
 */
element L2Plate : RingOL2Plate + PayloadT(14u) + Plexer {
  typedef EventWindow.SiteNum SN;
  typedef PlateUtils.PlateDir PD;
  typedef ClassUtils.ClassId ClassId; 
  
  typedef L2SeqPlex MyPlex;

  //// UrSelf API
  @Override
  ARGB getColor(Unsigned selector) {
    return getRingOColor(selector);
  }

  //// L2PlateBase API
  @Override
  C2D sizeOfL2Plate() { return mL2Info.sizeOfPlate(); }

  @Override
  C2D positionOnL2Plate() { return mL2Info.positionOnPlate(); }

  //// Plexer API
  @Override
  virtual ClassId getPlex() { return MyPlex.classidof; }

  //// L2Plate services
  @Override
  virtual Bool fatalInconsistency() {
    if (super.fatalInconsistency()) return true;

    // L2 internal consistency check.
    if (!sizeOfL2Plate().contains(positionOnL2Plate()))
      return true;

    // L2 neighbor consistency check    
    EventWindow ew;
    PlateUtils pu;
    MDist md;

    SN selfsn = getOurSN();
    C2D offsetl = md.getSiteCoord(selfsn);

    DebugUtils du;
    Int ourpriority = self.priority();

    for (SN sn = 1u; sn <= 8u; ++sn) {       // Let's say Moore ngb
      if (!ew.isAccessible(sn)) continue;
      Atom & a = ew[sn];
      if (a as Plate) { // THIS USED TO BE 'if (a as Self)' AND IT COMPILED
        
        MDist md;
        C2D offsetr = md.getSiteCoord(sn);
        PlateUtils.PlateRelation rel = pu.relationTo(self, offsetl, a, offsetr);

        //        du.print("FTIL2 CNSDR");
        //        du.print(offsetr);

        if (rel == pu.cSAME_PLATE_AS) {

          if (a.priority() > ourpriority) { // outranked on same plate: not
            //            du.print("FTIL2 SAME false");
            //            du.print(sn);
            return false;                   // fatal, but we have to stop checking?
          }

          if (a as Self) {

            // Check for identical L2 info between L2s on same L1 plate
            if (sizeOfL2Plate() != a.sizeOfL2Plate() ||
                positionOnL2Plate() != a.positionOnL2Plate()) {
              du.print("L2Plate fatal ngb inconsistency");
              a.setDeathBits(cDIE_AND_DOWN); // You die too
              return true;               // But yeah, that's fatal to us 
            }
          } // else.. what about non-L2Plate on same plate?
        } else if (rel == pu.cCONTAINS_PLATE) {

          // Check for room for complete L2 border around L1 plate
          if (!pu.strictlyContains(self,a,offsetr-offsetl)) {
            du.print("L2Plate incomplete border size inconsistency");
            a.setDeathBits(cDIE_AND_DOWN); // You die too
            return true;          
          }
        } else if (rel == pu.cCONTAINED_BY_PLATE) {

          if (a.priority() > ourpriority) { // outranked by containing plate: not
            //            du.print("FTIL2 CONTBY false");
            //            du.print(sn);
            return false;                   // fatal, but we have to stop checking?
          }

        } else if (rel == pu.cOVERLAPS_PLATE) {

          if (a.priority() > ourpriority) { // outranked while overlapping plate: not
            //            du.print("FTIL2 OVER false");
            //            du.print(sn);
            return false;                   // fatal, but we have to stop checking?
          }

          du.print("L2Plate overlap");
          a.setDeathBits(cDIE_AND_DOWN); // You die too
          return true;        
        } else if (rel == pu.cCONTAINED_BY_PLATE) {
          if (a.priority() > ourpriority) { // outranked by containing plate: not
            //            du.print("FTIL2 CONTBY false");
            //            du.print(sn);
            return false;                   // fatal, but we have to stop checking?
          }
        } else {
          du.print("FTIL2 ????");
          du.print(sn);
          du.print(rel);
        }
      }
    }
    return false;
  }

  B2DPlate4 mL2Info;
  Bool setSizeOfL2Plate(C2D siz) { return mL2Info.setSizeOfPlate(siz); }
  Bool setPositionOnL2Plate(C2D pos) { return mL2Info.setPositionOnPlate(pos); }

  Bool die() { return die("DYIIEE"); }

  Bool die(String msg) {
    DebugUtils du;
    du.print(msg);
    EventWindow ew;
    ew[0] = Empty.instanceof;
    return true;
  }
  
  Bool onceOnlyInit() {
    EventWindow ew;
    PlateUtils pu;
    if (sizeOfPlate() != pu.c0x0) return false;
    C2D ourmaxsiz(MyB2D.cMAXVAL,MyB2D.cMAXVAL);
    // Search for adjacent L1 plate to imprint on
    for (SN sn = 1u; sn <= 4u; ++sn) {
      if (!ew.isAccessible(sn)) return die("L@PL INAC");
      Atom & a = ew[sn];
      if (a as Plate) {
        if (a is L2PlateBase) continue; // Skip L2 Plate
        if (!a.isPlateBorder()) return die("L@PL NBDR"); // eew guts
        C2D l1siz = a.sizeOfPlate();
        if (l1siz.minc() < 3) return die("L@PL SMOL");
        C2D l1pos = a.positionOnPlate();
        if (!ourmaxsiz.contains(l1siz+pu.c1x1)) return die("L@PL 1SIZ");
        C2D oursiz = l1siz + pu.c2x2; // Room for our border
        C2D ourpos = l1pos;
        which (sn) {
          case 1: { ourpos += pu.c2x1; } // W of us
          case 2: { ourpos += pu.c1x2; } // N of us
          case 3: { ourpos += pu.c1x0; } // S of us
          case 4: { ourpos += pu.c0x1; } // E of us
        }
        DebugUtils du;
        du.printContext();
        du.print(sn);
        du.print(oursiz);
        du.print(ourpos);
        du.print("AFT");
        du.print(ourpos);
        self.setSizeOfPlate(oursiz);
        self.setPositionOnPlate(ourpos);
        return true;
      }
    }
    return false;
  }

  Bool checkFaces() {
    DebugUtils du;
    MyPlex plex;
    if (!plex.open(true)) return false;

    //    du.print("MVCNTL 3101");
    //    du.print(plex.mCenterPC);

    Bool didInit;
    L2PlateSequencer & l2seq = (L2PlateSequencer&) plex.get(didInit);

    //    du.print("MVCNTL 3102");
    //    du.print(plex.mCenterPC);


    if (didInit)
      l2seq.mSidePD = plex.mPD;

    //    du.print("MVCNTL 3103");
    //    du.print(plex.mCenterPC);

    if (l2seq.update(plex)) {
      //      du.print("MVCNTL 3103a");
      //      du.print(plex.mCenterPC);

      Bool closed =  plex.close();

      //      du.print("MVCNTL 3104");
      //      du.print(plex.mCenterPC);

      if (!closed)
        du.print("NOCLOTHESRADIO");
      return closed;
    }
    return true;
  }

  Bool checkLocalActions() {
    if (checkFaces()) return true;
    return false;
  }

  Void behave() {
    if (onceOnlyInit()) return;
    if (mustBlockOrDie()) return;
    if (checkGrowthAndHealing()) return;
    if (updateRingOPlate()) return;
    if (checkLocalActions()) return;
  }
}

transient L2PlateRingOIterator : RingOIterator {
  typedef EventWindow.SiteNum SN;
  constant Unsigned cCOUNT_MAX = 39u;
  C2D mL1Pos;
  C2D mL1Siz;
  C2D mL2Pos;
  C2D mL2Siz;
  Unsigned mCount; // 0..39 SN 1..40
  SN mNextSN; // 1..40

  SN snFromCount(Unsigned count) {
    if (count <= cCOUNT_MAX)  return (SN) (count + 1u);
    return SN.maxof;
  }

  //// RingOIterator API
  @Override
  virtual Void init(RingO & on) {
    PlateUtils pu;
    L2Plate & l2 = (L2Plate&) on; // or fail
    mCount = 0u;
    mL1Pos = l2.positionOnPlate();
    mL1Siz = l2.sizeOfPlate();
    mL2Pos = l2.positionOnL2Plate();
    mL2Siz = l2.sizeOfL2Plate();
  }

  @Override
  virtual Bool hasNext() { // For L2Plate as a whole
    EventWindow ew;
    for (; mCount <= cCOUNT_MAX; ++mCount) {
      mNextSN = snFromCount(mCount);
      if (!ew.isAccessible(mNextSN)) continue;
      Atom & a = ew[mNextSN];
      if (a as RingOL2Plate) {
        C2D pos2r = a.positionOnL2Plate();
        if (mL2Pos != pos2r) return true;  // If different L2 site, okay
        if (mNextSN <= 8u) return true;    // If same L2 site and in Moore ngb, okay
      }
    }
    return false;
  }
  
  @Override
  virtual RingO & next() {
    if (!hasNext()) { Fail f; f.fail(); }
    EventWindow ew;
    SN sn = snFromCount(mCount++);
    RingO & ret = (RingO&) ew[sn]; // Or fail if something changed under us
    return ret;
  }

}

transient L1PlateRingOCircuit : RingOCircuit {
  L1PlateRingOIterator mItr1;

  //// RingOCircuit API
  @Override
  virtual RingOIterator & ringOIterator() {
    return mItr1;
  }

  @Override
  virtual SyncRelation syncRelation(RingO & me, RingO & other) {
    SyncRelation rel = RingOCircuit.cOTHER_IS_UNRELATED;
    ByteStreamLogger bsl;
    if (me as L2Plate) {
      if (other as L2Plate) {
        C2D posl = me.positionOnL2Plate();
        C2D posr = other.positionOnL2Plate();
        if (posl != posr) { // If different L2 sites, unrelated
          return rel;
        }
        posl = me.positionOnPlate();    // otherwise use L1 coords
        posr = other.positionOnPlate(); // to determine syncrel

        if (posl.min(posr) == posr)
          rel = RingOCircuit.cOTHER_IS_UPSTREAM;
        else if (posl.max(posr) == posr)
          rel = RingOCircuit.cOTHER_IS_DOWNSTREAM;
        EventWindow ew;
          /*
            bsl.printf("L2REL snl(%d) posl(%d,%d) snr(%d) posr(%d,%d) rel(%d)\n",
            ew.getSiteNumber(me),
            posl.x, posl.y,
            ew.getSiteNumber(other),
            posr.x, posr.y,
            rel);
          */
      }
    }
    return rel;
  }
}

transient L2PlateRingOCircuit : RingOCircuit {
  L2PlateRingOIterator mItr2;
  //// RingOCircuit API
  @Override
  virtual RingOIterator & ringOIterator() {
    return mItr2;
  }

  @Override
  virtual SyncRelation syncRelation(RingO & me, RingO & other) {
    SyncRelation rel = RingOCircuit.cOTHER_IS_UNRELATED;
    ByteStreamLogger bsl;
    if (me as L2Plate) {
      if (other as L2Plate) {
        C2D posl = me.positionOnL2Plate();
        C2D posr = other.positionOnL2Plate();
        if (posl == posr) { // If in same L2 site,
          posl = me.positionOnPlate();         // use L1 coords
          posr = other.positionOnPlate();   // to determine syncrel
        }
        if (posl.min(posr) == posr)
          rel = RingOCircuit.cOTHER_IS_UPSTREAM;
        else if (posl.max(posr) == posr)
          rel = RingOCircuit.cOTHER_IS_DOWNSTREAM;
        EventWindow ew;
      /*
      bsl.printf("L2REL snl(%d) posl(%d,%d) snr(%d) posr(%d,%d) rel(%d)\n",
                 ew.getSiteNumber(me),
                 posl.x, posl.y,
                 ew.getSiteNumber(other),
                 posr.x, posr.y,
                 rel);
      */
      } 
    }
    return rel;
  }

}

transient L1PlateRingOIterator : RingOIterator {
  typedef EventWindow.SiteNum SN;
  constant Unsigned cCOUNT_MAX = 7u;
  C2D mL2Pos;
  Unsigned mCount; // 0..7 SN 1..8
  SN mNextSN; // 1..8

  SN snFromCount(Unsigned count) {
    if (count <= cCOUNT_MAX)  return (SN) (count + 1u);
    return SN.maxof;
  }

  //// RingOIterator API
  @Override
  virtual Void init(RingO & on) {
    L2Plate & l2 = (L2Plate&) on; // or fail
    mCount = 0u;
    mL2Pos = l2.positionOnL2Plate();
  }

  @Override
  virtual Bool hasNext() { // For 'L1Plate' view of L2 site
    EventWindow ew;
    for (; mCount <= cCOUNT_MAX; ++mCount) {
      mNextSN = snFromCount(mCount);
      if (!ew.isAccessible(mNextSN)) continue;
      Atom & a = ew[mNextSN];
      if (a as RingOL2Plate) {
        C2D pos2r = a.positionOnL2Plate();
        if (mL2Pos == pos2r) return true;  // If same L2 site, one of us
      }
    }
    return false;
  }
  
  @Override
  virtual RingO & next() {
    if (!hasNext()) { Fail f; f.fail(); }
    EventWindow ew;
    SN sn = snFromCount(mCount++);
    RingO & ret = (RingO&) ew[sn]; // Or fail if something changed under us
    return ret;
  }

}

/** Make a 5x3 L2Plate
    \color #6c3
    \symbol S5
 */
element SeedL2Plate5x3 : Plate1 {
  Void behave() {
    PlateUtils pu;
    EventWindow ew;
    L2Plate pe;
    pe.setPositionOnL2Plate(pu.c1x1);
    pe.setSizeOfL2Plate(C2D.instanceof(5,3));
    ew[0] = pe.atomof;
  }
}

/** Make a 3x3 L2Plate
    \symbol S3
 */
element SeedL2Plate3x3 : Plate1 {
  Void behave() {
    PlateUtils pu;
    EventWindow ew;
    L2Plate pe;
    pe.setPositionOnL2Plate(pu.c1x1);
    pe.setSizeOfL2Plate(pu.c3x3);
    ew[0] = pe.atomof;
  }
}

/** Make a 1x1 L2Plate
    \symbol S1
 */
element SeedL2Plate1x1 : Plate1 {
  Void behave() {
    PlateUtils pu;
    EventWindow ew;
    L2Plate pe;
    pe.setPositionOnL2Plate(pu.c0x0);
    pe.setSizeOfL2Plate(pu.c1x1);
    ew[0] = pe.atomof;
  }
}
