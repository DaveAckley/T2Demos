
/** Diamond matrix API for signaling non-self detections
 */
quark DEWLine + DTU {
  typedef EventWindow.SiteNum SN;

  typedef DefCon DefCons[AxialDir.maxof + 1u]; // 0:W 1:N 2:S 3:E

  DefCons mDefCons;

  //// UrSelf API
  @Override
  virtual Void renderGraphics() {
    ARGB bcol = getColor(2u);
    renderDCs(mDefCons,C2D.instanceof(0,0),bcol);
  }

  //// DEWLine API
  virtual DefCon signalDC() ; //< level that we signal at
  virtual Unsigned sourceRank() {  //< our source ranking (higher flows to lower)
    ClassUtils cu;
    return getSourceRank(cu.getClassId(self)); // by default: see getSourceRank()
  }

  //// DEWLine SERVICES

  DefCon edgeHops2DefCon(DirOff off) {
    Unsigned ehops = (Unsigned) off.maxc();
    if (ehops <= 1u) return cDC_HERE;
    if (ehops <= 3u) return cDC_NEAR;
    if (ehops <= 6u) return cDC_DIST;
    return cDC_OPEN;
  }

  Unsigned getSourceRank(ClassUtils.ClassId cid) {
    which (cid) {
    case RootHardCellG.classidof: { return 10u; }

    case DiamondSequencer.classidof:
    case HardCellG.classidof:     { return 20u; }

    case MBase.classidof:         { return 20u; }

    case Antenna.classidof:       { return 50u; }

    }
    {
      DebugUtils du;
      du.print("UNKNOWN CLASSID");
      du.print(cid);
      Fail f;
      f.fail(__FILE__,__LINE__);
    }
    return 0u; // NOT REACHED
  }

  Void resetDCs() {
    for (Unsigned i = 0u; i < 4u; ++i) 
      mDefCons[i] = cDC_OPEN;
  }

  Void copyDEWLine(Self & other) {
    mDefCons = other.mDefCons;
  }

  Bool operator==(Self & other) {
    for (Unsigned i = 0u; i < 4u; ++i) 
      if (mDefCons[i] != other.mDefCons[i])
        return false;
    return true;
  }

  Unsigned maxDCs() {
    Unsigned max = 0u;
    for (Unsigned i = 0u; i < 4u; ++i) 
      if (mDefCons[i] > max)
        max = mDefCons[i];
    return max;
  }

  Bool mergePlausibleDCs(constant DEWLine & other, AxialDir fromad) {
    Bool ret = false;
    AxialDir implausiblead = oppositeAxialDir(fromad);
    for (Unsigned i = 0u; i < 4u; ++i) {
      if (i == implausiblead) continue;
      if (mDefCons[i] < other.mDefCons[i]) {
        mDefCons[i] = other.mDefCons[i];
        ret = true;
      }
    }
    return ret;
  }


  Bool mergeDCs(constant DEWLine & other) {
    Bool ret = false;
    for (Unsigned i = 0u; i < 4u; ++i) {
      if (mDefCons[i] < other.mDefCons[i]) {
        mDefCons[i] = other.mDefCons[i];
        ret = true;
      }
    }
    return ret;
  }

  Bool maxDC(AxialDir di, DefCon val) {
    Bool ret = val > mDefCons[di];
    if (ret) mDefCons[di] = val;
    return ret;
  }

  Void renderDCs(DefCons dc, C2D at, ARGB basecol) {
    Drawable drawable;
    if (!drawable.canDraw()) return;
    for (SN i = 0u; i < 4u; ++i) {
      if (dc[i] == cDC_OPEN) continue;
      SN dir = (SN) (i+1u);
      drawDEWLine_(at,dir,dc[i],true);
    }
  }

  Unsigned dcWidth(DefCon dc) {
    Unsigned size;
    which (dc) {
    case cDC_OPEN: { size = 200; }
    case cDC_DIST: { size = 400; }
    case cDC_NEAR: { size = 600; }
    case cDC_HERE: { size = 700; }
    }
    return size;
  }

  ARGB dcColor(DefCon dc) {
    ColorUtils cu;
    ARGB oncol;
    which (dc) {
    case cDC_OPEN: { oncol = cu.color(0xff000000); } // all clear
    case cDC_DIST: { oncol = cu.color(0xff999900); } // distant sighting
    case cDC_NEAR: { oncol = cu.color(0xffcccc00); } // near sighting
    case cDC_HERE: { oncol = cu.color(0xffff0000); } // membrane contact or worse
    }
    return oncol;
  }
    
  Void drawDEWLine_(C2D at, SN towardsn, DefCon dc, Bool dewColor) {
    Drawable drawable;
    if (!drawable.canDraw()) return;
    MDist md; // No ew when rendering!  Can't use ew.getCoordRaw()!

    C2D sc = md.getSiteCoord(towardsn);
    C2D atd = at*Drawable.cUNITS_PER_SITE;
    C2D start = atd + sc*(3*Drawable.cUNITS_PER_SITE/8); // Try to avoid atom label
    C2D end = atd + sc*(C2D.Coord) ((dc+4)*Drawable.cUNITS_PER_SITE/8);

    ARGB oncol;
    Unsigned width = 100u*dc;
    ColorUtils cu;
    if (!dewColor) oncol = getColor(0xff000000);
    else oncol = dcColor(dc);
    drawable.drawMaskedLine(start, end, oncol, oncol, (Bits) 0xffffffff, width);
    return;
  }

}

quark DEWLineC : DEWLine { //< A concrete DEWLine for passive storage
  //// DEWLine API
  @Override
  virtual DefCon signalDC() {
    Fail f;
    f.fail("DEWLineC unable to signalDC you are bugging");
    return cDC_HERE; // Not reached
  }

}
