/** \symbol J
    \color #0f0
 */
element DeployJunctors : P2PvDL
  + DTU
  + Fail
{
  typedef Unsigned(3) DeployState;
  DeployState mState = DeployState.maxof; // 0..3 PocketDir, 4 return, 5 wait, 7 init

  HCPoint mReturnHP1, mReturnHP2;

  Void init(EdgeTags et, D1PocketableState & d1s) {
    PocketHC3 & hc3 = d1s.mPocket;
    if (hc3.mCoordCount != 4u)
      fail(__FILE__,__LINE__,"Bad PocketHC3?");
    EventWindow ew;
    C2D c1 = hc3.mCoords[0u]; // opposite
    C2D c2 = hc3.mCoords[2u]; // corners
    HCPointable & hmin = (HCPointable&) ew[c1];
    HCPointable & hmax = (HCPointable&) ew[c2];
    init(et,hmin.getHCPoint(),hmax.getHCPoint());
  }

  Void init(EdgeTags et, HCPoint returnaddr) {    
    init(et, returnaddr, returnaddr);
  }

  Void init(EdgeTags et, HCPoint ra1, HCPoint ra2) {    
    mEdgeTags = et;
    mReturnHP1 = ra1;
    mReturnHP2 = ra2;
    mState = 0u;
  }

  EdgeTags mEdgeTags;           // values to deploy

  //// P2PvDL API
  @Override
    virtual Void getDestPockets(HCPoint & d1, HCPoint & d2) {
    if (mState < 4u) {
      C2D c = pocketDir2C2D((PocketDir) mState); // (+-1,+-1)
      d1.setHCPoint(c);
      d2.setHCPoint(c);
    } else if (mState == 4u) {
      d1.setHCPoint(mReturnHP1);
      d2.setHCPoint(mReturnHP2);
    } else {
      // no dest
      d1.unsetHCPoint();
      d2.unsetHCPoint();
    }
  }

  @Override
  virtual Bool onDelivery(HP2HP& hp2hp) {
    mD&&pR("DPJNOD10");
    mD&&pR(mState);
    if (mState < 4u) {
      EventWindow ew;
      mD&&pR("DPJNOD11");
      if (ew.isAccessible(hp2hp.mChosenHCSN)) {
        Atom & a = ew[hp2hp.mChosenHCSN];
        if (a as JunctionIndexProviderStg) {
          a.setJunctionIndex(mEdgeTags.mEdgeTagArray[mState]);
          mD&&pR("DPJNOD12");
          mD&&pR(a);
          ++mState;             // On to next task!
          return false;         // false since this wasn't the final delivery
        }
        mD&&pR("DPJNOD13");
        return false;           // what? what to do?
      }
    }
    mD&&pR("DPJNOD14");
    return false;               // Wait for BodyModel to eat us
  }
  
}
