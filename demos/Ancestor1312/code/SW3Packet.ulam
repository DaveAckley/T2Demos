quark SW3CmdInfo + DTU {
  typedef Bits(2) BodyDirFlag;
  typedef BodyDirFlag ExecWant;
  typedef BodyDirFlag ExecMask;

  typedef Bits(2) ConnectionCode;
  constant ConnectionCode cCNCOD_UP =   1u<<cBODY_UP;
  constant ConnectionCode cCNCOD_DOWN = 1u<<cBODY_DOWN;
  constant ConnectionCode cCNCOD_BOTH = cCNCOD_UP|cCNCOD_DOWN;
  constant ConnectionCode cCNCOD_NONE = 0u;

  ConnectionCode mExVal = cCNCOD_NONE; // Default is head: up must be
  ConnectionCode mExMsk = cCNCOD_UP;    // null, and that's all

  ConnectionCode getCC(Segment & seg) {
    return
      (seg.mPocketPtrs[cBODY_UP] <= cPP_EAST   ? cCNCOD_UP   : 0u) |
      (seg.mPocketPtrs[cBODY_DOWN] <= cPP_EAST ? cCNCOD_DOWN : 0u);
  }

  Bool executesHere(Segment & seg) {
    return executesHere(getCC(seg));
  }

  Bool executesHere(ConnectionCode val) {
    return (val & mExMsk) == (mExVal & mExMsk);
  }
}

quark SW3Packet + DTU + Fail {

  SW3CmdStatus mCmdStatus;

  typedef UMod(4,1) SeqNo;
  SeqNo mSeqNo;

  SW3Cmd mCmd;

  constant SW3CmdInfo mCmdInfo[] = {
    { .mExVal = SW3CmdInfo.cCNCOD_NONE}, // cSW3C_NOOP 
    { .mExVal = SW3CmdInfo.cCNCOD_NONE}, // cSW3C_SHRINK 
    { .mExVal = SW3CmdInfo.cCNCOD_NONE}, // cSW3C_GROW 
    { .mExVal = SW3CmdInfo.cCNCOD_NONE, .mExMsk = SW3CmdInfo.cCNCOD_NONE }, // cSW3C_BECOME: run everywhere
    { .mExVal = SW3CmdInfo.cCNCOD_NONE}, // cSW3C_PLACE 
    { .mExVal = SW3CmdInfo.cCNCOD_NONE}, // cSW3C_DIE 
    { .mExVal = SW3CmdInfo.cCNCOD_NONE}, // cSW3C_DIEPL 
    { .mExVal = SW3CmdInfo.cCNCOD_NONE}, // cSW3C_DELATM 
    { .mExVal = SW3CmdInfo.cCNCOD_NONE}, // cSW3C_DELNCD 
    { .mExVal = SW3CmdInfo.cCNCOD_NONE}, // cSW3C_HC3CTL 
    { .mExVal = SW3CmdInfo.cCNCOD_NONE}, // cSW3C_GRIPDS 
    { .mExVal = SW3CmdInfo.cCNCOD_NONE}, // cSW3C_HC3WDS
  };

  SW3Arg mArg;

  typedef Unsigned(5) HC3Code;
  constant HC3Code cHC3C_MAKEHG = 0u; //< change to HG
  constant HC3Code cHC3C_MAKEDS = 1u; //< change to DS with default procunit and dirstatus
  constant HC3Code cHC3C_MAKCDS = 2u; //< change to custom DS with supplied procunit map

  Bool matchCore(SW3Packet other) {
    return
      mSeqNo == other.mSeqNo &&
      mCmd == other.mCmd &&
      mArg == other.mArg;
  }

  //// SW3Packet SERVICES
  Bool tryHC3Ctl(SwapWormHC3State & s3s, SwapWormHC3 & s3, SW3Arg arg) {
    QDebugUtils qd;
    qd.takeDebug(s3s);
    PocketDir pd = (PocketDir) (((Bits) arg) & 0x3);
    HC3Code hc3Code = (HC3Code) ((((Bits) arg)>>2) & 0x1f);
    SW3Packet & dpkt = (SW3Packet&) s3.mDownSignal;
    qd.print("THC3C10PTR");
    qd.print(pd);
    qd.print("THC3C11CODE");
    qd.print(hc3Code);

    PocketHC3 & p = s3s.mPocket;

    dpkt.mCmdStatus = cSW3CMST_CANT; // Assume there'll be a problem

    if (p.mStatus != p.cSTATUS_OK)
      return false;
    C2D hc3c = p.mCoords[pd];
    EventWindow ew;
    if (!ew.isAccessible(hc3c)) return false;
    Atom & a = ew[hc3c];
    which (hc3Code) {
      case cHC3C_MAKEHG: {
        if (!(a is HardCellG)) {
          HardCellG hg;
          BaseClassUtils bcu;
          Int bits = bcu.copySharedData(a,hg.atomof);
          if (bits < 0) return false;
          qd.print("THC3C13MAKEHG");
          ew[hc3c] = hg.atomof;
        }
        dpkt.mCmdStatus = cSW3CMST_DID; // whaddayano
        return true;
      }
      case cHC3C_MAKEDS: {
        if (!(a is DiamondSequencer)) {
          DiamondSequencer ds;
          BaseClassUtils bcu;
          Int bits = bcu.copySharedData(a,ds.atomof);
          if (bits < 0) return false;
          QProcUnitMap allx = { .mQuadrantPUArray = { cPUNIT_XEQ, cPUNIT_XEQ, cPUNIT_XEQ, cPUNIT_XEQ, } };
          ds.mProcUnitMap = allx;
          //          for (Unsigned i = 0u; i < QuadrandPUArray.lengthof; ++i) 
          //            ds.mQuadrantPUArray[i] =  cPUNIT_XEQ; // new DS is all X
          qd.print("THC3C13MAKEDS");
          ew[hc3c] = ds.atomof;
        }
        dpkt.mCmdStatus = cSW3CMST_DID; // whaddayano
        return true;
      }
      otherwise: {
        qd.print("THC3C13MAKCDS13");
      }
    }
    return false;
  }

  /** Create a 'daughter' DS to the SW, gripped as specified
   */
  Bool tryDaughterDS(SwapWormHC3State & s3s, SwapWormHC3 & s3, SW3Arg arg) {
    QDebugUtils qd;
    qd.takeDebug(s3s);
    PocketDir pd = cQUAD_SW;
    SW3Packet & dpkt = (SW3Packet&) s3.mDownSignal;
    qd.print("MAKEDSDTR10");
    qd.print(pd);
    qd.print("MAKEDSDTR11");
    qd.print(arg);

    PocketHC3 & p = s3s.mPocket;

    dpkt.mCmdStatus = cSW3CMST_CANT; // Assume there'll be a problem

    if (p.mStatus != p.cSTATUS_OK)
      return false;
    C2D hc3c = p.mCoords[pd];
    EventWindow ew;
    if (!ew.isAccessible(hc3c)) return false;
    Atom & a = ew[hc3c];
    { // CUSTOM DS FOR DAUGHTER
      qd.print("MAKEDSDTR12");
      if (!(a is DiamondSequencer)) {
        DiamondSequencer ds;
        BaseClassUtils bcu;
        Int bits = bcu.copySharedData(a,ds.atomof);
        if (bits < 0) return false;
        /// SET CUSTOM GRIP
        ds.mProcUnitMap.setProcUnitMap((Bits(8)) arg);
        qd.print("MAKEDSDTR13");
        ew[hc3c] = ds.atomof;
      }
      dpkt.mCmdStatus = cSW3CMST_DID; // whaddayano
      qd.print("MAKEDSDTR14");
      return true;
    }
    qd.print("MAKEDSDTR15");
    return false;
  }

  Bool tryBecome(SwapWormHC3State & s3s, SwapWormHC3 & s3, ClassUtils.ClassId classid) {
    QDebugUtils qd;
    qd.takeDebug(s3s);
    qd.print("3PKTTBEC10");

    ClassUtils cu;
    if (!cu.isBase(classid,Segment.classidof)) return false; 
    qd.print("3PKTTBEC11");

    AtomUtils au;
    Int etype = cu.getElementType(classid);
    if (etype < 0) fail(__FILE__,__LINE__);
    Atom a = au.new(etype); 

    qd.print("3PKTTBEC12");
    BaseClassUtils bcu;
    Int bits = bcu.copySharedData(s3.atomof,a);
    if (bits < 0) return false;

    qd.print("3PKTTBEC13");
    qd.print(a);
    
    EventWindow ew;
    SN s3sn = ew.getSiteNumber(s3);
    if (s3sn == SN.maxof) fail(__FILE__,__LINE__);
    ew[s3sn] = a;

    return true;
  }

  Bool tryGrowSeg(SwapWormHC3State & s3s, SwapWormHC3 & s3, Bits axialDirMap) {
    QDebugUtils qd;
    qd.takeDebug(s3s);
    qd.print("3PKTGS10");
    if (!s3.isHead()) fail(__FILE__,__LINE__);

    qd.print("3PKTGS11");
    PocketPtr grewptr = s3.tryGrowOrMove(s3s, axialDirMap, true, false);
    qd.print("3PKTGS12");
    if (grewptr == cPP_NULL) return false;
    // We grew: Go fixup the new head's signals
    EventWindow ew;
    qd.print("3PKTGS13");
    qd.print(grewptr);
    qd.print(s3s.mEWSNAvailables[grewptr]);
    SwapWormHC3 & newhd = (SwapWormHC3&) ew[s3s.mEWSNAvailables[grewptr]];
    qd.print(newhd);
    SW3Packet pkt;
    pkt = (SW3Packet) newhd.mDownSignal;
    qd.print("3PKTGS14");
    qd.print(pkt);
    pkt.mCmdStatus = cSW3CMST_DID;
    qd.print(pkt);
    newhd.mDownSignal = (SwapWormHC3.Signal) pkt;

    return true;
  }

  Bool killSeg(SwapWormHC3State & s3s, SwapWormHC3 & s3, Bool pushdown) {
    QDebugUtils qd;
    qd.takeDebug(s3s);
    EventWindow ew;
    qd.print("S3PKlSg10");
    if (s3s.mPocketWithMate[cBODY_DOWN] != cPP_NULL) {
      Segment & sg = (Segment&) ew[s3s.mEWSNMate[cBODY_DOWN]];
      if (sg as SwapWormHC3) {
        if (pushdown) {
          qd.print("S3PKlSg10PD");
          sg.mDownSignal = s3.mDownSignal; // Push our 'head' signal down to new head-to-be
        }
      }
      sg.mPocketPtrs[cBODY_UP] = cPP_NULL;
      qd.print("S3PKlSg11");
    }
    if (s3s.mPocketWithMate[cBODY_UP] != cPP_NULL) {
      Segment & sg = (Segment&) ew[s3s.mEWSNMate[cBODY_UP]];
      sg.mPocketPtrs[cBODY_DOWN] = cPP_NULL;
      qd.print("S3PKlSg12");
    }
    qd.print("S3PKlSg13");
    ew[0] = Empty.instanceof;
    return true;
  }

  Bool tryDeletePocketAtom(SwapWormHC3State & s3s, SwapWormHC3 & s3, Bits axialDirMap) {
    QDebugUtils qd;
    qd.takeDebug(s3s);
    qd.print("3PTDA10");
    if (!s3.isHead()) fail(__FILE__,__LINE__);

    qd.print("3PTDA11");
    PocketPtr grewptr = s3.tryGrowOrMove(s3s, axialDirMap, true, false);
    qd.print("3PTDA12");
    if (grewptr == cPP_NULL) return false;
    // We grew: Go fixup the new head's signals
    EventWindow ew;
    qd.print("3PTDA13");
    qd.print(grewptr);
    qd.print(s3s.mEWSNAvailables[grewptr]);
    SwapWormHC3 & newhd = (SwapWormHC3&) ew[s3s.mEWSNAvailables[grewptr]];
    qd.print(newhd);
    SW3Packet pkt;
    pkt = (SW3Packet) newhd.mDownSignal;
    qd.print("3PTDA14");
    qd.print(pkt);
    pkt.mCmdStatus = cSW3CMST_DID;
    qd.print(pkt);
    newhd.mDownSignal = (SwapWormHC3.Signal) pkt;

    return true;
  }


  Bool execute(SwapWormHC3State & s3s, SwapWormHC3 & s3, Bool atHead) {
    QDebugUtils qd;
    qd.takeDebug(s3s);
    qd.print("S3PEX10");

    if (mCmdStatus != cSW3CMST_TRYING) return false;
    which (mCmd) {
      case cSW3C_NOOP: {
        qd.print("S3PEX11NOOP");
        if (atHead) {
          mCmdStatus = cSW3CMST_DID; // You're welcome
          return true;
        }
        return false;
      }
      case cSW3C_SHRINK: {
        qd.print("S3PEX11SHRINK");
        if (atHead) {
          // Killing (our) seg now finishes the shrink task
          mCmdStatus = cSW3CMST_DID;
          return killSeg(s3s,s3,true);
        }
        qd.print("S3PEX12SHRINK");
        return false;
      }
      case cSW3C_GROW: {
        qd.print("S3PEX11GROW");
        if (atHead)
          return tryGrowSeg(s3s,s3,mArg);
        qd.print("S3PEX12GROW");
        return false;
      }
      case cSW3C_BECOME: {
        qd.print("S3PEX11BECOME");
        if (atHead)
          return tryBecome(s3s,s3,(ClassUtils.ClassId) mArg); 
        return false;
      }
      case cSW3C_DELATM: {
        if (atHead) {
          if (s3.tryDelAtom(s3s, (ClassUtils.ClassId) mArg, cPP_SELF)) 
            mCmdStatus = cSW3CMST_DID;
          else
            mCmdStatus = cSW3CMST_CANT; //?
          return true;
        }
        return false;
      }
      case cSW3C_DIE: {
        qd.print("S3PEX11DIE");
        if (atHead) {
          if (s3.mPocketPtrs[cBODY_DOWN] != cPP_NULL)  // Leave last single seg 
            return killSeg(s3s,s3,true);
        }
        qd.print("S3PEX12DIE");
        return false;
      }
      case cSW3C_DIEPL:
      case cSW3C_PLACE: {
        qd.print("S3PEX11PLACE");
        if (atHead) {
          // First make sure the arg is reasonable
          ClassUtils cu;
          Int etype = cu.getElementType(mArg);
          if (etype < 0) {
            qd.print("S3PEX11PLACE11");
            mCmdStatus = cSW3CMST_CANT; // WTF?
            return false;
          }
          AtomUtils au;
          Atom a = au.new(etype);

          // Killing (our) seg now (almost) finishes the place task
          mCmdStatus = cSW3CMST_DID; 
          if (s3.mPocketPtrs[cBODY_DOWN] != cPP_NULL) { // Leave last single seg 
            Bool ks = killSeg(s3s,s3,mCmd != cSW3C_DIEPL);
            if (ks) {
              // WATCH OUT: self and related refs are all stale! No more print!
              EventWindow ew;
              ew[0] = a;
            }
          }
          return true;
        }
        qd.print("S3PEX12SHRINK");
        return false;
      }
      case cSW3C_HC3CTL: {
        qd.print("S3PEX11HC3CTL");
        if (atHead)
          return tryHC3Ctl(s3s,s3,mArg);
        qd.print("S3PEX12HC3CTL");
        return false;
      }
      case cSW3C_GRIPDS: {
        qd.print("S3PEX11GRIPDS - NYI");
        /*
        if (atHead)
          return tryHC3Ctl(s3s,s3,mArg);
        qd.print("S3PEX12GRIPDS");
        */
        return false;
      }
      case cSW3C_HCSWDS: {
        qd.print("S3PEX11HCSWDS");
        if (atHead)
          return tryDaughterDS(s3s,s3,mArg);
        return false;
      }

      otherwise: {
        ByteStreamLogger bsl;
        bsl.printf("S3PX: %d(0x%x)\n",mCmd,mArg);
      }
    }
    return false;
  }

}
