
/*
local constant DTU.BodyDir cBODY_UP = DTU.cBODY_UP;
local constant DTU.BodyDir cBODY_DOWN = DTU.cBODY_DOWN;
quark ChainControlUp : ChainControl(cBODY_UP) { }
quark ChainControlDown : ChainControl(cBODY_DOWN) { }
*/

/*BUT NOT WITH THESE TWO: */
quark ChainControlUp : ChainControlT(DTU.cBODY_UP) { }
quark ChainControlDown : ChainControlT(DTU.cBODY_DOWN) { }

quark ChainControlData + DTU {
  TQMap mTQMap = 0xf; //< currently acceptable target quadrants; default: all
  ASRMap mSRMap = 0xc; //< current acceptable size ranges; default: stay way clear of the edge

  Bool mViolation; //< Map violation return signal
}

quark ChainControl + DTU {
  typedef ChainControlData.SizeRange SizeRange;
  typedef ChainControlData.TQMap TQMap;
  typedef ChainControlData.ASRMap ASRMap;

  //// ChainControl API
  virtual ChainControlData & getChainControlData() ;

  //// ChainControl SERVICES
  Void setChainControlData(ChainControlData src) {
    ChainControlData & ccd = getChainControlData();
    ccd = src;
  }

  //// ChainControl SERVICES
  Void init() { }

  Void randomize() {
    Random random;
    ChainControlData & ccd = getChainControlData();
    ccd.mTQMap = (TQMap) random.bits(ccd.mTQMap.sizeof);
    ccd.mSRMap = (ASRMap) random.bits(ccd.mSRMap.sizeof);
    ccd.mViolation = false;
  }

  Void init(Self & s) {
    ChainControlData & ccd = getChainControlData();
    ChainControlData & other = s.getChainControlData();
    ccd.mTQMap = other.mTQMap;
    ccd.mSRMap = other.mSRMap;
    ccd.mViolation = other.mViolation;
  }

  Void atEnd(PocketChainState & s) {
    s.print("CCATEN10");
    Random random;
    if (false /*random.oneIn(200u)*/) {
      s.print("CCATEN11");
      randomize();
    }
  }

  Bool takeFrom(Self & source) {
    ChainControlData & ccd = getChainControlData();
    ChainControlData & other = source.getChainControlData();

    Bool ret = false;
    if (other.mTQMap != ccd.mTQMap) {
      ccd.mTQMap = other.mTQMap;
      ret = true;
    }
    if (other.mSRMap != ccd.mSRMap) {
      ccd.mSRMap = other.mSRMap;
      ret = true;
    }
    return ret;
  }

  constant Int cILLEGAL_TQ_ERROR = 100;
  Int errorFromTQ(PatchState & ps, PocketDir forpd) {
    ChainControlData & ccd = getChainControlData();
    ps.print("ERFMTQ10");
    ps.print(forpd);
    ps.print(ccd);
    ps.print(1u<<forpd);
    Int ret = ((ccd.mTQMap & (1u<<forpd)) == 0u) ?
      cILLEGAL_TQ_ERROR :
      0;
    ps.print("ERFMTQ11");
    ps.print(ret);
    return ret;
  }

  Bool inSR(SizeRange sr, Unsigned srdist) {
    return
      (srdist >= ChainControlData.cSR_LIMITS[sr]) &&
      (srdist < ChainControlData.cSR_LIMITS[sr+1]);
  }

  SizeRange getSR(Unsigned srdist) {
    for (Unsigned i = 0u; i <= SizeRange.maxof; ++i) {
      SizeRange sr = (SizeRange) i;
      if (inSR(sr, srdist)) return sr;
    }
    { Fail f; f.fail(__FILE__,__LINE__); }
    return 0u; // NOT REACHED
  }

  Int chainError(PatchState & ps) {
    ps.print("CCCHER10");
    Int ret = 0;
    for (Unsigned i = 0u; i <= PocketDir.maxof; ++i) {
      PocketDir pd = (PocketDir) i;
      ret += chainError(ps, pd);
      ps.print("CCCHER11");
      ps.print(pd);
      ps.print(ret);
    }
    return ret;
  }

  Int chainError(PatchState & ps, PocketDir pd) {
    ps.print("CHAERR10");
    Unsigned dshops = ps.mDSHops[pd];
    Unsigned uphops = ps.mUpHops[pd];
    Unsigned maxhops = ps.mMaxUpHops;
    Unsigned srdist = maxhops - uphops - 1u;
    XZone ctrzone = ps.mCenterXZone;
    PocketDir tquad = xzoneAndPatchDir2TargetQuadrant(ctrzone, pd);
    ps.print(dshops);
    ps.print(uphops);
    ps.print(tquad);

    Int srerr = errorFromSR(ps,srdist); // size range error
    Int tqerr = errorFromTQ(ps,tquad); // target quadrant error
    ps.print("CHAERR11");
    ps.print(srerr);
    ps.print(tqerr);
    return srerr + tqerr;
  }

  constant Int cILLEGAL_SR_ERROR = 100;
  Int errorFromSR(PatchState & ps, Unsigned srdist) {
    ChainControlData & ccd = getChainControlData();
    ps.print("ERFMSR10");
    ps.print(ccd);
    SizeRange sr = getSR(srdist);
    ps.print(sr);
    Int ret = 
      ((ccd.mSRMap & (1u<<sr)) == 0u) ?
      cILLEGAL_SR_ERROR :
      0;
    ps.print("ERFMSR11");
    ps.print(ret);
    return ret;
  }

}

quark ChainControlT(DTU.BodyDir cSOURCE_BODY_DIR) : ChainControl + DTU + Fail {

  //// ChainControl API
  @Override
  virtual ChainControlData & getChainControlData() {
    return mChainControlData;
  }

  ChainControlData mChainControlData;

  //// ChainControlT SERVICES
  /** Dig the \c bd ngb out of \c pcs and \return the SN of its codon.
      \return SN.maxof bd link is cPP_NULL or anything else weird, or
      if there isn't a (single) codon in the given direction.

      Depends on SegmentState.findMates, which is called during
      PocketChainState.observe, which bails if it fails. So it's valid
      in stabilize(..) and later.
   */
  SN getCCLink(PocketChainState & pcs) {
    SN sn = pcs.mEWSNMate[cSOURCE_BODY_DIR];
    return sn; // um that's it?
  }


}


