/** Plating surrounding item and defining the coordinate system during printing
    \symbol Pl
    \color #722
 */
element Plate : GeneralSpatialTree + Printer + Utils {
  ////SPOT API
  virtual SiteIterator neighborhood() {    // Only look out two to avoid trucks
    return SiteIterator.instanceof(cEWR2x);
  }

  B2D mLocation;  // Our location
  B2D mMin;       // Min coord of plated object size
  B2D mMax;       // Max coord of plated object size

  typedef Unsigned(2) Phase;
  constant Phase cPHASE_INIT          = 0u; 
  constant Phase cPHASE_PLATE_CONTENT = 1u; 
  constant Phase cPHASE_FLOOD_BBOX =    2u; 
  constant Phase cPHASE_ROLL_TRUCKS =   3u; 
  Phase mPhase;
  Bool mHeadCommander;
  
  Bool hasParent() {
    if (!super.hasParent()) return false;
    if (!ew[mParentSN] is Self) return false;
    return true;
  }

  Self& getParent() {
    if (!hasParent()) {
      Fail f;
      f.fail("No parent");
    }
    Self& ret = (Self&) ew[mParentSN];
    return ret;
  }

  Bool phaseFromParent() {
    if (hasParent()) {
      if (!ew[mParentSN] is Self) return die();
      Self & p = (Self&) ew[mParentSN];
      mPhase = p.mPhase;
    }
    return false;
  }

  Bool boundsFromParent() {
    if (hasParent()) {
      if (!ew[mParentSN] is Self) return die();
      Self & p = (Self&) ew[mParentSN];
      mMin = p.mMin;
      mMax = p.mMax;
    }
    return false;
  }

  Void boundsToParent(Self& parent) {
    parent.mMin = parent.mMin.min(mMin); 
    parent.mMax = parent.mMax.max(mMax); 
  }

  B2D buildPlateMin() {
    Fail f;
    if (!mMin.isValid()) f.fail();
    // Need borders?    B2D ret(mMin.mX - 1, mMin.mY - 1); // Room for borders
    B2D ret(mMin.mX, mMin.mY); 
    return ret;
  }

  Bool iAmTheHeadCommander() {
    if (mPhase < cPHASE_ROLL_TRUCKS) return false;
    return mHeadCommander;
  }

  Bool maybeBecomeHeadCommander() { 
    if (mPhase < cPHASE_ROLL_TRUCKS) return false;
    C2D hc = headCommanderLoc();
    C2D us = mLocation.toC2D();
    mHeadCommander = hc == us;
    return false;
  }

  Bool doHeadCommanderBusiness() {
    if (!iAmTheHeadCommander()) return false;

    ///// COMMANDER BUSINESS
    // 0. (We are passivated if any trucks in EWR2.)

    // 1. Ensure there's at least one us Plate ahead
    if (!ew[4] is Self) return die(); // opps not Plate
    Self & p4 = (Self&) ew[4];
    ByteStreamLogger bsl;
    bsl.printf("hcb 4\n");
    if (!isKin(p4,4u)) return die();  // opps not us Plate

    // 2. We're (almost) done if it's border plate
    if (p4.isBorder()) return die(); // XXX FIX ME: CLEANUP CREW

    // 3. If not border, must be two us Plates ahead
    if (!ew[12] is Self) return die(); // opps not Plate
    Self & p12 = (Self&) ew[12];
    bsl.printf("hcb 12\n");
    if (!isKin(p12,12u)) return die(); // opps not us Plate

    bsl.printf("hcb OK\n");
    // 4. Compute truck route
    B2D.BCoord stepsTilPickup = 1u; // XXX FIX ME
    B2D.BCoord stepsTilDropoff = 1u; // XXX FIX ME

    // 5. Build the truck
    Tractor tractor;
    tractor.mStepsTilDropoff = stepsTilDropoff;
    
    UnloadedTrailer trailer;
    trailer.mStepsTilPickup = stepsTilPickup;

    // 6. Release it
    ew[4] = tractor;
    ew[12] = trailer;

    return true;  // Block here for more action
  }

  C2D headCommanderLoc() {
    Fail f;
    if (!mMin.isValid()) f.fail();
    if (mPhase < cPHASE_ROLL_TRUCKS) f.fail();
    C2D ret(mMax.mX,(mMax.mY-mMin.mY)/2 + mMin.mY);
    du.print("HCLEI");
    du.print(ret);
    return ret;
  }

  B2D buildPlateMax() {
    Fail f;
    if (!mMax.isValid() || !mMax.isValid()) f.fail();
    Int width = mMax.mX - mMin.mX + 1; // Plated object width
    /*    B2D ret(mMax.mX + 2*width,  // Room for parent to run
          mMax.mY + 1);       // Room for border */
    B2D ret(mMax.mX + 2*width,  // Room for parent to run
            mMax.mY);       // Room for border
    return ret;
  }

  Bool isBorder() {
    if (mPhase < cPHASE_FLOOD_BBOX) return die(); // Border not defined
    if (mPhase == cPHASE_FLOOD_BBOX &&
        mRGBState != cRED_STATE)    return die(); // Border not defined

    // phase is >= FLOOD_BBOX/BLUE; border is defined
    B2D max = buildPlateMax();
    B2D min = buildPlateMin();
    Bool ret =
      mLocation.mY == max.mY ||
      mLocation.mY == min.mY ||
      mLocation.mX == max.mX ||
      mLocation.mX == min.mX;
    /*
    ByteStreamLogger bsl;
    bsl.printf("isBo=%d %d<=%d<=%d\n",
               ret, min.mY, mLocation.mY, max.mY);
    */
    return ret;
  }

  typedef Unsigned(B2D.cBITS-1u) ObjectDimension;

  @Override
  virtual Void renderGraphics() {
    //    if (!Ulam5StdlibControl.pRENDER_QBONDS) return;
    if (!hasParentPtr()) return; // Can't use 'hasParent' -- it uses ew!
    du.printContext();
    Drawable drawable;
    if (!drawable.canDraw()) return;

    MDist md; // No ew when rendering!  Can't use ew.getCoordRaw()!
    C2D bondc = md.getSiteCoord(mParentSN); 
    C2D start(0,0);
    C2D end = bondc*(7*Drawable.cUNITS_PER_SITE/8); // Draw 7/8 way parent
    ColorUtils cu;
    ARGB oncol = cu.color(0xffffffff);
    ARGB offcol = cu.color(0x0);
    drawable.drawMaskedLine(start,end,oncol,offcol,0xf0f0f0f0);
  }

  ARGB getColor(Unsigned selector) {
    ColorUtils cu;
    if (iAmTheHeadCommander()) return cu.color(0xdddd44);
    ARGB base = cu.color(0x33bb33);
    which (mRGBState) {
      case cRED_STATE: { base = cu.color(0xaa7777);   }
      case cGREEN_STATE: { base = cu.color(0x77aa77); }
      case cBLUE_STATE: { base = cu.color(0x7777aa);  }
    }
    if (mPhase > cPHASE_FLOOD_BBOX) {
      C2D loc = mLocation.toC2D();
      Bool inbox = lessEqual(loc,mMax.toC2D()) && lessEqual(mMin.toC2D(),loc);
      if (inbox)
        base = cu.dimmer(base);
    }
    return base;
    /*
    if (isDispatcherInCharge()) {
      Unsigned len = (mLocation.toC2D() - mMin.toC2D()).length();
      Unsigned max = (mMax.toC2D() - mMin.toC2D()).length();
      if (max == 0u) ++max;
      base = cu.between(cu.color(0xaa0000),
                        cu.color(0x0000aa),
                        100u*len/max);
    }

    Unsigned frac = 10u;
    if (isObjectPlatingCompleted()) frac += 10u;
    if (isBoundingBoxFlooded()) frac += 10u;
    if (isDispatcherInCharge()) frac += 10u;
    return cu.between(base,
                      cu.color(0xffff00),
                      frac);
    */
  }
  
  virtual Bool update() {
    if (self.SPOT.update()) return true;

    PlateTreeVisitor ptv;
    if (traverse(ptv)) return true;
    return false;
  }
  
  Bool isKin(Self other, SN sn) { // Is other in same coordinate space as I am?
    if (sn == 0u) return true;    // doh
    C2D myloc = mLocation.toC2D();
    C2D othloc = other.mLocation.toC2D();
    C2D c = md.getSiteCoord(sn);
    Bool ret = othloc-c == myloc;
    du.print("ISKIN");
    du.print(myloc);
    du.print(othloc);
    du.print(sn);
    du.print(ret);
    return ret;
  }

  Bool plateNearContentEmptiesWithRed() {
    Unsigned kids = 0;

    for (SiteIterator si = neighborhood(); si.hasNext();) {
      SN sn = si.next();
      if (sn == 0u) continue;
      C2D c = md.getSiteCoord(sn);
      Atom & a = ew[sn];

      if (a as Plate) {
        if (!isKin(a,sn)) {
          miscarry();
          return true;
        }
      } else if (a is Content) {
        // Scan for empties in Moore ngb around content
        for (SiteIterator sj = SiteIterator.instanceof(cMOOREx); sj.hasNext();) {
          SN snj = sj.next();
          C2D cj = md.getSiteCoord(snj);
          C2D abs = c+cj;
          if (!ew.isAccessible(abs)) continue;
          // Don't plate beyond 2 of self.  Someone closer might do it.
          if (abs.length() > 2u) continue;  
          SN snx = md.getSiteNumber(abs);
          Atom & aj = ew[snx];
          /*
          bsl.printf("sn %d c(%d,%d) snj %d cj(%d,%d) abs(%d,%d)\n",
                     sn, c.x, c.y,
                     snj, cj.x, cj.y,
                     abs.x, abs.y);
          */
          if (aj as Empty) {        /* we care about empties here instead */
            //bsl.printf("snx %d\n",snx);
            plateSite(snx,true);
            ++kids;
          }
        }
      }
    }

    return kids > 0u; // Plated anybody
  }

  Bool lessEqual(C2D cleft, C2D cright) {
    return
      cleft.getX() <= cright.getX() &&
      cleft.getY() <= cright.getY();
  }

  Bool plateBoundingBoxEmptiesWithRed() {
    Unsigned kids = 0;
    C2D myloc  = mLocation.toC2D();
    C2D bpmin = buildPlateMin().toC2D();
    C2D bpmax = buildPlateMax().toC2D();
    
    for (SiteIterator si = neighborhood(); si.hasNext();) {
      SN sn = si.next();
      if (sn == 0u) continue;
      C2D c = md.getSiteCoord(sn);

      C2D themloc = myloc + c;
      Bool inbox = lessEqual(themloc,bpmax) && lessEqual(bpmin,themloc);

      if (!inbox) continue;     // Don't even look outside the box

      Atom & a = ew[sn];

      if (a as Plate) {         // Plate in box has to be ours
        if (!isKin(a,sn)) {
          miscarry();           // opps
          return true;
        }
      } else if (a is Empty) {
        plateSite(sn,false);
        ++kids;
      }
    }

    return kids > 0u; // Plated anybody
  }

  Void plateSite(SN sn,Bool resetBounds) {
    if (mPhase == cPHASE_INIT ||  // If haven't started yet, or
        !addChild(sn)) {          // we fail to plate
      die();                      // that's bad
      return;
    }
    Self & kid = (Self&) ew[sn];
        
    C2D c = md.getSiteCoord(sn); 
    C2D abs = c+mLocation.toC2D();
    B2D b(abs);
    if (!b.isValid()) die();

    kid.mPhase = (Phase) (mPhase - 1u); // Kid starts on previous phase
    kid.mRGBState = cRED_STATE;   // And you're red
    kid.mLocation = b;            // And you are here (in whatever reference prevails)
    if (resetBounds) {
      kid.mMin = kid.mMax = kid.mLocation; // For minning and maxing, start with yourself
    }
  }

  Void behave() {
    if (update()) return; // Check priority
  }

}
