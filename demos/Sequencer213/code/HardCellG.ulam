quark QHardCellG : QHardCell {
  typedef Unsigned(3) NChan;

  constant Unsigned cWDOG_BITS = 4u;
  constant Unsigned cWDOG_TRIG = 10u;
  constant Unsigned cWDOG_KSHF = 250u;
  typedef XTimer(cWDOG_BITS, cWDOG_TRIG, cWDOG_KSHF) HardCellWatchdog;
  HardCellWatchdog mHardCellWatchdog;

  /* XXX
  typedef XTimer(4u,10u,100u) RootWatchdog; 
  RootWatchdog mRootWatchdog; // Make root bail faster
  */

  //// QHardCell API
  @Override
  virtual Bool countWatchdog() { return mHardCellWatchdog.countAlarm(); }

  @Override
  virtual Void resetWatchdog() { mHardCellWatchdog.reset(); }

  @Override
  virtual Atom toSpawn() { 
    print("HCGTSP0");
    print(self);
    print("HCGTSP10");
    HardCellG hg;
    BaseClassUtils bcu;
    bcu.copySharedData(self.atomof, hg.atomof);
    print(hg);
    //    Self & hgr = hg;
    //    hgr = self;  // Init from our fields
    print("HCGTSP11");
    print(hg);
    return hg.atomof;
  }

  Bool rootAlarm() { return mHardCellWatchdog.current() >= cWDOG_TRIG-2u; }

  //// DEWLine API
  @Override
  virtual DefCon signalDC() { // HC3 signals 'contact' or 'damage'
    return isTail() ? cDC_CONT : cDC_DAMG; 
  }


  typedef EventWindow.SiteNum SN;
  typedef Unsigned(5) HopCount;
  constant HopCount cMAX_MAX_HOPS = 16u;
  constant HopCount cMIN_MAX_HOPS = QHardCell.cMIN_DOWN_SETTLED + 1u;
  HopCount mMaxHops;

  Bool isTail() { return mUpHops == mMaxHops - 1u; }

  constant Unsigned cDIFFUSE_ODDS = 1u;

  HopCount mUpHops = HopCount.maxof;//cMAX_HOPS;

  HopCount mSettledDownHops = 0u;

  //  typedef NChan NColor[3];
  //  NColor mColor;

  /*
  Super.ContactWarnings mContactWarnings;
  @Override
  virtual ContactWarnings getContactWarnings() {
    return mContactWarnings;
  }
  @Override
  virtual Void setContactWarnings(ContactWarnings cw) {
    mContactWarnings = cw;
  }
  */

  /*
  Void mutateColor() {
    Random random;
    for (Unsigned i = 0u; i < mColor.lengthof; ++i) {
      Int delta = random.between(-3,3);
      mColor[i] = (NChan) (mColor[i] + delta);
    }
  }
  */

  ARGB baseColor() {
    ColorUtils cu;
    return cu.color(0xff808080); // ?
    /*
    return cu.color((ASCII) (mColor[0]*12*2 + 70),
                    (ASCII) (mColor[1]*12*2 + 70),
                    (ASCII) (mColor[2]*12*2 + 70));
    */
  }

  ARGB getColorDefault() {
    ColorUtils cu;
    Unsigned hc = getUpHops();
    Unsigned maxhc = getMaxHopsGoal();
    if (hc >= maxhc) {
      return cu.color(0xff, 0xff, 0x00);
    }
    Unsigned closeness = maxhc - hc;
    Unsigned pct = 30u + 40u * closeness / maxhc;
    ARGB base = baseColor();
    ARGB black;
    ARGB ret = cu.between(base,black,pct);
    Unsigned max = maxDCs();
    if (max > 0u)
      return cu.color(0xff,0u,0u);
    return ret;
  }
  
  ARGB getColorMinSettled() {
    ColorUtils cu;
    Unsigned dh = getSettledDownHops();
    Unsigned mdh = cMIN_DOWN_SETTLED;

    Unsigned dsh = getDSHops();
    Unsigned mdsh = DSHops.maxof;
    ARGB dscol = cu.color(0xff0000ff); // bluer closer to DS?
    Unsigned pctds = 50u*(mdsh-dsh)/mdsh; // max 50% DS bias

    ARGB basecol;
    if (dh > mdh) basecol = cu.color(0xffffffff);
    else basecol = cu.between(cu.color(0xffffff00),
                              cu.color(0xff000000),
                              100u * dh / mdh);
    return cu.between(dscol, basecol, pctds);
  }

  //// UrSelf API
  @Override
  virtual ARGB getColor(Unsigned selector) {
    if (selector == 2u) return getColorMinSettled();
    if (selector == 1u) return getColorDefault();
    return super.getColor(selector);
  }

  //// QHardCell API
  @Override
  virtual Unsigned getMaxHopsGoal() { return mMaxHops; }
  @Override
  virtual Void setMaxHopsGoal(Unsigned maxup) {
    if (maxup > mMaxHops.maxof) {
      Fail f;
      f.fail("QHardCell maxup too big");
    }
    mMaxHops = (HopCount) maxup;
  }


  @Override
  virtual Unsigned getUpHops() { return mUpHops; }
  @Override
  virtual Void setUpHops(Unsigned uphops) { mUpHops = (HopCount) uphops; }

  @Override
  virtual Unsigned getSettledDownHops() { return mSettledDownHops; }
  @Override
  virtual Void setSettledDownHops(Unsigned settledown) { mSettledDownHops = (HopCount) settledown; }

  @Override
  virtual Void initCopy() {
    super.initCopy();
    //    mutateColor();
  }

  Void behave() {
    pursueIntention();
    /*
    ByteStreamLogger bsl;
    if (!update()) return;
    */
    /*
    bsl.printf("al %d una %d\n",
               hcs.mAlignedCount,
               hcs.mUnalignedCount);
    */
  }
}

/** HardCellG: A Growable Low-Density Mobile Grid
   \symbol HG
   \color 0xf0f0f0
 */
element HardCellG : QHardCellG
  + QDSHopsStg
{

  typedef Unsigned(2) CmdPhase;
  constant CmdPhase cCMD_MOVE = 0u;
  constant CmdPhase cCMD_STOP = 1u;
  constant CmdPhase cCMD_GROW = 2u;
  constant CmdPhase cCMD_WAIT = 3u;
  CmdPhase mCmdPhase = cCMD_MOVE;

  Void makeRoot() {
    Random random;
    setUpHops(0u);                       // You are root
    mMaxHops = (HopCount) (Parms.cSEED_HG_LARGE_MIN_MAXHOPS ?
                           9u : cMIN_MAX_HOPS); // of (appropriately) min size
    changeDir(); // and a random dir
  }

  typedef Int(5) DirSpeed;
  constant DirSpeed cMAX_NW = DirSpeed.minof + 1;
  constant DirSpeed cMAX_SE = -cMAX_NW;
  DirSpeed mDirs[2];

  @Override
  virtual Bool rootBehave(QHardCellState & qcs) {
    HC3State &hcs = qcs.getHC3State();
    DebugUtils du;
    /// AM I ROOT?
    if (mUpHops != 0u) return false;
    /// I AM ROOT.

    /// AM I ALIVE?
    if (rootAlarm()) return die(); // NO I WAS STUCK TOOO LONG
    /// I AM ALIVE.

    /// AM I BLOCKED BY UNSETTLED DOWNSTREAM?
    Unsigned unsettledDown = getSettledDownHops();
    if (unsettledDown < cMIN_DOWN_SETTLED) {
      return qcs.block(); // we have to wait
    }
    /// DOWNSTREAM IS ALIGNED WITH ME SUFFICIENTLY FOR MOVING

    Random random;
    EventWindow ew;
    which (mCmdPhase) {
    case cCMD_MOVE: {
      /// TRY TO GROW NOW?
      if (mMaxHops < cMAX_MAX_HOPS && random.oneIn(20u)) {
        mCmdPhase = cCMD_STOP;
        return true; // YES
      }
      /// NOT TRYING TO GROW NOW.
      SN sn = pickDir(cDIFFUSE_ODDS);
      // Reroute if heading into trouble
      if (mDefCons[sn-1u] == 0u &&
          ew.isAccessible(sn) && ew[sn] is Empty) {
        setSettledDownHops(0u);
        moveEntourage(qcs,sn);
        return true; // CANNOT SAFELY CALL (eg) done() HERE!
      }
      changeDir();
      return true;
    }
    case cCMD_STOP: {
      /// ROOM TO GROW?
      if (mMaxHops >= cMAX_MAX_HOPS) {
        mCmdPhase = cCMD_MOVE; // No
        return true; 
      }
      /// ROOM TO GROW.
      /// STABLE TO EDGE?
      if (unsettledDown < mMaxHops - 1u) {
        // NO, GIVE UP?
        if (random.oneIn(50u)) {
          mCmdPhase = cCMD_MOVE; // YES
        }
        return true;
      }
      /// STABLE TO EDGE.
      /// ALL CLEAR AROUND?
      Bool opensky = true;
      for (Unsigned i = 0u; opensky && i < 4u; ++i) {
        if (mDefCons[i] != 0u) {
          opensky = false;
          break;
        }
      }
      if (!opensky) {
        /// NOT CLEAR.
        /// GIVE UP?
        if (random.oneIn(5u)) {
          mCmdPhase = cCMD_MOVE; // YES
          return true;
        }
        return false;
      }
      /// ALL CLEAR AROUND.
      {
        du.print("GROWBOMB!");
        du.print(unsettledDown);
        du.print(mMaxHops);
        ++mMaxHops;
        setSettledDownHops(0u);
        resetWatchdog(); // I AM GROWBLE
        mCmdPhase = cCMD_GROW;
      }
      return true;
    }
    case cCMD_GROW: {
      /// STABLE TO EDGE?
      if (unsettledDown < mMaxHops - 1u) {
        /// NO. GIVE UP ANYWAY?
        if (random.oneIn(50u)) {
          mCmdPhase = cCMD_MOVE; // YES
          return true;
        }
        return false;
      }
      /// STABLE TO EDGE.
      mCmdPhase = cCMD_MOVE; // YES
      return true;
    }
    }
    return false;
  }

  Void changeDir() {
    Random random;
    Bool moving = false;
    while (!moving) {
      for (Unsigned i = 0u; i < mDirs.lengthof; ++i) {
        mDirs[i] = (DirSpeed) random.between(cMAX_NW, cMAX_SE);
        if (mDirs[i] != 0) moving = true;
      }
    }
  }

  SN updatePick(SN curpick, SN newdir, Unsigned & totwgt, Int newwgt) {
    Random random;
    if (newwgt < 0) {
      newdir += 2u;  // 1=>3, 2=>4
      newwgt = -newwgt;
    }
    Unsigned wgt = (Unsigned) newwgt;
    totwgt += wgt;
    if (random.oddsOf(wgt, totwgt))
      curpick = newdir;
    return curpick;
  }

  SN pickDir(Unsigned diffuseOdds) {
    Random random;
    Unsigned totw = diffuseOdds;
    SN curPick = (SN) random.between(1u,4u);
    for (Unsigned i = 0u; i < mDirs.lengthof; ++i) {
      curPick = updatePick(curPick, (SN) (i+1u), totw, mDirs[i]);
    }
    return curPick;
  }
}

