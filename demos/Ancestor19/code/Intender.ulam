quark Intender + QDebugUtils {
  typedef ClassUtils.ClassId ClassId;

  //// Intender API
  virtual ClassId getIntentionClass() ;

  //// Intender SERVICES
  constant Unsigned cMAX_RECAST_SIZE = 4096u;
  typedef BitStorageT(cMAX_RECAST_SIZE) IntentionBuffer;
  
  Bool trueFail(String msg) {
    voidFail(msg);
    return true; // Not reached
  }
  
  Void voidFail(String msg) {
    Fail f;
    f.fail(msg);
  }

  Bool pursueIntention() {
    mD&&pR(""); // empty line to signal start of intender processing
    ClassId cid = getIntentionClass();
    if (cid == 0u) return false; // We have no intention?
    mD&&pR("SIND10");

    ClassUtils cu;
    if (!cu.isBase(cid, Intention.classidof))
      return trueFail("Not Intention");
    mD&&pR("SIND11");

    IntentionBuffer ib;
    Intention & intent = (Intention&) ib.recast(cid,true);

    mD&&pR("SIND12");
    if (intent.init(self)) return true;

    mD&&pR("SIND13");
    //    mD&&pR(intent);
    if (intent.pursue(self)) return true;

    mD&&pR("SIND14");

    //// INTENTIONS GOT NOWHERE THIS TIME, BOSS..
    return false;
  }
}

transient NullIntention : Intention {
}

quark NullIntender : Intender {
  virtual ClassId getIntentionClass() {
    return NullIntention.classidof;
  }
}
