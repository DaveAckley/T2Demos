quark Trailer : Printer + AtomUtils {
  ////SPOT API
  virtual Int priority() { return cTRUCK_PRIORITY; }

  Bool mDead;
  //// Printer API
  Bool die() { mDead = true; return true; }
  Bool isDead() { return mDead; }

  Bool update() {
    if (super.update()) return true;
    if (processDeath()) return true;
    if (!(ew[1] is Truck)) {
      du.printContext();
      return die();
    }
    return false;
  }

  Void behave() {
    update();
  }

}

/** An empty, place-holder Trailer.
    \symbol UT
    \color #552
 */
element UnloadedTrailer : Trailer {
  Bool mDeparted;  // Get neighbors before departing
  B2D.BCoord mStepsTilPickup;
}

/** A Trailer containing all the user state bits of one atom.
    \symbol LT
    \color #111
 */
element LoadedTrailer : Trailer + PackedMid + PackedBack {
}
