
element Demo : QChain {
  //// QChain API
  @Override
  virtual Bool chainOp(QChainState & cs) {
    //// ARE WE A HEAD?
    if (!isHead()) return false;
    //// WE ARE A HEAD.
    
    EventWindow ew;
    Random random;
    PocketHC3 & p = cs.mPocket;

    //// IS DOWNSTREAM A TEMP?
    SN downsn = cs.mEWSNMate[Segment.cBODY_DOWN];
    if (downsn == 0u) return false; // No mate??

    Atom & a = ew[downsn];
    if (a as QChain) {
      if (a.mDSType != cDS_DOWN &&
          a.mDSType != cDS_UP) return false; // mate not temp
    } else return false;                     // mate not qchain??
    //// DOWNSTREAM IS A TEMP.

    // Search adjacent pockets for a tail
    Unsigned tailcount = 0u;
    SN tailside, tailsn;
    for (SN side = 1u; side <= 4u; ++side) {
      RectIterator ri;
      if (!p.initIterator(ri)) continue;
      while (ri.hasNext()) {
        C2D n = ri.next();
        Atom & a = ew[n];
        if (a as QChain) {
          if (a.isTail()) {
            if (random.oneIn(++tailcount)) {
              tailside = side;
              tailsn = ew.getSiteNumber(n);
            }
          }
        } else continue;
      }
    }
    if (tailcount == 0u) return false;
    //// LINK UP WITH tailsn
    QChain & qtail = (QChain &) ew[tailsn];
    Clasp clasp;                // new
    QChain & qc = clasp;
    qc = self;                  // copy qchain data
    clasp.mPocketPtrs[cBODY_DOWN] = (PocketPtr) tailside;
    qtail.mPocketPtrs[cBODY_UP] = (PocketPtr) (5u - tailside);
    ew[0] = clasp.atomof;

    return true;
  }
  Void behave() {
    update();
  }
}

element SeedDemo : XTimer(3u,6u,2u) {
  EventWindow ew;
  Random random;
  Void die() { ew[0] = Empty.instanceof; }
  Void diffuse() {
    EventWindow.SiteNum n = (EventWindow.SiteNum) random.between(1,4);
    if (ew.isEmpty(n))
      ew.swap(0u,n);
  }
  Void behave() {
    if (countAlarm()) return die(); // one shot lives to shoot
    
    PocketHC3 p;
    PocketHC3.Status pstat = p.init();
    if (pstat == PocketHC3.cSTATUS_EDGE) return diffuse(); // seek greener pastures
    if (pstat == PocketHC3.cSTATUS_OPEN) return die();     // give up
    if (pstat == PocketHC3.cSTATUS_BENT) return;           // wait for clarity

    Demo d;
    d.mSegsDown = 0u;
    d.mTempsDown = 0u;
    d.mDSType = Demo.cDS_NORM;
    d.mPocketPtrs[Segment.cBODY_UP] = Segment.cPP_NULL; // you're the head
    d.mPocketPtrs[Segment.cBODY_DOWN] = Segment.cPP_NULL; // you're also the tail (for now)
    ew[0] = d.atomof;
    return;
  }
}
