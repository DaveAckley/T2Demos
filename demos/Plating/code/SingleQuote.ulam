transient QuotationManager {
  EventWindow ew;
  typedef EventWindow.SiteNum SN;
  /*
  constant C2D c0x0 = { .x = 0, .y = 0 };
  constant C2D c0x1 = { .x = 0, .y = 1 };
  constant C2D c1x2 = { .x = 1, .y = 2 };
  */
  Bool quoteAtomIntoEW(C2D ewc1, Atom atom, Plate & intoPlate) {
    DebugUtils du;
    if (!intoPlate.isEmptyOrPlate(ewc1)) return false;

    C2D ewc2 = ewc1+PlateUtils.c0x1;
    if (!intoPlate.isEmptyOrPlate(ewc2)) return false;

    return quoteAtomIntoAtoms(atom, ew[ewc1], ew[ewc2]);
  }

  Void initAtomsToSQPair(Atom& dest1, Atom& dest2) {
    SingleQuote sq1;
    sq1.setSizeOfPlate(PlateUtils.c1x2);
    sq1.setPositionOnPlate(PlateUtils.c0x0);
    dest1 = sq1;

    SingleQuote sq2;
    sq2.setSizeOfPlate(PlateUtils.c1x2);
    sq2.setPositionOnPlate(PlateUtils.c0x1);
    dest2 = sq2;
  }

  Bool quoteAtomIntoAtoms(Atom source, Atom & dest1, Atom & dest2) {
    SingleQuote sq1;
    sq1.setSizeOfPlate(PlateUtils.c1x2);
    sq1.setPositionOnPlate(PlateUtils.c0x0);

    SingleQuote sq2;
    sq2.setSizeOfPlate(PlateUtils.c1x2);
    sq2.setPositionOnPlate(PlateUtils.c0x1);

    if (!sq1.writeAtomIntoSQs(source,sq2)) return false;

    dest1 = sq1.atomof;
    dest2 = sq2.atomof;
    return true;
  }

  Bool isDequotableFromEW(C2D ewc) {
    SN sn1 = ew.getSiteNumber(ewc);
    SN sn2 = ew.getSiteNumber(ewc+PlateUtils.c0x1);
    if (!ew.isAccessible(sn1) || !ew.isAccessible(sn2))
      return false;
    return isDequotableFromAtoms(ew[sn1], ew[sn2]);
  }

  Bool isDequotableFromAtoms(Atom& a1, Atom& a2) {
    if (a1 as SingleQuote) {
      if (a1.positionOnPlate() == PlateUtils.c0x0) {
        if (a2 as SingleQuote) {
          if (a2.positionOnPlate() == PlateUtils.c0x1)
            return true;
        }
      }
    }
    return false;
  }

  Bool dequoteAtomFromEW(C2D ewc, Atom & atom, Bool deleteIt) {
    if (!isDequotableFromEW(ewc)) return false;
    SN sn1 = ew.getSiteNumber(ewc);
    SN sn2 = ew.getSiteNumber(ewc+PlateUtils.c0x1);
    if (!dequoteAtomFromAtoms(atom, ew[sn1], ew[sn2])) return false;
    if (deleteIt) {
      ew[sn1] = Empty.instanceof;
      ew[sn2] = Empty.instanceof;
    }
    return true;
  }

  Bool dequoteAtomFromAtoms(Atom& dest, Atom& a1, Atom& a2) {
    if (a1 as SingleQuote) {
      if (a2 as SingleQuote) {
        if (a1.readAtomFromSQs(a1.getNonemptyMask(), dest,a2,true))
          return true;
      }
    }
    return false;
  }
}

/** An single atom, quoted.
    \symbol SQ
    \color #6a6
*/
element SingleQuote : B2DPlate2 + CategorizedSite {
  typedef EventWindow.SiteNum SN;

  typedef Unsigned(2) BufferStatus;
  constant BufferStatus cBUFFER_EMPTY = 0u;      //< mPacketBuffer is empty
  constant BufferStatus cLEFTBOUND_PACKET = 1u;  //< mPacketBuffer contains a leftbound packet
  constant BufferStatus cRIGHTBOUND_PACKET = 2u; //< mPacketBuffer contains a rightbound packet
  constant BufferStatus cBUFFER_FULL = 3u;       //< mPacketBuffer contains a stationay packet
  BufferStatus mBufferStatus;
  typedef Bits(4) StatusMask;
  BufferStatus getStatus() { return mBufferStatus; }
  StatusMask getNonemptyMask() {
    return
      (1u<<cLEFTBOUND_PACKET) |
      (1u<<cRIGHTBOUND_PACKET) |
      (1u<<cBUFFER_FULL);
  }
  StatusMask getDirMask(Bool left) {
    return (StatusMask) (1u<<(left ? cLEFTBOUND_PACKET : cRIGHTBOUND_PACKET));
  }
  Bool inState(StatusMask mask) {
    return ((1u<<mBufferStatus)&mask)!=0u;
  }
  Bool isEmpty() {
    return mBufferStatus == cBUFFER_EMPTY;
  }
  Void setStatus(BufferStatus bs) {
    mBufferStatus = bs;
  }

  constant Unsigned cPAYLOAD_BITS = 48u;
  typedef Bits(cPAYLOAD_BITS) Bits48;
  typedef Bits48 MyPayload;

  constant Unsigned cPAYLOAD_TO_RAWBITS_SHIFT = 64u - cPAYLOAD_BITS;
  MyPayload mPayload;


  //// URSELF API
  @Override
  virtual ARGB getColor(Unsigned selector) {
    ARGB ret = super.getColor(selector);
    if (!isEmpty()) {
      ColorUtils cu;
      MyPayload paysmash = 0xff000000 |
        (((mPayload >> 24)&0xffffff) ^
         ((mPayload >>  0)&0xffffff));
      ret = cu.between(cu.color((Bits) paysmash),ret,40);
    }
    return ret;
  }

  Void writeAtomToPayloads(Atom atom, MyPayload & pay1, MyPayload & pay2) {
    DebugUtils du;
    du.print("WATPLD 10");
    AtomUtils au;
    Bits b1,b2;
    b1 = au.read(atom,0u,32u);
    b2 = au.read(atom,32u,16u);
    du.print((Unsigned) b1);
    du.print((Unsigned) b2);

    pay1 = (MyPayload) ((((Bits48) b1) << 16) | b2);
    b1 = au.read(atom,48u,32u);
    b2 = au.read(atom,80u,16u);
    du.print((Unsigned) b1);
    du.print((Unsigned) b2);
    pay2 = (MyPayload) ((((Bits48) b1) << 16) | b2);
    du.print("WATPLD 11");
  }

  Atom readAtomFromPayloads(MyPayload pay1, MyPayload pay2) {
    AtomUtils au;
    Bits b;
    Atom ret;
    ret = au.writeCopy(ret, (Bits) (pay1>>16u), 0u, 32u);
    ret = au.writeCopy(ret, (Bits) (pay1>>0u), 32u, 16u);
    ret = au.writeCopy(ret, (Bits) (pay2>>16u),48u, 32u);
    ret = au.writeCopy(ret, (Bits) (pay2>>0u), 80u, 16u);
    return ret;
  }

  Bool getSNPair(SN & sn1, SN & sn2) {
    EventWindow ew;
    C2D size = sizeOfPlate();
    if (size.getX() < 1 || size.getY() < 2)
      return false;
    SN s1 = plateCoordToEWSN(C2D.instanceof(0,0));
    SN s2 = plateCoordToEWSN(C2D.instanceof(0,1));
    if (!ew.isAccessible(s1) || !ew.isAccessible(s2))
      return false;
    if (!(ew[s1] is Self) || !(ew[s2] is Self))
      return false;
    sn1 = s1;
    sn2 = s2;
    return true;
  }

  Bool writeAtomIntoPlate(Atom atom) {
    SN sn1, sn2;
    if (!getSNPair(sn1,sn2)) return false;
    EventWindow ew;
    Self & s1 = (Self&) ew[sn1];
    Self & s2 = (Self&) ew[sn2];
    return s1.writeAtomIntoSQs(atom, s2);
  }

  Bool writeAtomIntoSQs(Atom atom, Self& s2) {
    DebugUtils du;
    du.print("ISAISQ 10");
    du.printContext();
    du.print((Unsigned) self.mBufferStatus);
    du.print((Unsigned) s2.mBufferStatus);
    if (!self.isEmpty() || !s2.isEmpty()) return false;
    du.print("ISAISQ 11");
    du.print(atom);
    writeAtomToPayloads(atom, self.mPayload, s2.mPayload);
    self.setStatus(cBUFFER_FULL);
    s2.setStatus(cBUFFER_FULL);
    return true;
  }

  Bool readAtomFromPlate(Bool leftbound, Atom & atom, Bool delete) {
    SN sn1, sn2;
    if (!getSNPair(sn1,sn2)) return false;
    EventWindow ew;
    Self & s1 = (Self&) ew[sn1];
    Self & s2 = (Self&) ew[sn2];
    return s1.readAtomFromSQs(s1.getDirMask(leftbound), atom, s2, delete);
  }

  Bool readAtomFromSQs(StatusMask statusmask, Atom& atom, Self& s2, Bool delete) {
    if (!self.inState(statusmask)) return false;
    atom = readAtomFromPayloads(self.mPayload,s2.mPayload);
    if (delete) {
      self.setStatus(cBUFFER_EMPTY);
      s2.setStatus(cBUFFER_EMPTY);
    }
    return true;
  }

  /*
  Bool removeAtomFromPlate(Atom & atom) {
    SN sn1, sn2;
    if (!getSNPair(sn1,sn2)) return false;
    EventWindow ew;
    Self & s1 = (Self&) ew[sn1];
    Self & s2 = (Self&) ew[sn2];
    return s1.removeAtomFromSQs(atom, s2);
  }

  Bool removeAtomFromSQs(Atom& atom, Self& s2) {
    if (self.isEmpty() || s2.isEmpty()) return false;
    atom = readAtomFromPayloads(self.mPayload,s2.mPayload);
    self.setStatus(cBUFFER_EMPTY);
    s2.setStatus(cBUFFER_EMPTY);
    return true;
  }
  */
}

quark SingleQuoteUtils {
  
  /**
     parent must be in ew
   */ 
  Bool createAtomSubplateIn(Plate& parent, C2D subplatepos0, Atom inatom) {
    C2D y1(0,1);
    C2D subplatepos1 = subplatepos0 + y1;
    if (!parent.isPlateFieldCoord(subplatepos0)) return false;
    if (!parent.isPlateFieldCoord(subplatepos1)) return false;
    C2D parentpos = parent.positionOnPlate();
    C2D parentewc = parent.getOurEWCoord();
    C2D suboff = subplatepos0 - parentpos;
    C2D subplateewc0 = parentewc + suboff;
    C2D subplateewc1 = subplateewc0 + y1;
    EventWindow ew;
    if (!ew.isAccessible(subplateewc0)) return false;
    if (!ew.isAccessible(subplateewc1)) return false;

    {
      Fail f; f.fail("XXXX FINISHE ME");
    }
      
  }

  Bool createSingleQuoteAtEWC(C2D ewc0, Atom inatom) {
    EventWindow ew;
    if (!ew.isAccessible(ewc0)) return false;
    Atom & a0 = ew[ewc0];
    if (!(a0 is Empty)) return false;
    C2D ewc1 = ewc0 + C2D.instanceof(0,1);
    if (!ew.isAccessible(ewc1)) return false;
    Atom & a1 = ew[ewc1];
    if (!(a1 is Empty)) return false;
    SingleQuote ap;
    a0 = ap;
    a1 = ap;
    SingleQuote & ap0 = (SingleQuote &) a0;
    SingleQuote & ap1 = (SingleQuote &) a1;
    ap0.setSizeOfPlate(C2D.instanceof(1,2));
    ap1.setSizeOfPlate(C2D.instanceof(1,2));
    ap0.setPositionOnPlate(C2D.instanceof(0,0));
    ap1.setPositionOnPlate(C2D.instanceof(0,1));
    return ap0.writeAtomIntoPlate(inatom);
  }
    
  /*
  Bool destroySingleQuoteAt(C2D ewc0, Atom & outatom) {
    EventWindow ew;
    if (!ew.isAccessible(ewc0)) return false;
    Atom & a0 = ew[ewc0];
    if (!(a0 is SingleQuote)) return false;
    C2D ewc1 = ewc0 + C2D.instanceof(0,1);
    if (!ew.isAccessible(ewc1)) return false;
    Atom & a1 = ew[ewc1];
    if (!(a1 is SingleQuote)) return false;
    SingleQuote & ap0 = (SingleQuote &) a0;
    SingleQuote & ap1 = (SingleQuote &) a1;
    if (ap0.sizeOfPlate() != C2D.instanceof(1,2)) return false;
    if (ap1.sizeOfPlate() != C2D.instanceof(1,2)) return false;
    if (ap0.positionOnPlate() != C2D.instanceof(0,0)) return false;
    if (ap1.positionOnPlate() != C2D.instanceof(0,1)) return false;
    Atom a;
    Bool ret = ap0.readAtomFromPlate(a,false);
    if (ret) {
      outatom = a;
      a0 = Empty.instanceof;
      a1 = Empty.instanceof;
    }
    return ret;
  }
  */


}
