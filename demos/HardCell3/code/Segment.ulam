transient SegmentState {
  typedef EventWindow.SiteNum SN;
  typedef Segment.PocketPtr PocketPtr;

  EventWindow ew;
  Random random;
  DebugUtils du;
  PocketHC3 mPocket;

  // availability data valid after findAvailable returns true
  SN mEWSNAvailables[Segment.cPP_EAST+1u]; // 0..4 
  Unsigned mPocketSize[Segment.cPP_EAST+1u]; // 0..4 
  Unsigned mPocketUsCount[Segment.cPP_EAST+1u]; // 0..4 
  Unsigned mPocketFull[Segment.cPP_EAST+1u]; // 0..4 
  Unsigned mPocketEmpty[Segment.cPP_EAST+1u]; // 0..4 
  Unsigned mPocketInaccessible[Segment.cPP_EAST+1u]; // 0..4 

  // inaccess data valid after findMate returns UNSURE
  Unsigned mInaccessibleInMateDir[Segment.cBODY_DOWN+1u]; 

  // mate data valid after findMate returns OK
  SN mEWSNMate[Segment.cBODY_DOWN+1u];
  PocketPtr mPocketWithMate[Segment.cBODY_DOWN+1u] = { Segment.cPP_NULL, Segment.cPP_NULL };

  //// SegmentState API
  virtual Bool init(Segment & seg) {
    if (mPocket.init() != PocketHC3.cSTATUS_OK) return true; // Distorted pocket
    return false;
  }

  /*
  virtual Bool doSwap(Segment & seg, Segment.BodyDir bd) {
    Fail f;
    f.fail("doSwap IMPLEMENT ME");
    return true;
  }

  
  virtual Bool doGrow(Segment & seg, Segment.BodyDir bd) {
    Fail f;
    f.fail("doGrow IMPLEMENT ME");
    return true;
  }
  */

  //// SegmentState SERVICES
  Segment.MateStatus findMate(Segment & seg, Segment.BodyDir bd) {
    PocketPtr ngb = seg.mPocketPtrs[bd];

    if (ngb == Segment.cPP_NULL)
      return Segment.cMATE_OK;  // happy on my own

    RectIterator ri;
    if (!mPocket.initIterator(ri, ngb, true))
      return Segment.cMATE_POCKET; // Can't iterate that

    SN matesn;
    Unsigned matches = 0u;
    Unsigned inaccess = 0u;
    while (ri.hasNext() && matches < 2u) {
      C2D n = ri.next();
      if (!ew.isAccessible(n)) { ++inaccess; continue; }

      Atom & a = ew[n];
      if (a as Segment) {
        if (seg.inMyGroup(a)) {
          PocketPtr themp = a.mPocketPtrs[1u-bd];
          Bool bothHere = themp == 0u && ngb == 0u;
          Bool opposites = themp == 5u-ngb;
          if (opposites || bothHere) { // are they pointing back at us?
            if (random.oneIn(++matches)) 
              matesn = ew.getSiteNumber(n);     // good candidate
          }
        }
      }
    }
    mInaccessibleInMateDir[bd] = inaccess;
    if (matches == 0u)
      return (inaccess > 0u) ? Segment.cMATE_UNSURE : Segment.cMATE_MISSING;

    if (matches > 1u) return Segment.cMATE_WRONG; // Multi pointing at us?

    // Stash findings
    mEWSNMate[bd] = matesn;
    mPocketWithMate[bd] = ngb;

    return Segment.cMATE_OK;
  }
}

quark Segment {
  typedef EventWindow.SiteNum SN;

  typedef Unsigned(3) PocketPtr;
  constant PocketPtr cPP_SELF  = 0u;  //< Ptr center
  constant PocketPtr cPP_WEST  = 1u;  //< Ptr west
  constant PocketPtr cPP_NORTH = 2u;  //< Ptr north
  constant PocketPtr cPP_SOUTH = 3u;  //< Ptr south
  constant PocketPtr cPP_EAST  = 4u;  //< Ptr east
  constant PocketPtr cPP_RSRV1 = 5u;  //< Don't use
  constant PocketPtr cPP_RSRV2 = 6u;  //< Don't use
  constant PocketPtr cPP_NULL  = 7u;  //< Null pointer

  PocketPtr clockwise(PocketPtr from) {
    which (from) {
    case cPP_WEST:  { return cPP_NORTH; }
    case cPP_NORTH: { return cPP_EAST; }
    case cPP_EAST:  { return cPP_SOUTH; }
    case cPP_SOUTH: { return cPP_WEST; }
    otherwise: { return from; }
    }
  }

  PocketPtr counterclockwise(PocketPtr from) {
    which (from) {
    case cPP_WEST:  { return cPP_SOUTH; }
    case cPP_SOUTH: { return cPP_EAST; }
    case cPP_EAST:  { return cPP_NORTH; }
    case cPP_NORTH: { return cPP_WEST; }
    otherwise: { return from; }
    }
  }

  typedef Unsigned(1) BodyDir;
  constant BodyDir cBODY_UP = 0u;
  constant BodyDir cBODY_DOWN = 1u;
  typedef PocketPtr PocketPtrs[BodyDir.maxof+1u];
  PocketPtrs mPocketPtrs  = { Segment.cPP_NULL, Segment.cPP_NULL }; // fwd[0] bck[1] 6 bits total

  //// Segment API
  /** Determine if a another segment might be part of my chain. 

      Used to help rule out spurious matches in other pockets.

      By default, this returns \c true if and only if self and seg are
      identical concrete classes
   */
  virtual Bool inMyGroup(Segment & other) {
    ClassUtils cu;
    return cu.getClassId(self) == cu.getClassId(other);
  }

  //// Segment SERVICES
  Bool isHead() { return mPocketPtrs[cBODY_UP] == cPP_NULL; }
  Bool isTail() { return mPocketPtrs[cBODY_DOWN] == cPP_NULL; }
  Bool isMiddle() { return !isHead() && !isTail(); }

  PocketPtr reversePocket(PocketPtr ptr) {
    if (ptr == cPP_NULL || ptr == cPP_SELF) return ptr;
    if (ptr > cPP_EAST) { Fail f; f.fail("BAD PTR"); }
    return (PocketPtr) (5u - ptr);
  }

  typedef Unsigned MateStatus;
  constant MateStatus cMATE_OK      = 0u; //< All needed mate(s) located consistently
  constant MateStatus cMATE_POCKET  = 1u; //< Bad pocket can't search
  constant MateStatus cMATE_UNSURE  = 2u; //< At least one mate missing but some sites inaccessible
  constant MateStatus cMATE_MISSING = 3u; //< At least one mate is definitely missing
  constant MateStatus cMATE_WRONG   = 4u; //< At least one mate is inconsistent with us
  
  /** 
   */
  MateStatus findMates(SegmentState & ss) {
    MateStatus ret = cMATE_OK; // optimism
    for (Unsigned i = 0u; i < 2u; ++i) {
      BodyDir bdir = (BodyDir) i;
      PocketPtr ptr = mPocketPtrs[bdir];
      if (ptr != cPP_NULL) {
        MateStatus ms = ss.findMate(self, bdir);
        if (ms > ret) ret = ms; 
      }
    }
    return ret;
  }

  /** false if any bad pockets else true
      (Note all pockets are checked; caller can 
      iterate over ss.mPocketFull[..] etc even
      if false is returned here)
   */
  Bool findAvailables(SegmentState & ss) {
    Bool sallgood = true;
    for (PocketPtr ngb = cPP_SELF; ngb <= cPP_EAST; ++ngb) {
      if (!findAvailable(ss,ngb))
        sallgood = false;
    }
    return sallgood;
  }
  
  /** true if pocket good, false if the pocket's unstable.
   */
  Bool findAvailable(SegmentState & ss, PocketPtr ptr) {
    EventWindow ew;
    Random random;
    if (ptr > cPP_EAST) { Fail f; f.fail("BAD ARG PTR"); }
    RectIterator ri;
    if (!ss.mPocket.initIterator(ri, ptr, true))
      return false; // Can't iterate that

    SN randemp = SN.maxof;
    Unsigned pocketsize, empcount, inaccesscount, uscount;
    while (ri.hasNext()) {
      ++pocketsize;
      C2D n = ri.next();
      if (!ew.isAccessible(n)) { ++inaccesscount; continue; }
      Atom & a = ew[n];
      if (a is Empty && random.oneIn(++empcount)) randemp = ew.getSiteNumber(n);
      else if (a as Self) {
        if (inMyGroup(a)) ++uscount;
      }
    }

    // Stash findings
    ss.mEWSNAvailables[ptr] = randemp;
    ss.mPocketUsCount[ptr] = uscount;
    ss.mPocketSize[ptr] = pocketsize;
    ss.mPocketFull[ptr] = pocketsize - empcount;
    ss.mPocketEmpty[ptr] = empcount;
    ss.mPocketInaccessible[ptr] = inaccesscount;
    return true;
  }
}
