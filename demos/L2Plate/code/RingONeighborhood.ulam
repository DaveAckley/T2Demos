transient RingONeighborhood {
  typedef EventWindow.SiteNum SN;
  typedef RingOCircuit.SyncRelation SyncRel;
  typedef Unsigned(6) ByteCount;
  ByteCount mUpCount, mUpTrue;
  ByteCount mDownCount, mDownTrue;
  SN mSampleUpSN, mSampleDownSN;

  Void debugPrint() {
    ByteStreamLogger bsl;
    bsl.printf("[RingO uc%d ut%d usn%d dc%d dt%d dsn%d]\n",
               mUpCount, mUpTrue, mSampleUpSN,
               mDownCount, mDownTrue, mSampleDownSN);
  }

  Void countRingOState(RingO& other, RingOState & ros, SyncRel rel) {
    EventWindow ew;
    Random random;
    SN sn = ew.getSiteNumber(other);
    if (rel == RingOCircuit.cOTHER_IS_UPSTREAM) {
      if (random.oneIn(++mUpCount)) mSampleUpSN = sn;
      if (ros.mUpState) ++mUpTrue;
    } else if (rel == RingOCircuit.cOTHER_IS_DOWNSTREAM) {
      if (random.oneIn(++mDownCount)) mSampleDownSN = sn;
      if (ros.mDownState) ++mDownTrue;
    }
  }

  SN sampleInDir(SyncRel rel) {
    SN ret = SN.maxof;
    if (rel == RingOCircuit.cOTHER_IS_UPSTREAM)
      ret = mSampleUpSN;
    else if (rel == RingOCircuit.cOTHER_IS_DOWNSTREAM)
      ret = mSampleDownSN;
    else { Fail f; f.fail(); }
    return ret;
  }

  ByteCount ngbCount(SyncRel rel) {
    if (rel == RingOCircuit.cOTHER_IS_UPSTREAM)
      return mUpCount;
    if (rel == RingOCircuit.cOTHER_IS_DOWNSTREAM)
      return mDownCount;
    Fail f;
    f.fail();
    return ByteCount.minof;
  }

  Bool allDirAreVal(SyncRel rel, Bool val) {
    if (rel == RingOCircuit.cOTHER_IS_UPSTREAM) {
      if (val) return mUpCount == mUpTrue;
      else return mUpTrue == 0u;
    } else if (rel == RingOCircuit.cOTHER_IS_DOWNSTREAM) {
      if (val) return mDownCount == mDownTrue;
      else return mDownTrue == 0u;
    }
    Fail f;
    f.fail();
    return false;
  }

  Bool update(RingOCircuit & roc, RingO & me) {
    RingOState & existing = me.ringOState(roc);
    EventWindow ew;

    DebugUtils du;
    Bool blocked = false; // true if anybody said don't advance

    //// UPSTREAM PROCESSING
    if (ngbCount(RingOCircuit.cOTHER_IS_UPSTREAM) == 0u) {

      //// AT ROOT
      if (existing.mUpState == existing.mDownState) {
        if (me.rootTick(roc, self)) // rootTick must getSignals(false)/setSignals(true) as desired
          existing.mUpState = !existing.mUpState;
        else blocked = true;
      }

    } else {
      //// UP WIRE

      if (allDirAreVal(RingOCircuit.cOTHER_IS_UPSTREAM, !existing.mUpState)) {  // upstream unanimous against me

        //// UP WIRE PROPAGATION DOWN
        if (me.edge(roc, self, true, !existing.mUpState)) {
          existing.mUpState = !existing.mUpState;

          // Update our fromUp signals from random sample
          RingO & other = (RingO&) ew[mSampleUpSN];
          RingOState & othst = other.ringOState(roc);
          existing.setSignals(true, othst.getSignals(true));
        }
        else blocked = true;
      }
    }

    //// DOWNSTREAM PROCESSING
    if (ngbCount(RingOCircuit.cOTHER_IS_DOWNSTREAM) == 0u) {
      //// AT TAIL

      if (existing.mDownState != existing.mUpState) {
        if (me.tailTock(roc, self))  // tailTick must getSignals(true)/setSignals(false) as desired
          existing.mDownState = !existing.mDownState;
        else blocked = true;
      }
    } else {
      //// DOWN WIRE

      if (allDirAreVal(RingOCircuit.cOTHER_IS_DOWNSTREAM, !existing.mDownState)) { // downstream unanimous against me

        //// DOWN WIRE PROPAGATION UP
        if (me.edge(roc, self, false, !existing.mDownState)) {
          existing.mDownState = !existing.mDownState;

          // Update our !fromUp signals from random sample
          RingO & other = (RingO&) ew[mSampleDownSN];
          RingOState & othst = other.ringOState(roc);
          existing.setSignals(false, othst.getSignals(false));

        }
        else blocked = true;
      }
    }

    return blocked;
  }
  
}
