/** ColorPlate
    \symbol CP
    \color #666
 */
element ColorPlate : B2DStreamPlate + CategorizedSite + B2DStreamPayload + Stride2x2 {

  typedef EventWindow.SiteNum SN;
  DebugUtils du;

  //// B2DPlate API
  @Override
  virtual Atom copyOf() { 
    Self s = self;
    if (s.hasPayload()) { // And we don't dupe communications!
      RawBits dump;
      s.storeTo(dump);
      s.mBufferStatus = QStream12.cBUFFER_EMPTY;
    }
    return s.atomof;
  }

  constant Unsigned cTIMER_BITS = 4u;
  typedef XTimer(cTIMER_BITS,Unsigned(cTIMER_BITS).maxof,4096u) BlockDog;
  BlockDog mBlockDogTimer; //  About one in half a billion cumulative shot

  typedef Unsigned(5) Color6;
  typedef Color6 RGB6[3];
  RGB6 mColor = { 30u, 30u, 5u };
  Void setColor(ARGB color) {
    for (Unsigned i = 0u; i < 3u; ++i) {
      mColor[i] = (Color6) (color[i+1u]/4u); //8b->6b
    }
  }

  //// Plate API

  //// UrSelf API
  @Override
  ARGB getColor(Unsigned selector) {
    ColorUtils cu;

    if (self.hasPayload()) {
      return cu.color((Unsigned) (0xffff0000|self.peekAtPayload()));
    }

    ARGB ret = cu.color((ASCII) (mColor[0]<<3u),
                        (ASCII) (mColor[1]<<3u),
                        (ASCII) (mColor[2]<<3u));

    ret = cu.between(cu.color(0xff808080),ret,25);
    return ret;
  }

  Bool die() {
    du.printContext();
    du.print("DIIDDIDIEEEE");
    return true;
  }

  Bool tryInsertAtom(Bool front, Atom atom) {
    EventWindow ew;
    SN sn1 = plateCoordToEWSN(C2D.instanceof(2, front ? 1 : 3));
    if (sn1 == sn1.maxof) return false;
    C2D ewc = ew.getCoord(sn1);
    QuotationManager qm;
    return qm.quoteAtomIntoEW(ewc, atom, self);
  }

  Bool tryRemoveAtom(Bool front, Atom & atom) {
    if (tryRemoveAtomAt(front,atom,2)) return true;
    if (tryRemoveAtomAt(front,atom,3)) return true;
    return false;
  }

  Bool tryRemoveAtomAt(Bool front, Atom & atom, Int xcol) {
    EventWindow ew;
    SN sn1 = plateCoordToEWSN(C2D.instanceof((C2D.Coord) xcol, front ? 1 : 3));
    if (sn1 == sn1.maxof) return false;
    C2D ewc = ew.getCoord(sn1);
    QuotationManager qm;
    return qm.dequoteAtomFromEW(ewc, atom, true);
  }

  /** Check if site at plate (columnx,rowy) is accessible via the
   * current event window.  Note this routine can be called when self
   * is not located at ew[0], but self must be in the ew somewhere,
   * and of course ew accessibility doesn't change.
   */
  C2D getEWCoordIfItemAccessible(Int columnX, Int rowy) {
    EventWindow ew;
    EventWindow.SiteNum sn = ew.getSiteNumber(self); // Find ourselves
    if (sn != sn.maxof) {
      C2D sat = ew.getCoord(sn); // Us as coord
      C2D siz = sizeOfPlate();
      if (columnX >= 0 && columnX < siz.getX() && siz.getY() > 3) {
        C2D pos = positionOnPlate();
        C2D pci((C2D.Coord) columnX,(C2D.Coord) rowy);
        C2D ewci = pci - pos + sat;
        if (ew.isAccessible(ewci)) {
          return ewci;
        }
      } else {
        //        du.print("gewD15");
        //        du.print(columnX);
        //        du.print(siz);
        //        du.print(sat);
      }
    }
    return C2D.instanceof(100,100); // Not in ew
  }

  Bool isOurBorderOrControlZoneOrAnItem(C2D ewc) {
    return 
      isOurBorder(ewc) || isOurControlZone(ewc) || isAnItem(ewc);
  }

  Bool isOurBorder(C2D ewc) {
    EventWindow ew;
    if (!ew.isAccessible(ewc)) return false;
    ByteStreamLogger bsl;
    Atom & a = ew[ewc];
//    bsl.printf("isIRFBOB10(%d,%d)\n",ewc.getX(),ewc.getY());
    if (a as Plate) {
      EventWindow.SiteNum ssn = ew.getSiteNumber(self);
      if (ssn == ssn.maxof) { Fail f; f.fail("NOT IN EW ISANT"); return false; }
      C2D selfc = ew.getCoord(ssn);     // Where self is in ew

      PlateUtils pu;
      PlateUtils.PlateRelation rel = pu.relationTo(self, selfc, a, ewc);
      if (rel == PlateUtils.cSAME_PLATE_AS) {
        if (a.isPlateBorder()) return true;
      }
    }
    return false;    // Didn't find our border
  }

  Bool isOurControlZone(C2D givenewc) {
    EventWindow ew;
    EventWindow.SiteNum ssn = ew.getSiteNumber(self);
    if (ssn == ssn.maxof) { Fail f; f.fail("NOT IN EW ISANT"); return false; }
    C2D selfewc = ew.getCoord(ssn);     // Where self is in ew
    C2D selfplatepos = positionOnPlate();  // Where self is in its plate
    C2D selfplatesiz = sizeOfPlate();  // Size of self's plate
    
    C2D ewcoff = givenewc - selfewc; // Where given ewc is relative to us
    C2D givenplatepos = selfplatepos + ewcoff; // Absolute plate pos of given ewc
    return                                   
      givenplatepos.getX() == 1 &&    // Control zone is first column 
      givenplatepos.getY() > 0 &&     // and not on either 
      givenplatepos.getY() < selfplatesiz.getY() - 1; // border
  }

  Bool isAnItemSN(SN sn) {
    EventWindow ew;
    if (!ew.isAccessible(sn)) return false;
    return isAnItem(ew.getCoord(sn));
  }

  Bool isAnItem(C2D ewc) {
    EventWindow ew;
    if (!ew.isAccessible(ewc)) return false;
    //    du.printContext();
    //    du.print("iSANT10");
    //    du.print(ewc);
    Atom & a = ew[ewc];
    if (a as Plate) { // XXX as AtomPlate ?
      EventWindow.SiteNum ssn = ew.getSiteNumber(self);
      if (ssn == ssn.maxof) { Fail f; f.fail("NOT IN EW ISANT"); return false; }
      C2D selfc = ew.getCoord(ssn);     // Where self is in ew
      PlateUtils pu;
      PlateUtils.PlateRelation rel = pu.relationTo(self, selfc, a, ewc);
    //      du.print((Unsigned) rel);
      if (rel == PlateUtils.cCONTAINS_PLATE && a.sizeOfPlate().getX() == 1)
        return true; // Found width 1 contained plate (== 'item')
    //      du.print("iSANT12");
    }
    return false;    // Didn't find an item
  }

  Bool checkLocalActions() {
    return false;
  }

  Void behave() {
    if (mustBlockOrDie()) {
      //// WARNING: self might be erased at this point!
      EventWindow ew;   
      Atom & a = ew[0];  // So get a new ref from the ew
      if (a as Self) 
        a.mBlockDogTimer.reset(); // If it's still alive, it was blocked
      return;
    }
    // Block dog alarm means there's been no movement or growth for a looong time
    if (mBlockDogTimer.countAlarm()) return (Void) die();

    checkGrowthAndHealing();
    updateStream();
    if (checkLocalActions()) return;
  }

}



/** Seed ColorPlate
    \symbol SC
 */
element SeedColorPlate {
  Void behave() {
    EventWindow ew;
    ColorPlate ad;
    Random random;
    Int w = 12, h = 6;
    ad.mSizeOfPlate = B2D.instanceof(w,h);
    ad.mPosOnPlate = B2D.instanceof(0,0);
    ad.setStride(C2D.instanceof((C2D.Coord) random.between(1,2),
                                (C2D.Coord) random.between(1,2)));
    for (Unsigned i = 1; i < ad.mColor.lengthof; ++i)
      ad.mColor[i] = (ColorPlate.Color6) random.between(ad.mColor[i].minof,ad.mColor[i].maxof);

    ew[0] = ad;
  }
}




/** Run and dump a CS
    \symbol JS
    \color #f33
*/
element JumpSeeder {
  typedef EventWindow.SiteNum SN;
  SN mNextSN;
  Void behave() {
    EventWindow ew;
    Random random;
    Bool alle = true;
    for (EventWindow.SiteNum i = 1u; i < 41u; ++i) {
      if (ew[i] is Tecton) return; // Brute force deterrence
      if (!(ew[i] is Empty)) alle = false;
    }
    if (alle) {
      ew[0] = SuperSeedColorPlate.instanceof;
    } else if (!ew.isAccessible(mNextSN) || random.oneIn(500)) {
      ew[0] = Empty.instanceof;
    } else {
      ew[mNextSN] = ew[0];
      ew[0] = Empty.instanceof;
    }
  }
}

element IshColorPlate {
  Void behave() {
    DebugUtils du;
    EventWindow ew;
    ColorPlate cp;
    ew[1] = cp.atomof;
    Atom & a = ew[1];
    if (a as B2DPlateBase) {
      du.print("OK - ew[1] IS B2DPlate");
      du.print(a);
      B2DPacketSense aQuark;
      du.print(aQuark);
      ByteStreamLogger aTransient;
      du.print((UrSelf&) aTransient);
    } else {
      du.print("WRONG");
      du.print(a);
    }
    ew[0] = Empty.instanceof;
  }
}
