/* MigratoryUpdate: Update a remote Number 
   \symbol MU
   \color #bb8
*/
element MigratoryUpdater : Plate1 {

  B2D mGoalPos;
  
  typedef NumberPlate.Number Number;
  Number mUpdateNumber;

  typedef Unsigned(3) UpdateMode;
  constant UpdateMode cUPM_WRITE = 0u;
  constant UpdateMode cUPM_MAX =   1u;
  constant UpdateMode cUPM_MIN =   2u;
  constant UpdateMode cUPM_SUM =   3u;
  constant UpdateMode cUPM_DIFF =  4u;
  constant UpdateMode cUPM_RDIFF = 5u;
  constant UpdateMode cUPM_PROD =  6u;
  constant UpdateMode cUPM_DIV =   7u;
  UpdateMode mUpdateMode;
  
  typedef Unsigned(10) BlockCount;
  BlockCount mBlockCount;

  Void die() {
    EventWindow ew;
    ew[0] = Empty.instanceof;
  }

  Void behave() {
    if (!mGoalPos.isValid()) return die();

    if (mustBlockOrDie()) return;

    EventWindow ew;
    C2D goalpc = mGoalPos.toC2D();
    C2D contew;
    C2D selfpc;
    PlateUtils pu;
    if (pu.findContainer(self,contew,selfpc) && selfpc == goalpc) {
      // Time to update a number!
      for (SN sn = 1u; sn < 41u; ++sn) {
        if (!ew.isAccessible(sn)) continue;
        Atom & a = ew[sn];
        if (a as QMutableNumber) {
          // Found a target!
          Number cur = (Number) a.getNumber();
          Number new = mUpdateNumber;
          Number upd = cur;
          UpdateMode um = mUpdateMode;
          if (cur == a.getMinof())
            um = cUPM_WRITE;    // Always write if dest unset
          which (mUpdateMode) {
            case cUPM_WRITE: { upd = new; }
            case cUPM_MAX:   { if (new > upd) upd = new; }
            case cUPM_MIN:   { if (new < upd) upd = new; }
            case cUPM_SUM:   { upd += new; }
            case cUPM_DIFF:  { upd -= new; }
            case cUPM_RDIFF: { upd = (Number) (new - upd); }
            case cUPM_PROD:  { upd *= new; }
            case cUPM_DIV:   { upd /= new; }
          }
          if (upd != cur)
            a.setNumber(upd);
          break; // One shot updater 
        }
      }
      ew[0] = Empty.instanceof; // Our work is done (No Matter What!)
      return;
    }
    
    MDist md;
    Random random;
    Unsigned minDistToGoalpc = selfpc.manhattanDistance(goalpc);
    Unsigned ties = 1;
    SN closestPCsn = 0u;

    Plate & p = (Plate&) ew[contew];

    for (SN sn = 1u; sn <= 12u; ++sn) {
      PlateUtils.PlateRelation rel = pu.relationTo(0u,sn);
      // We only care about our container
      if (rel != PlateUtils.cCONTAINED_BY_PLATE) continue;
      Atom & a = ew[sn];
      if (a as Plate) {
        C2D theirpospc = a.positionOnPlate();
        Unsigned theirdisttogoal = theirpospc.manhattanDistance(goalpc);
        if (theirdisttogoal < minDistToGoalpc) {
          minDistToGoalpc = theirdisttogoal;
          closestPCsn = sn;
          ties = 1;
        } else if (theirdisttogoal == minDistToGoalpc &&
                   random.oneIn(++ties)) {
          closestPCsn = sn;
        }
      }
    }
    if (closestPCsn != 0u) {
      ew[closestPCsn] = ew[0]; // Move on
      ew[0] = Empty.instanceof; // Leave old spot empty to heal on its own
      mBlockCount = 0;
    } else if (++mBlockCount == mBlockCount.maxof) 
      return die();
  }
  
}
