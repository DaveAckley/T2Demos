/**
   Custom scan controller & visitor for cplates.
 */

transient CPlateScanner : SiteVisitor {
  EventWindow ew;

  typedef EventWindow.SiteNum SiteNum;
  typedef WindowScanner.Category Category;
  typedef Content.MyTag ContentTag;
  typedef CPlate.PlateState CPlateState;

  WindowScanner mWscn;

  ContentTag mOurContentTag;
  CPlateState mOurPlateState;
  RockPaperScissors mOurRPS;
  Category mCPlateLessCat;
  Category mCPlateSameCat;
  Category mCPlateMoreCat;
  Category mCPlateRPSLoseCat;
  Category mCPlateRPSTieCat;
  Category mCPlateRPSWinCat;
  Category mKidCat;
  Category mOurContentCat;
  Category mAnyContentCat;
  Category mSwapLineCat;
  Category mEmptyCat;

  SiteNum getCPlateLessSN() { return categSN(mWscn,mCPlateLessCat); }
  SiteNum getCPlateSameSN() { return categSN(mWscn,mCPlateSameCat); }
  SiteNum getCPlateMoreSN() { return categSN(mWscn,mCPlateMoreCat); }
  SiteNum getCPlateRPSLoseSN() { return categSN(mWscn,mCPlateRPSLoseCat); }
  SiteNum getCPlateRPSTieSN() { return categSN(mWscn,mCPlateRPSTieCat); }
  SiteNum getCPlateRPSWinSN() { return categSN(mWscn,mCPlateRPSWinCat); }
  SiteNum getKidSN() { return categSN(mWscn,mKidCat); }
  SiteNum getOurContentSN() { return categSN(mWscn,mOurContentCat); }
  SiteNum getAnyContentSN() { return categSN(mWscn,mAnyContentCat); }
  SiteNum getSwapLineSN() { return categSN(mWscn,mSwapLineCat); }
  SiteNum getEmptySN() { return categSN(mWscn,mEmptyCat); }

  // Since we're excluding self from search, 0 is OoB
  SiteNum categSN(WindowScanner &mWscn,Category cat) {
    if (mWscn.getHits(cat) == 0u) return 0u;
    return mWscn.getSiteNum(cat);
  }

  Void scan(CPlate & us) {
    mWscn.resetCategories();
    mOurContentTag = (ContentTag) us.getMyTag();
    mOurPlateState = us.mPlateState;
    mOurRPS = us.u.mCOPY.mSwapState; // Only valid if platestate == copy
    mCPlateLessCat = mWscn.allocateCategory();
    mCPlateSameCat = mWscn.allocateCategory();
    mCPlateMoreCat = mWscn.allocateCategory();
    mCPlateRPSLoseCat = mWscn.allocateCategory();
    mCPlateRPSTieCat = mWscn.allocateCategory();
    mCPlateRPSWinCat = mWscn.allocateCategory();
    mKidCat = mWscn.allocateCategory();
    mOurContentCat = mWscn.allocateCategory();
    mAnyContentCat = mWscn.allocateCategory();
    mSwapLineCat = mWscn.allocateCategory();
    mEmptyCat = mWscn.allocateCategory();
    mWscn.scan(self);
  }

  virtual Void visit(WindowScanner& wsrv, Atom & a, SiteNum sn) {

    // Except as 'any content', foreign content is invisible to us
    if (a as Content) {
      wsrv.categorize(sn, mAnyContentCat);
      if (a.getMyTag() != mOurContentTag) return;
    }

    // Favor plates that aren't bored since we want to report them
    if (a as CPlate) {
      if (a.mPlateState < mOurPlateState)      wsrv.categorize(sn, mCPlateLessCat);
      else if (a.mPlateState > mOurPlateState) wsrv.categorize(sn, mCPlateMoreCat);
      else /* a.mPlateState > mOurPlateState*/ wsrv.categorize(sn, mCPlateSameCat);

      if (a.mPlateState == a.cPLATESTATE_COPY) {
        Bool wins = a.u.mCOPY.mSwapState.winsOver(mOurRPS);
        if (wins)       
          wsrv.categorize(sn, mCPlateRPSWinCat);
        else {
          Bool loses = a.u.mCOPY.mSwapState.losesTo(mOurRPS);
          if (loses)             
            wsrv.categorize(sn, mCPlateRPSLoseCat);
          else /* tiesWith() */   
            wsrv.categorize(sn, mCPlateRPSTieCat);
        }
      }

      C2D cpc = ew.getCoordRaw(sn);
      C2D rev = ew.getCoordRaw((SiteNum) a.mSource);
      cpc = cpc.add(rev);
      if (cpc.length() == 0u) {
        typedef Unsigned(3) SuperBusy;
        wsrv.categorize(sn, mKidCat, 1u + (SuperBusy.maxof - (SuperBusy) a.boredom()));  // Focus on our busy kids
      }
    }
    else if (a is SwapLine) wsrv.categorize(sn, mSwapLineCat);
    else if (a is Empty) wsrv.categorize(sn, mEmptyCat);
    else if (a as Content) {
      if (a.getMyTag() == mOurContentTag)
        wsrv.categorize(sn, mOurContentCat);
    } 

  }
}
