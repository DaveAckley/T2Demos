local typedef PlateUtils.PlateDir PD;

quark Node : Plate {
  typedef Link.State State;
  typedef Link.Sum Sum;

  //// Node API
  virtual Bool choose() ; //< \c true iff state updated
  virtual State getState() ;

  virtual PD getSumInDir() ;
  virtual PD getStateOutDir() ;

  //// Node SERVICES
  
  ARGB getColor(Unsigned selector) {
    ColorUtils cu;
    PlateUtils pu;
    State s = getState();
    ARGB ret;
    if (selector == 0u) {
      if (s > 0) ret = cu.color(0xffffff);
      else if (s < 0) ret = cu.color(0x000000);
      else ret = cu.color(0x808080);
      return ret;
    }
    if (selector < 3u) {
      State s = getState();
      ARGB ret;
      if (s < 0) ret = cu.color(0xff0000);
      else if (s > 0) ret = cu.color(0x00ff00);
      else ret = cu.color(0x000000);
      return cu.between(cu.color(0x808080),ret,15);
    }
    return super.getColor(selector);
  }


}

quark Decider {
  typedef Link.State State;
  typedef Link.Sum Sum;
  //// Decider API
  virtual State decide(Sum insum, Unsigned count) ;
  //// Decider SERVICES
}

quark NodeImpl : Node + Decider {
  typedef EventWindow.SiteNum SN;

  SN mSumInSN;
  SN mStateOutSN;
  State mState;

  //// Node API
  @Override
  State getState() { return mState; }

  @Override
  virtual Bool choose() {
    SN sum = findSumIn();
    if (sum == SN.maxof) return false;
    SN state = findStateOut();
    //    if (state == SN.maxof) return false;

    EventWindow ew;
    Link & in = (Link&) ew[sum];
    Sum insum = in.getSum();
    C2D siz = in.sizeOfPlate();
    PlateUtils pu;
    C2D step = pu.stepInDir(getSumInDir());
    Unsigned units = (Unsigned) (step.getX() != 0 ? siz.getX() : siz.getY());
    State newstate = self.decide(insum,units);
    if (state != SN.maxof) {
      Link & out = (Link&) ew[state];
      out.setState(newstate);
    }
    mState = newstate;
    return true;
  }

  SN findLinkInDir(SN cached, PD dir) { // Return SN of accessible Link or SN.maxof
    PlateUtils pu;
    return pu.findTypeInDir(cached, dir, Link.classidof);
  }

  SN findSumIn() {
    return mSumInSN =
      findLinkInDir(mSumInSN, getSumInDir());
  }
  SN findStateOut() {
    return mStateOutSN =
      findLinkInDir(mStateOutSN, getStateOutDir());
  }
}


