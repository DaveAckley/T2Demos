/** A base class for Content that can have any of four persistent
    rotational symmetries of the event window
*/
quark RotateSPOT : SPOT {
  // Local typedefs
  typedef Unsigned(2) WindowRotation;

  // Local data
  WindowRotation mRot;
  constant WindowRotation c000R = 0u;
  constant WindowRotation c090R = 1u;
  constant WindowRotation c180R = 2u;
  constant WindowRotation c270R = 3u;

  WindowRotation getWindowRotation() { return mRot; }

  WindowRotation setRandomWindowRotation() {
    typedef WindowRotation WR;
    Random random;
    WR wr = (WR) random.between(WR.minof,WR.maxof);
    setWindowRotation(wr);
    return wr;
  }

  Void setWindowRotation(WindowRotation wr) { 
    mRot = wr; 
    applyCurrentWindowRotation();
  }

  Void applyCurrentWindowRotation() {
    EventWindow ew;
    ew.changeSymmetry(mRot);
  }

  Bool update() {
    if (super.update()) return true;
    applyCurrentWindowRotation();
    return false;
  }

}
