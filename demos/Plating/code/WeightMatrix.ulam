/** 
    \symbol WM
    \color #bb8
 */
element WeightMatrix : B2DPlate + CategorizedSite + StdLink + Stride2x2 {
  typedef PlateUtils.PlateDir PD;

  //// Link API
  @Override
  PD getSumDir() { return mSumDir; }
  @Override
  PD getStateDir() { return mStateDir; }

  PD mSumDir;
  PD mStateDir;

  Void setStateDir(PD sd) { mStateDir = sd; }
  Void setSumDir(PD sd) { mSumDir = sd; }
  
  // B2DPlate API
  virtual Atom copyOf() { //< A copy of self suitable for healing
    Self s = self;        // start with us
    s.init();             // Reinit state/weight
    return s.atomof;      // Use that
  }
  
  ARGB getBaseColor() {
    ColorUtils cu;
    which (mStateDir) {
      case PlateUtils.cPLATE_GOES_W: { return cu.color(0xaa55cc); }
      case PlateUtils.cPLATE_GOES_N: { return cu.color(0x55ccaa); }
      case PlateUtils.cPLATE_GOES_E: { return cu.color(0xcc55aa); }
      case PlateUtils.cPLATE_GOES_S: { return cu.color(0xaa55cc); }
    }
    return cu.color(0x0); // NOT REACHED
  }

  typedef Unsigned(2) DisplayMap;
  constant DisplayMap cSHOW_WEIGHT = 0u;
  constant DisplayMap cSHOW_SUM =    1u;
  constant DisplayMap cSHOW_STATE =  2u;
  constant DisplayMap cSHOW_SUPER =  3u;
  DisplayMap mDisplays[3] = { cSHOW_STATE, cSHOW_WEIGHT, cSHOW_SUM };

  Void setDisplays(DisplayMap d1, DisplayMap d2, DisplayMap d3) {
    mDisplays[0] = d1;
    mDisplays[1] = d2;
    mDisplays[2] = d3;
  }

  ARGB getColor(Unsigned selector) {
    ColorUtils cu;
    DisplayMap show = mDisplays[(Unary(2)) selector];
    ARGB ret;
    
    if (show == cSHOW_WEIGHT) {
      Weight w = getWeight();
      return cu.rainbow(w.minof/2,w.maxof/2,w);
    }

    if (show == cSHOW_SUM) {
      Sum s = getSum();
      return cu.rainbow(s.minof/4,s.maxof/4,s);
    }

    if (show == cSHOW_STATE) {
      State s = getState();
      ARGB ret;
      if (s < 0) ret = cu.color(0x000000);
      else if (s > 0) ret = cu.color(0xffffff);
      else ret = cu.color(0x808080);
      return cu.between(getBaseColor(),ret,35);
    }

    /* if (cSHOW_SUPER) */ return super.getColor(selector);
  }

  Void behave() {
    initIfNecessary();
    if (mustBlockOrDie()) {
      return;
    }
    checkGrowthAndHealing();
    propagate();
  }
}

quark NodeNW : NodeImpl {
  typedef PlateUtils.PlateDir PD;
  virtual PD getSumInDir() { return PlateUtils.cPLATE_GOES_N; }
  virtual PD getStateOutDir() { return PlateUtils.cPLATE_GOES_W; }
}

quark NodeNE : NodeImpl {
  typedef PlateUtils.PlateDir PD;
  virtual PD getSumInDir() { return PlateUtils.cPLATE_GOES_N; }
  virtual PD getStateOutDir() { return PlateUtils.cPLATE_GOES_E; }
}

quark NodeES : NodeImpl {
  typedef PlateUtils.PlateDir PD;
  virtual PD getSumInDir() { return PlateUtils.cPLATE_GOES_E; }
  virtual PD getStateOutDir() { return PlateUtils.cPLATE_GOES_S; }
}





