/**
 \symbol Sw
 \color #e30
*/
element Sweeper : TruckBase {
  virtual Int priority() { return cTRUCK_PRIORITY; }

  B2D.BCoord mPlateHeight;
  B2D.BCoord mOurRow;
  B2D.BCoord mStepsToSweep;

  ARGB getColor(Unsigned selector) {
    ColorUtils cu;
    Bool flash = ((mOurRow+mStepsToSweep)%2) == 0;
    return cu.color(flash ? 0xeeee11 : 0xee1111);
  }

  typedef Unsigned(1) SweepPhase;
  constant SweepPhase cSWEEPPHASE_DEPLOY = 0u; // Deploy the fleet
  constant SweepPhase cSWEEPPHASE_SWEEP  = 1u; // Clean up
  SweepPhase mSweepPhase;

  //// Printer API
  virtual Bool die() { mPlateHeight = mPlateHeight.minof; return true; }
  virtual Bool isDead() { return mPlateHeight == mPlateHeight.minof; }

  Bool sweepOneColumn() { // Let's roll!
    if (ew[1] is Plate) ew[1] = Empty.instanceof;
    ew.swap(1,0);
    return false;
  }

  Bool hasBackWing() {
    for (SN sn = 2u; sn <= 3u; ++sn) {
      C2D c = md.getSiteCoord(sn);
      Int absrow = mOurRow + c.getY();
      if (absrow > 0 || absrow < mPlateHeight) {
        if (ew[(SN) (sn+5u)] is Self) return true;
      }
    }
    return false;
  }

  Bool tooCloseInFront() {
    return (ew[1] is Trailer);
  }

  Bool deployHereIfNeeded(SN sn2or3) {
    if (truckHereOrBehind((SN)(sn2or3+3u))) return false; // not needed
    C2D c = md.getSiteCoord(sn2or3);
    Int absrow = mOurRow + c.getY();
    if (absrow <= 0 || absrow >= mPlateHeight) return false; // not needed

    Sweeper newt = self;
    newt.mOurRow = (B2D.BCoord) absrow;
    ew[sn2or3] = newt;

    return false;  // Done
  }

  Bool phaseDEPLOY() {
    if (deployHereIfNeeded(2u)) return true;
    if (deployHereIfNeeded(3u)) return true;
    mSweepPhase = cSWEEPPHASE_SWEEP;
    return true;
  }

  Bool phaseSWEEP() {
    if (mStepsToSweep > 0) {
      if (hasBackWing()) return true; // Let them catch up
      if (tooCloseInFront()) return true; // Don't tailgate
      --mStepsToSweep;                    // Decrement first!
      sweepOneColumn();                   // Then clean up
    } else {
      ew[0] = Empty.instanceof; // My work is done
    }
    return true;
  }

  virtual Bool update() {
    if (super.update()) return true;
    if (processDeath()) return true;
    which (mSweepPhase) {
    case cSWEEPPHASE_DEPLOY:  { return phaseDEPLOY(); }
    case cSWEEPPHASE_SWEEP:   { return phaseSWEEP(); }
    }
    return die(); // NOT REACHED
  }

  Void behave() {
    if (update()) return; // Check priority
  }
}
