quark RingOPlateBase : B2DPlateBase + RingO {

  //// RingOPlateBase API
  Bool updateRingOPlate(RingOCircuit & roc) {
    return updateRingOPlateMooreNeighborhood(roc); // default
  }

  //// RingOPlate SERVICES
  Bool updateRingOPlateMooreNeighborhood(RingOCircuit & roc) {
    return updateRingOCircuit(roc);
  }

  /* XXX IN RingOCircuit now 
  @Override
  virtual SyncRelation syncRelation(RingO & other) {
    EventWindow ew;
    PlateUtils pu;
    MDist md;

    SN selfsn = getOurSN();
    if (selfsn == SN.maxof) return RingO.cOTHER_IS_UNRELATED; // WTH?
    C2D offsetl = md.getSiteCoord(selfsn);

    if (other as RingOPlate) {

      SN othersn = other.getOurSN();
      if (othersn == SN.maxof) return RingO.cOTHER_IS_UNRELATED; // WTH?

      C2D offsetr = md.getSiteCoord(othersn);
      PlateUtils.PlateRelation rel = pu.relationTo(self, offsetl, other, offsetr);
      if (rel != pu.cSAME_PLATE_AS) return RingO.cOTHER_IS_UNRELATED; // WTH?

      Bool snUpstream =   offsetl.min(offsetr)==offsetr;
      if (snUpstream) return RingO.cOTHER_IS_UPSTREAM;

      Bool snDownstream = offsetl.max(offsetr)==offsetr;
      if (snDownstream) return RingO.cOTHER_IS_DOWNSTREAM;

    }
    return RingO.cOTHER_IS_UNRELATED;
  }
  */

}

/** Single circuit plate demoer */
quark RingOPlate :  RingOPlateBase + B2DPlate6 {
  RingOState mRingOState;
  
  virtual RingOState & ringOState(RingOCircuit & roc) {
    return mRingOState;
  }

  /** true if we participate in circuit roc */
  virtual Bool inCircuit(RingOCircuit & roc) {
    return roc is RingOPlateCircuit;
  }

  ARGB getRingOColor(Unsigned selector) {
    return mRingOState.color();
  }

  //// UrSelf API
  @Override
  ARGB getColor(Unsigned selector) {
    return getRingOColor(selector);
  }

}

transient RingOPlateCircuit : RingOCircuit {
  RingOMooreIterator mItr;

  //// RingOCircuit API
  @Override
  virtual RingOIterator & ringOIterator() { return mItr; }

  @Override
  virtual SyncRelation syncRelation(RingO & me, RingO & other) {
    SyncRelation rel = RingOCircuit.cOTHER_IS_UNRELATED;
    ByteStreamLogger bsl;
    if (me as RingOPlate) {
      if (other as RingOPlate) {
        C2D posl = me.positionOnPlate();   
        C2D posr = other.positionOnPlate();

        if (posl.min(posr) == posr)
          rel = RingOCircuit.cOTHER_IS_UPSTREAM;
        else if (posl.max(posr) == posr)
          rel = RingOCircuit.cOTHER_IS_DOWNSTREAM;
        EventWindow ew;
          /*
            bsl.printf("L2REL snl(%d) posl(%d,%d) snr(%d) posr(%d,%d) rel(%d)\n",
            ew.getSiteNumber(me),
            posl.x, posl.y,
            ew.getSiteNumber(other),
            posr.x, posr.y,
            rel);
          */
      }
    }
    return rel;
  }
}

element RingODemo : RingOPlate {
  typedef Super.MyB2D MyB2D;
  MyB2D mNewSize;

  Void maybeChangeSize() {
    Random random;
    MyB2D ns;
    ns.fromC2D(sizeOfPlate());
    ns.x = (MyB2D.Coord) (ns.x + random.between(-3,3)/3);
    ns.y = (MyB2D.Coord) (ns.y + random.between(-3,3)/3);
    if (ns != mNewSize) {
      ByteStreamLogger bsl;
      bsl.printf("ROD NEW SIZE [%d,%d] => [%d,%d]\n",
                 mNewSize.x,mNewSize.y,
                 ns.x,ns.y
                 );
      mNewSize = ns;
    }
  }

  @Override
  virtual Bool rootTick(RingOCircuit & roc, RingONeighborhood & ngb) {
    DebugUtils du;
    RingOState & ros = ringOState(roc);
    if (ros.getStateIndex() == RingOState.cBLU_STATE) // entering RED
      maybeChangeSize();
    return true;
  }

  @Override
  virtual Bool edge(RingOCircuit & roc, RingONeighborhood & ngb, Bool fromUp, Bool newState) { 
    if (fromUp) {
      EventWindow ew;
      SN sn = ngb.sampleInDir(RingOCircuit.cOTHER_IS_UPSTREAM);
      if (ew.isAccessible(sn)) {
        if (newState) { // AIM at mNewSize
          Atom & a = ew[sn];
          if (a as Self) {
            mNewSize = a.mNewSize;
          }
        } else {
          DebugUtils du;
          //          du.print("FIRE WRITREME XXX");
        }
      }
    }
    return true;
  }

  Void behave() {
    if (mustBlockOrDie()) return;
    if (checkGrowthAndHealing()) return;
    RingOPlateCircuit roc;
    if (updateRingOPlate(roc)) return;
  }
}

element SeedRingODemo {
  Void behave() {
    RingODemo d;
    d.setSizeOfPlate(C2D.instanceof(9,7));
    EventWindow ew;
    ew[0] = d;
  }
}
