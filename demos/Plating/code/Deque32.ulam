/** Seed Deque32
    \symbol Sd
 */
element SeedDeque32 {
  Void behave() {
    EventWindow ew;
    Deque32 st;
    Int w = 12, h = 4;
    st.mSizeOfPlate = B2D.instanceof(w,h);
    st.mPosOnPlate = B2D.instanceof(0,0);
    ew[0] = st;
  }
}

/** Deque32
    \symbol DQ
    \color #cc4
 */
element Deque32 : B2DPlate + QStream12 + CategorizedSite + Payload {
  typedef EventWindow.SiteNum SN;
  DebugUtils du;

  //// QSTREAM API
  @Override
  virtual SN getNextSN(Bool left) { // LEFT IS CCW, RIGHT IS CW, ON BORDER
    if (!isPlateBorder()) return SN.maxof;
    if (left) return getCCWPlate();
    /*!left*/ return getCWPlate();
  }

  @Override
  virtual Bool isPeer(Bool left) {
    C2D pos = positionOnPlate();
    return
      (left && pos == C2D.instanceof(0,0)) ||
      (!left && pos == C2D.instanceof(0,1));
  }


  //// PAYLOAD API
  @Override
  virtual Bool loadFrom(RawBits bits) {
    if (mHasPayload) return false;
    mPayload = (MyPayload) (bits>>cPAYLOAD_TO_RAWBITS_SHIFT);
    mHasPayload = true;
    return true;
  }

  @Override
  virtual Bool storeTo(RawBits & bits) {
    if (!mHasPayload) return false;
    bits = ((RawBits) mPayload)<<cPAYLOAD_TO_RAWBITS_SHIFT;
    mHasPayload = false;
    return true;
  }

  constant Unsigned cPAYLOAD_BITS = 32u;
  constant Unsigned cPAYLOAD_TO_RAWBITS_SHIFT = 64u - cPAYLOAD_BITS;

  typedef Bits(cPAYLOAD_BITS) MyPayload;
  MyPayload mPayload;
  Bool mHasPayload;

  //// Plate API

  //// UrSelf API
  @Override
  ARGB getColor(Unsigned selector) {
    ColorUtils cu;
    if (mHasPayload) {
      return cu.color((Unsigned) mPayload);
    }

    ARGB ret = cu.color(0xff444433);

    return ret;
  }

  C2D getXOffsetIfBorder(C2D pos, C2D size, Bool forInner) {
    C2D z;
    if (pos.getX() == 0) {
      if (!forInner) return C2D.instanceof(-1,0); // Outer from x at min
      // Inner undefined on borders
      if (pos.getY() == 0 || pos.getY() == size.getY() - 1) return z;
      return C2D.instanceof(1,0);  // Inner from x at min
    }
    if (pos.getX() == size.getX() - 1) {
      if (!forInner) return C2D.instanceof(1,0); // Outer from x at max
      // Inner undefined on borders
      if (pos.getY() == 0 || pos.getY() == size.getY() - 1) return z;
      return C2D.instanceof(-1,0);  // Inner from x at max
    }
    return z; // Not border
  }

  C2D getYOffsetIfBorder(C2D pos, C2D size, Bool forInner) {
    C2D z;
    if (pos.getY() == 0) {
      if (!forInner) return C2D.instanceof(0,-1); // Outer from y at min
      // Inner undefined on borders
      if (pos.getX() == 0 || pos.getX() == size.getX() - 1) return z;
      return C2D.instanceof(0,1);  // Inner from Y at min
    }
    if (pos.getY() == size.getY() - 1) {
      if (!forInner) return C2D.instanceof(0,1); // Outer from y at max
      // Inner undefined on borders
      if (pos.getX() == 0 || pos.getX() == size.getX() - 1) return z;
      return C2D.instanceof(0,-1);  // Inner from y at max
    }
    return z; // Not border
  }

  Bool isPlateBorderY(C2D pos, C2D size) { return pos.getY() == 0 || pos.getY() == size.getY() - 1; }

  C2D getOffsetInDirIfBorder(Unsigned diridx, C2D pos, C2D size, Bool inner) {
    C2D z;
    if (diridx == PlateUtils.cPLATE_GOES_W) { // (-1,0), at x==0 if outer, x==max if inner
      if ((pos.getX() == 0 && !inner) ||
          (pos.getX() == size.getX() - 1 && inner))
        return C2D.instanceof(-1,0);
      return z;
    }
    if (diridx == PlateUtils.cPLATE_GOES_N) { // (0,-1), at y==0 if outer, y==max if inner
      if ((pos.getY() == 0 && !inner) ||
          (pos.getY() == size.getY() - 1 && inner))
        return C2D.instanceof(0,-1);
      return z;
    }
    if (diridx == PlateUtils.cPLATE_GOES_E) { // (1,0), at x==0 if inner, x==max if outer
      if ((pos.getX() == 0 && inner) ||
          (pos.getX() == size.getX() - 1 && !inner))
        return C2D.instanceof(1,0);
      return z;
    }
    if (diridx == PlateUtils.cPLATE_GOES_S) { // (0,1), at y==0 if inner, y==max if outer
      if ((pos.getY() == 0 && inner) ||
          (pos.getY() == size.getY() - 1 && !inner))
        return C2D.instanceof(0,1);
      return z;
    }
    Fail f; f.fail("UNREACHABLE");
    return z;
  }

  /*
  Unsigned clearDistInDir(Unsigned diridx, Unsigned prevdist, C2D pos, C2D size, Bool inner) {

    C2D offset = getOffsetInDirIfBorder(diridx,pos,size,inner);
    if (offset.length() == 0u) return prevdist; // not blocked if have no place to get blocked
    EventWindow ew;
    C2D sc;
    for (Unsigned clear = 0u; clear < prevdist; ++clear) {
      sc += offset;
      if (!ew.isAccessible(sc)) return clear; // We.. Are Blocked
      Atom & a = ew[sc];
      if (a is Empty) continue; // Not blocked there
      if (a as Self) {
        PlateUtils.PlateRelation rel = self.relationTo(a, sc);

        if (!inner) {
          // Outer isn't blocked by non-border containing plate
          if (!a.isPlateBorder() && rel == Plate.cCONTAINED_BY_PLATE) continue;
        } else {
          // Inner isn't blocked by non-border our plate
          if (!a.isPlateBorder() && rel == Plate.cSAME_PLATE_AS) continue;
          // Inner also isn't blocked by our border on directions we're not going?
          Bits bdirs = a.getBorderDirs();
          bdirs &= (1u<<diridx);
          if (bdirs == 0u && rel == Plate.cSAME_PLATE_AS) continue;
        }
      }
      return clear; // Anything but empty or selected us blocks us
    }
    return prevdist; // No more blocked than we were
  }
  */

  Bool die() {
    du.printContext();
    du.print("DIIDDIDIEEEE");
    return true;
  }

  C2D getInsertEWC(Bool front) { // else back
    C2D insertSite = getEWCoordIfItemAccessible(1,front ? 1 : 2);
    if (insertSite.getX() <= 4 && isEmptyOrField(insertSite))
      return insertSite;
    return C2D.instanceof(100,100);
  }

  Bool tryInsert(Bool front, MyPayload pay) {
    EventWindow ew;
    C2D insertSite = getInsertEWC(front);
    if (insertSite.getX() > 4) return false;

    Self s;
    s.mSizeOfPlate = B2D.instanceof(1,1);
    s.mPosOnPlate = B2D.instanceof(0,0);
    s.loadFrom(pay);
    ew[insertSite] = s;
    return true;
  }

  Bool tryRemove(Bool front, MyPayload & pay) {
    if (tryRemoveAt(front,pay,1)) return true;
    if (tryRemoveAt(front,pay,2)) return true;
    return false;
  }

  Bool getItemPayloadAt(C2D site, MyPayload & payload) {
    EventWindow ew;
    Atom & a = ew[site];
    if (a as Self) {
      C2D size = a.sizeOfPlate();
      if (size.getX() == 1 && size.getY() == 1) {
        RawBits bits;
        if (a.storeTo(bits)) {
          payload = (MyPayload) bits;
          return true;
        }
      }
    }
    return false;
  }

  Bool tryRemoveAt(Bool front, MyPayload & pay, Int xcol) {
    EventWindow ew;
    C2D popSite = getEWCoordIfItemAccessible(xcol, front ? 1 : 2);
    if (popSite.getX() > 4) return false;
    if (!isAnItem(popSite)) return false;

    MyPayload t1;
    if (!getItemPayloadAt(popSite,t1)) return false;
    pay = t1;
    ew[popSite] = Empty.instanceof;
    return true;
  }

  /** Check if site at plate (columnx,rowy) is accessible via the
   * current event window.  Note this routine can be called when self
   * is not located at ew[0], but self must be in the ew somewhere,
   * and of course ew accessibility doesn't change.
   */
  C2D getEWCoordIfItemAccessible(Int columnX, Int rowy) {
    EventWindow ew;
    EventWindow.SiteNum sn = ew.getSiteNumber(self); // Find ourselves
    if (sn != sn.maxof) {
      C2D sat = ew.getCoord(sn); // Us as coord
      C2D siz = sizeOfPlate();
      if (columnX >= 0 && columnX < siz.getX() && siz.getY() > 3) {
        C2D pos = positionOnPlate();
        C2D pci((C2D.Coord) columnX,(C2D.Coord) rowy);
        C2D ewci = pci - pos + sat;
        if (ew.isAccessible(ewci)) {
          return ewci;
        }
      } else {
      }
    }
    return C2D.instanceof(100,100); // Not in ew
  }

  Bool isOurBorderOrAnItem(C2D ewc) {
    return isOurBorder(ewc) || isAnItem(ewc);
  }

  Bool isOurBorder(C2D ewc) {
    EventWindow ew;
    if (!ew.isAccessible(ewc)) return false;
    ByteStreamLogger bsl;
    Atom & a = ew[ewc];
    if (a as Plate) {
      EventWindow.SiteNum ssn = ew.getSiteNumber(self);
      if (ssn == ssn.maxof) { Fail f; f.fail("NOT IN EW ISANT"); return false; }
      C2D selfc = ew.getCoord(ssn);     // Where self is in ew

      PlateUtils pu;
      PlateUtils.PlateRelation rel = pu.relationTo(self, selfc, a, ewc);
      Bool ret = rel == PlateUtils.cSAME_PLATE_AS && a.isPlateBorder();
      if (ret) return true;
    }
    return false;    // Didn't find our border
  }

  Bool isAnItem(C2D ewc) {
    EventWindow ew;
    if (!ew.isAccessible(ewc)) return false;
    Atom & a = ew[ewc];
    if (a as Plate) {
      EventWindow.SiteNum ssn = ew.getSiteNumber(self);
      if (ssn == ssn.maxof) { Fail f; f.fail("NOT IN EW ISANT"); return false; }
      C2D selfc = ew.getCoord(ssn);     // Where self is in ew
      PlateUtils pu;
      PlateUtils.PlateRelation rel = pu.relationTo(self, selfc, a, ewc);
      if (rel == PlateUtils.cCONTAINS_PLATE && a.sizeOfPlate().getX() == 1)
        return true; // Found width 1 contained plate (== 'item')
    }
    return false;    // Didn't find an item
  }

  Bool isEmptyOrField(C2D ewc) {
    EventWindow ew;
    EventWindow.SiteNum sn = ew.getSiteNumber(self); // Find ourselves
    if (sn == sn.maxof) { Fail f; f.fail("self not in EW"); return false; }
    C2D sat = ew.getCoord(sn); // Us as coord

    if (!ew.isAccessible(ewc)) return false;
    Atom & a = ew[ewc];
    if (a is Empty) return true;
    if (a as Plate) {
      PlateUtils pu;
      PlateUtils.PlateRelation rel = pu.relationTo(self, sat, a, ewc);

      if (rel == PlateUtils.cSAME_PLATE_AS && !a.isPlateBorder())
        return true; // Found TestStack15 field
    }
    return false;  // Not empty or field
  }

  Bool isField(C2D ewc) {
    EventWindow ew;
    EventWindow.SiteNum sn = ew.getSiteNumber(self); // Find ourselves
    if (sn == sn.maxof) { Fail f; f.fail("self not in EW"); return false; }
    C2D sat = ew.getCoord(sn); // Us as coord

    if (!ew.isAccessible(ewc)) return false;
    Atom & a = ew[ewc];
    if (a as Plate) {
      PlateUtils pu;
      PlateUtils.PlateRelation rel = pu.relationTo(self, sat, a, ewc);

      if (rel == PlateUtils.cSAME_PLATE_AS && !a.isPlateBorder())
        return true; // Found TestStack15 field
    }
    return false;  // Not empty or field
  }

  Bool tryPropagateInsertRule() {
    EventWindow ew;
    Int myx = positionOnPlate().getX();
    for (Int thisy = 1; thisy <= 2; ++thisy) {
      for (Int x = -3; x < 3; ++x) {
        Int thisx = x + myx;

        // Pos numbering is
        //  123 
        //
        // Insert rule is
        // xi. ->  x.i   # propagate insert
        // i.e., pos3 <- pos2; pos2 <- empty
        //

        C2D pos1 = getEWCoordIfItemAccessible(thisx,thisy);
        if (pos1.getX() > 4 || !isOurBorderOrAnItem(pos1)) continue;

        C2D pos2 = getEWCoordIfItemAccessible(thisx+1,thisy);
        if (pos2.getX() > 4 || !isAnItem(pos2)) continue;

        C2D pos3 = getEWCoordIfItemAccessible(thisx+2,thisy);
        if (pos3.getX() > 4 || !isField(pos3)) continue;

        //// WE HAVE FOUND AN INSERT PROPAGATION OPPTY
        ew[pos3] = ew[pos2];
        ew[pos2] = Empty.instanceof;
        return true;
      }
    }
    return false;
  }

  Bool tryPropagateRemoveRule() {
    EventWindow ew;
    Int myx = positionOnPlate().getX();
    for (Int thisy = 1; thisy <= 2; ++thisy) {
      for (Int x = -3; x < 3; ++x) {
        Int thisx = x + myx;

        // Pos numbering is
        //  123 
        //
        // Remove rule is
        // ..i ->  .i.   # propagate remove
        // i.e., pos2 <- pos3; pos3 <- empty

        C2D pos1 = getEWCoordIfItemAccessible(thisx,thisy);
        if (pos1.getX() > 4 || !isEmptyOrField(pos1)) continue;

        C2D pos2 = getEWCoordIfItemAccessible(thisx+1,thisy);
        if (pos2.getX() > 4 || !isEmptyOrField(pos2)) continue;

        C2D pos3 = getEWCoordIfItemAccessible(thisx+2,thisy);
        if (pos3.getX() > 4 || !isAnItem(pos3)) continue;

        //// WE HAVE FOUND A REMOVE PROPAGATION OPPTY
        ew[pos2] = ew[pos3];
        ew[pos3] = Empty.instanceof;
        return true;
      }
    }
    return false;
  }

  Bool tryPropagateRollRule() {
    EventWindow ew;
    Int myx = positionOnPlate().getX();
    for (Int thisy = 1; thisy <= 2; ++thisy) {
      Int sourcey = thisy;
      Int desty = (3 - thisy);
      for (Int x = -3; x < 3; ++x) {
        Int thisx = x + myx;

        // Pos numbering is
        //   source 123  or  dest   456
        //   dest   456      source 123
        // depending on y
        //
        // Roll rule is
        //   source   i.i      i..
        //   dest     ...  ->  i..
        // i.e., pos4 <- pos3; pos3 <- empty
        //
        C2D pos1 = getEWCoordIfItemAccessible(thisx,sourcey);
        if (pos1.getX() > 4 || !isAnItem(pos1)) continue;

        C2D pos2 = getEWCoordIfItemAccessible(thisx+1,sourcey);
        if (pos2.getX() > 4 || !isEmptyOrField(pos2)) continue;

        C2D pos3 = getEWCoordIfItemAccessible(thisx+2,sourcey);
        if (pos3.getX() > 4 || !isAnItem(pos3)) continue;

        C2D pos4 = getEWCoordIfItemAccessible(thisx,desty);
        if (pos4.getX() > 4 || !isEmptyOrField(pos4)) continue;

        C2D pos5 = getEWCoordIfItemAccessible(thisx+1,desty);
        if (pos5.getX() > 4 || !isEmptyOrField(pos5)) continue;

        C2D pos6 = getEWCoordIfItemAccessible(thisx+2,desty);
        if (pos6.getX() > 4 || !isEmptyOrField(pos6)) continue;

        //// WE HAVE FOUND A ROLL OPPTY
        ew[pos4] = ew[pos3];
        ew[pos3] = Empty.instanceof;
        return true;
      }
    }
    return false;
  }

  Bool tryPropagateSqueezeRule() {
    EventWindow ew;
    Int myx = positionOnPlate().getX();
    for (Int thisy = 1; thisy <= 2; ++thisy) {
      Int sourcey = thisy;
      Int desty = (3 - thisy);
      for (Int x = -3; x < 3; ++x) {
        Int thisx = x + myx;

        // Pos numbering is
        //   source 123  or  dest   456
        //   dest   456      source 123
        // depending on y
        //
        // Squeeze rule is
        //   source   iib      i.b
        //   dest     ..b  ->  i.b
        // i.e., pos4 <- pos2; pos2 <- empty
        //
        C2D pos1 = getEWCoordIfItemAccessible(thisx,sourcey);
        if (pos1.getX() > 4 || !isAnItem(pos1)) continue;

        C2D pos2 = getEWCoordIfItemAccessible(thisx+1,sourcey);
        if (pos2.getX() > 4 || !isAnItem(pos2)) continue;

        C2D pos3 = getEWCoordIfItemAccessible(thisx+2,sourcey);
        if (pos3.getX() > 4 || !isOurBorder(pos3)) continue;

        C2D pos4 = getEWCoordIfItemAccessible(thisx,desty);
        if (pos4.getX() > 4 || !isEmptyOrField(pos4)) continue;

        C2D pos5 = getEWCoordIfItemAccessible(thisx+1,desty);
        if (pos5.getX() > 4 || !isEmptyOrField(pos5)) continue;

        C2D pos6 = getEWCoordIfItemAccessible(thisx+2,desty);
        if (pos6.getX() > 4 || !isOurBorder(pos6)) continue;

        //// WE HAVE FOUND A SQUEEZE OPPTY
        ew[pos4] = ew[pos2];
        ew[pos2] = Empty.instanceof;
        return true;
      }
    }
    return false;
  }

  Bool checkDequeActions() {
    if (tryPropagateInsertRule()) return true;
    if (tryPropagateRemoveRule()) return true;
    if (tryPropagateRollRule()) return true;
    if (tryPropagateSqueezeRule()) return true;
    return false;
  }

  Void behave() {
    if (mustBlockOrDie()) {
      return;
    }
    checkGrowthAndHealing();
    if (checkDequeActions()) return;
  }

}
