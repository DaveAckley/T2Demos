// SAMPLE 'ANCESTOR' CODE
local constant LXMarker.Mark cMARK_LABEL = 0xDABE;
local constant LXMarker.Mark cMARK_ILABEL = 0xFFFF^cMARK_LABEL;

local constant LXMarker.Mark cRESHAPE_LABEL = 0xFACE;
local constant LXMarker.Mark cRESHAPE_ILABEL = 0xFFFF^0xFACE;

local constant LXMarker cINS_FIRST_MARK = {
  .mDSType = DTU.cDS_NORM,
  .mLabel = cMARK_LABEL,

  .mUpMap = 0x8, // set up chain on INS
  .mDownMap = 0x8, // set down chain on INS
  .mChainControlData = {
    .mTQMap = (DTU.TQMap) (DTU.cTQ_NE | DTU.cTQ_SE), // set target quad NE + SE
    .mSRMap = (DTU.ASRMap) (DTU.cASR_L | DTU.cASR_X), // set allowable edge clearance
  },
}; 
local constant LXReset  cINS_RESET = { .mDSType = DTU.cDS_NORM, .mDestUnit = DTU.cPUNIT_XEQ };
local constant Zong     cINS_ZONG = { .mDSType = DTU.cDS_NORM };
local constant LXCtorArm cINS_SEED_DAUGHTER = {
  .mDSType = DTU.cDS_NORM,
  //  .mProgram = "nwwwwsssseeennnWWWWWWWWWWWWWW."};
  //  .mProgram = "nwwwwsssseeennnWWWWWWWWWWWWWW"};
  //  .mProgram = "nwwwwsssseeennnD"};
  //  .mProgram = "nwwwwsssseeennnDnX-"};
  //  .mProgram = "nwwwsssS."};
  //  .mProgram = "nwwwsssS."};
  //  .mProgram = "nwwsswwSE."};
  .mProgram = "nwwswwwwwSE."
};

local constant LXCommandDS cINS_REGRIP_MOTHER = {
  .mDSType = DTU.cDS_NORM, .mPacket = { .mCmd = SW3Packet.cSW3C_GRIPDS, .mArg = 0xDA }
};
local constant LXCopy cINS_COPY_OUTBOUND = {
  .mDSType = DTU.cDS_NORM, .mCount = 7u, .mSrcPU = DTU.cPUNIT_OUT, .mDstPU = DTU.cPUNIT_REG
};
local constant LXDo cINS_REGRIP_DAUGHTER = {
  .mDSType = DTU.cDS_NORM, .mStoredPU = DTU.cPUNIT_OUT
};
local constant LXCopy cINS_COPY_INBOUND = {
  .mDSType = DTU.cDS_NORM, .mCount = 7u, .mSrcPU = DTU.cPUNIT_OUT, .mDstPU = DTU.cPUNIT_REG
};
local constant LXMarker cINS_LAST_MARK = {
  .mDSType = DTU.cDS_NORM,
  .mLabel = cMARK_ILABEL,
  .mUpMap = 0x8, // set up chain on INS
  .mDownMap = 0x8, // set down chain on INS
  .mHalt = true,  // hang on this LX indefinitely
  .mChainControlData = {
    .mTQMap = 0x6, // expand to allow target quad NE (1<<1) (+ SE (1<<2))
    .mSRMap = 0xc, // tighten allowable edge clearance (only _L and _XL)
  },
}; 
local constant Atom cPROGRAM[] = {
  cINS_FIRST_MARK,
  cINS_RESET,
  cINS_SEED_DAUGHTER,
  cINS_REGRIP_MOTHER,
  cINS_COPY_OUTBOUND,
  cINS_REGRIP_DAUGHTER,
  cINS_COPY_INBOUND,
  cINS_LAST_MARK,
};
 

transient LoaderState : CodonState {

  //// Intention API

  @Override
  virtual Bool act(Intender & in) {
    print("LDRST10");
    if (super.act(in)) return true;

    print("LDRST11");
    Loader & ld = (Loader&) in;
    
    if (ld.mNextInstruction < cPROGRAM.lengthof) {
      print("LDRST12");
      /// EC TO BOTH SIDES OF ME?
      ChainRule_LOADER_LOAD cr;
      ChainRuleMatcher crm114;
      cr.takeDebug(self);
      crm114.takeDebug(self);
      if (crm114.tryRule(self,cr)) {
        print("LDRST13");
        //        ++ld.mNextInstruction;
        return true;
      }
      print("LDRST14");
    } else {
      print("LDRST15");
    }
    return false;
  }
}

/** CHAINRULE: LOADER_LOAD: EC0 -> [X0] -> EC1  ==>  EC0 -> [X0] -> X1 */ 
transient ChainRule_LOADER_LOAD : ChainRule_GENL_ALONE {

  //// ChainRule_GENL_ALONE API
  @Override
  virtual Void whenAloneDo(PocketChainState & ss, ChainMatches & mat) {
    print("CR_LDRL_WAD10");
    print(ew[mat[1]]);
    super.whenAloneDo(ss,mat);
    EventWindow ew;
    Loader & ld = (Loader&) ew[mat[1]];
    ChainControlUp ccu = ld.mChainControlUp;
    ChainControlDown ccd = ld.mChainControlDown;
    // print(ld.mChainControlDown);
    // print(ld.mNextInstruction);
    Atom a = cPROGRAM[ld.mNextInstruction];
    print("CR_LDRL_WAD12INA");
    print(a);
    Codon & down = (Codon&) ew[mat[2]];
    Codon & newc = (Codon&) a;
    print("CR_LDRL_WAD12INB");
    print(newc);
    down.swapPocketPtrs(newc);
    print("CR_LDRL_WAD12INC-newc");
    print(newc);
    print("CR_LDRL_WAD12INC-newc.ccu");
    print(newc.mChainControlUp);
    print("CR_LDRL_WAD12INC-init");
    newc.mChainControlUp.init(ccu);
    print("CR_LDRL_WAD12IND-newc.ccu");
    print(newc.mChainControlUp);
    print("CR_LDRL_WAD12IND-ld.ccu");
    print(ld.mChainControlUp);
    print("CR_LDRL_WAD12IND-newc");
    print(newc);
    print("CR_LDRL_WAD12INE-init");
    newc.mChainControlDown.init(ccd);
    print("CR_LDRL_WAD12INE-newc.ccd");
    print(newc.mChainControlDown);
    print("CR_LDRL_WAD12INE-newc.ccu");
    print(newc.mChainControlUp);
    print("CR_LDRL_WAD12INE-newc");
    print(newc);
    print("CR_LDRL_WAD12INE-ld.ccd");
    print(ld.mChainControlDown);
    print("CR_LDRL_WAD12INE-ld.ccu");
    print(ld.mChainControlUp);
    print("CR_LDRL_WAD12INF-a");
    print(a);
    print("CR_LDRL_WAD12INF-newc");
    print(newc);
    ew[mat[2]] = newc.atomof;
    print("ZONGBONG");
    ++ld.mNextInstruction;
    print(ld);
    /*
    Codon & x  = (Codon&) ew[mat[1]];
    Codon & ec  = (Codon&) ew[mat[2]];
    ec.swapPocketPtrs(x);
    ew.swap(mat[1],mat[2]);
    */
  }

}

/** \symbol Ld
    \color #42e
 */
element Loader : LX {
  typedef Unsigned(8) InstructionCount;
  InstructionCount mNextInstruction = 0u;
  
  //// LX API
  virtual Bool perform(DiamondSequencerState & dss) {
    print("LDRPRF10");
    if (mNextInstruction < cPROGRAM.lengthof)
      return true;              // nothing to do yet
      
    /// Time to check out!
    // Don't need? Just erase? -- markCurrentInstructionForRotation(dss, 0u);

    print("LDRPRF11");
    ProcUnitInfo & pui = dss.getPUInfo(cPUNIT_XEQ); // get X slot
    if (!pui.mFound ||
        pui.mCodonSN == SN.maxof ||
        pui.mIsEmptyCodon)
      fail(__FILE__,__LINE__);

    print("LDRPRF12");
    EventWindow ew;
    Atom & a = ew[pui.mCodonSN];
    if (a as Self) {
      EmptyCodon ec;
      Random random;
      ec.copySegAndPChain(a); // pick up ptrs and targeting
      ec.mDSType = random.oneIn(2u) ? cDS_DOWN : cDS_UP; // flip for dir
      ew[pui.mCodonSN] = ec.atomof;        // LOADER OUT
      return true; // WRN: stale self
    }

    fail(__FILE__,__LINE__);
    return true; // not reached
  }

  //// CODON API
  virtual Void init() {
    super.init();
    mDSType = cDS_NORM;
  }

  //// Intender API 
  @Override
  virtual ClassId getIntentionClass() { return LoaderState.classidof; }

  //// LOADER SERVICES (RUNNING ON BEHALF OF DSS)

  Void behave() {
    pursueIntention();          // passive mode activities
  }
}
