quark Plate {
  typedef Bits(2) DeathBits;
  constant DeathBits cDIE_AND_DOWN = 1u<<0u; //< This and its subplates die
  constant DeathBits cDIE_AND_UP =   1u<<1u; //< This and its superplates die
  constant DeathBits cDIE_EITHER = cDIE_AND_DOWN | cDIE_AND_UP; //< This and sub and super plates die

  //// Plate API
  virtual C2D sizeOfPlate() ;                 //< Overall size of self's plate
  virtual C2D positionOnPlate() ;             //< Position of self in plate (0,0)..size-(1,1)
  virtual Bool blockSubplates() { return false; } //< Blocks all priorities in contained plates
  virtual Int priority() { return 0; }        //< Default priority within containment rules
  virtual DeathBits getDeathBits() ;          //< Current DeathBits status of Plate
  virtual Void setDeathBits(DeathBits bits) ; //< Update DeathBits status of Plate

  //// Plate Services

  /** Are we on the border of our plate, based on our pos and size?
   */
  Bool isPlateBorder() {
    return isPlateBorderCoord(positionOnPlate());
  }

  /** Are we in the field of our plate, based on our pos and size?
   */
  Bool isPlateField() {
    return isPlateFieldCoord(positionOnPlate());
  }
  
  /** Is plate coordinate \c pos on the border of a plate the size of
      ours?
   */
  Bool isPlateBorderCoord(C2D pos) {
    if (pos.getX() == 0 || pos.getY() == 0) return true;
    C2D siz = sizeOfPlate();
    if (pos.getX() == siz.getX() - 1 || pos.getY() == siz.getY() - 1) return true;
    return false;
  }

  Bool isPlateCorner() {
    return isPlateCornerCoord(positionOnPlate());
  }

  /** Is plate coordinate \c pos on the corner of a plate the size of
      ours?
   */
  Bool isPlateCornerCoord(C2D pos) {
    C2D siz = sizeOfPlate();
    return
      (pos.getX() == 0 || pos.getX() == siz.getX() - 1) &&
      (pos.getY() == 0 || pos.getY() == siz.getY() - 1);
  }
  
  /** Is plate coordinate \c pos in the field (i.e., strictly within
      the border) of a plate the size of ours?
   */
  Bool isPlateFieldCoord(C2D pos) {
    C2D siz = sizeOfPlate();
    return
      pos.getX() > 0 &&
      pos.getY() > 0 &&
      pos.getX() < siz.getX() - 1 &&
      pos.getY() < siz.getY() - 1;
  }

  /** Get our own event window site number, or fail if we are not
      located in the event window. */
  EventWindow.SiteNum getOurSN() {
    EventWindow ew;
    EventWindow.SiteNum selfsn = ew.getSiteNumber(self);
    if (selfsn == selfsn.maxof) {
      Fail f;
      f.fail("Not in EW");
    }
    return selfsn;
  }

  /** Get our own event window coordinate, or fail if we are not
      located in the event window */
  C2D getOurEWCoord() {
    MDist md;
    return md.getSiteCoord(getOurSN());
  }

  Bool mustBlockOrDie() {
    MDist md;
    EventWindow ew;
    PlateUtils pu;

    EventWindow.SiteNum selfsn = getOurSN();
    C2D offsetl = md.getSiteCoord(selfsn);
    
    Int ourpriority = self.priority();
    DeathBits db = self.getDeathBits();
    Bool weAreDying = (db & cDIE_EITHER) != 0;
    Bool dieDown = (db & cDIE_AND_DOWN) != 0;
    Bool dieUp = (db & cDIE_AND_UP) != 0;

    for (EventWindow.SiteNum sn = 1u; sn < 41u; ++sn) {
      if (!ew.isAccessible(sn)) continue;
      C2D offsetr = md.getSiteCoord(sn);
      Atom & a = ew[sn];
      if (a as Self) {
        
        // Need to compare priorities if it's on our or a containing plate
        MDist md;
        C2D offsetr = md.getSiteCoord(sn);
        PlateUtils.PlateRelation rel = pu.relationTo(self, offsetl, a, offsetr);

        if (weAreDying) {
          Bool killit = false;
          if (rel == pu.cSAME_PLATE_AS)
            killit = true;
          else if (rel == pu.cCONTAINS_PLATE && dieDown)
            killit = true;
          else if (rel == pu.cCONTAINED_BY_PLATE && dieUp)
            killit = true;
          if (killit) 
            a.setDeathBits(db);
        } else if (rel == pu.cSAME_PLATE_AS) {

          if (a.priority() > ourpriority) { // outranked on plate: you must hodl
            return true;                    // can short circuit loop since not dying
          }
        } else if (rel == pu.cCONTAINED_BY_PLATE) {
          if (a.blockSubplates()) return true;  // regardless of priority comparison
        }
      }
    }
    if (weAreDying) {
      ew[0] = Empty.instanceof;
      return true;
    }
    return false;
  }

  /** Check if site that would be \c plateCoord on our plate is
   * accessible via the current event window.  Note this routine can
   * be called when self is not located at ew[0], but self must be in
   * the ew somewhere, and of course ew accessibility doesn't change.
   *
   * \returns site number where plateCoord would be located, or
   * EventWindow.SiteNum.maxof if \c plateCoord is outside our plate
   * or inaccessible in the ew
   */
  EventWindow.SiteNum plateCoordToEWSN(C2D plateCoord) {
    C2D plateSize = sizeOfPlate();       // Our plate size
    if (!plateSize.contains(plateCoord))
      return EventWindow.SiteNum.maxof;  // Not on our plate

    EventWindow ew;
    EventWindow.SiteNum ourSN = ew.getSiteNumber(self); // Find ourselves
    if (ourSN == ourSN.maxof)
      return EventWindow.SiteNum.maxof;  // We are not in the ew

    C2D ourEWc = ew.getCoord(ourSN);       // Location in ew coords
    C2D ourPlatePos = positionOnPlate();   // Location in plate coords
    C2D offset = plateCoord - ourPlatePos; // Where they are relative to us
    C2D theirEWc = offset + ourEWc;        // Where they'd be in the ew

    if (!ew.isAccessible(theirEWc))
      return EventWindow.SiteNum.maxof;  // Inaccessible

    return ew.getSiteNumber(theirEWc);
  }

  /** Return true iff \c ewc is an accessible site that's either empty
      or contains a field site of the same Plate as self
   */
  Bool isEmptyOrField(C2D ewc) {
    EventWindow ew;
    EventWindow.SiteNum sn = ew.getSiteNumber(self); // Find ourselves
    if (sn == sn.maxof) { Fail f; f.fail("self not in EW"); return false; }
    C2D sat = ew.getCoord(sn); // Us as coord

//    du.printContext();
//    du.print("iEOF10");
    if (!ew.isAccessible(ewc)) return false;
//    du.print("iEOF11");
//    du.print(sat);
    Atom & a = ew[ewc];
    if (a is Empty) return true;
//    du.print("iEOF12");
    if (a as Plate) {
      PlateUtils pu;
      PlateUtils.PlateRelation rel = pu.relationTo(self, sat, a, ewc);
//      du.print("iEOF13");
//      du.print((Unsigned) rel);

      if (rel == PlateUtils.cSAME_PLATE_AS && !a.isPlateBorder())
        return true; // Found TestStack15 field
//      du.print("iEOF14");
    }
    return false;  // Not empty or field
  }


  //// DClock predicates
  Bool isRoot() {
    return positionOnPlate() == C2D.instanceof(0,0);
  }

  Bool isMax() {
    return positionOnPlate() + C2D.instanceof(1,1) == sizeOfPlate();
  }

}
