/** Set up to receive the program loop entire.

    DS PU assignments
    Initial INP: control point (SW)
    Initial OUT: storage loop (SE)
    Initial XEQ: inbound codons (NE)

    \symbol RL
    \color #2ae
 */
element LXRecvLoop : LX + QLabelMark {

  typedef Unary(2) RecvPhase;
  constant RecvPhase cRP_INIT = 0u; //< @kill inp and out. -> init out, xfer IR, INP<->XEQ
  constant RecvPhase cRP_COPY = 1u; //< @copy inp to out, end check after IR. -> roll OUT
  constant RecvPhase cRP_FINISH = 2u; //< @kill inp. -> erase ctrl XEQ<->OUT

  RecvPhase mRecvPhase = cRP_INIT;

  //// LX API
  @Override
  virtual Bool perform(DiamondSequencerState & dss) {
    EventWindow ew;
    BaseClassUtils bcu;
    Fail f;

    print("LXINITRECV10");
    //// HAVE WE INITTED THINGS ALREADY?
    if (mRecvPhase == cRP_INIT) {
      //// WE HAVE NOT ALREADY INITIALIZED THINGS

      ////@STABILIZATION: WAIT TILL THE TONGUING IS DONE
      Bool kinp = killPU(cPUNIT_INP, dss); // kill inp/ctrl
      Bool kout = killPU(cPUNIT_OUT, dss); // kill out/dest loop
      if (!kinp || !kout) return true; // dying in progress
      //// _INP AND _OUT ARE BOTH EMPTY

      ////->ACT

      /// init OUT
      ProcUnitInfo & puiout = dss.getPUInfo(cPUNIT_OUT); // get dest info

      print("DLPUND12");
      if (puiout.mOccupiedSites != 0u || puiout.mEmptySN == SN.maxof)
        f.fail(__FILE__,__LINE__); // wtf we just killed it
      
      Looper looper;
      bcu.copySharedData(self,looper);
      looper.init(); // init over shared data
      ew[puiout.mEmptySN] = looper.atomof;
      /// OUT IS INITTED

      ProcUnitInfo & puiinp = dss.getPUInfo(cPUNIT_INP); // get ctrl info

      print("DLPUND12");
      if (puiinp.mOccupiedSites != 0u || puiinp.mEmptySN == SN.maxof)
          f.fail(__FILE__,__LINE__); // wtf we just killed it

      /// XFER IR FROM XEQ TO INP
      {
        Atom copy = self.atomof;

        EmptyCodon ec; // init an ec to erase us with
        bcu.copySharedData(copy,ec.atomof);
        ec.init();

        Self & scopy = (Self&) copy; // Point at copy
        scopy.mRecvPhase = cRP_COPY; // Copy moves on to next phase
        scopy.mPocketPtrs[cBODY_UP] = cPP_NULL; // Copy is unconnected
        scopy.mPocketPtrs[cBODY_DOWN] = cPP_NULL; // "
        ew[puiinp.mEmptySN] = copy;  // Deploy self copy

        markDSPForRotationForward(dss, 0u, cPUNIT_XEQ); // roll the germline IS
        dss.swapPUs(cPUNIT_INP,cPUNIT_XEQ); // _INP is now src codons

        SN oursn = ew.getSiteNumber(self);
        if (oursn == SN.maxof)
          f.fail(__FILE__,__LINE__); // wtf we just killed it

        ew[oursn] = ec.atomof; // SELF IS STALE
      }
      return true; // Oh yeah we did stuff
    }/// END PHASE cRP_INIT
    //// WE HAVE ALREADY INITTED THINGS.

    //// IS WHOLE LOOP COPYING DONE?
    if (mRecvPhase == cRP_COPY) {
      //// WHOLE LOOP COPYING IS NOT DONE.

      ////@STABILIZATION: COPY THROUGH END
      //// HAVE WE GOT A CODE CODON TO COPY
      ProcUnitInfo & puiinp = dss.getPUInfo(cPUNIT_INP); // get code info

      if (puiinp.mCodonSN == SN.maxof) 
        f.fail(__FILE__,__LINE__); // wtf

      Codon & ccodon = (Codon&) ew[puiinp.mCodonSN];
      if (ccodon is EmptyCodon) {
        /// WE DO NOT HAVE A CODE CODON
        markDSPForRotationForward(dss, 0u, cPUNIT_INP); // bump it ahead
        return true;
      }
      //// WE HAVE GOT A CODE CODON TO COPY

      //// HAVE WE GOT A OUT EC TO COPY IT TO?
      ProcUnitInfo puiout = dss.getPUInfo(cPUNIT_OUT);
      if (!puiout.mFound) return false;
      print("CPUF14");

      SN osn = puiout.mCodonSN;
      if (osn == SN.maxof)
        return false; // ??

      print("CPUF15");
      Atom & oa = ew[osn];
      if (!(oa is EmptyCodon)) {
        markDSPForRotation(dss, 0u, cPUNIT_OUT, cDSTATUS_TEMP);  // ask out for empty spot
        return false;
      }
      //// WE HAVE GOT AN OUT EC TO COPY IT TO.
      EmptyCodon & oec = (EmptyCodon&) oa;

      Atom copy = ccodon.atomof; // copy inbound non-EC
      Codon & ccopy = (Codon&) copy;

      //// HAVE WE ERASED THE INBOUND CODON?
      EmptyCodon nec;           // make new EC
      nec.copySegAndPChain(ccopy);  // pick up ptrs from src codon
      nec.init();                          // then init over
      ew[puiinp.mCodonSN] = nec.atomof;   // and nuke inbound codon
      //// WE HAVE ERASED THE INBOUND CODON.

      //// HAVE WE STASHED THE INBOUND COPY
      ccopy.copySegAndPChain(oec); // pick up ptrs from existing
      ccopy.mDSType = cDS_NORM;    // it's totally normal BTW
      ew[osn] = copy;            // then stash it
      //// WE HAVE STASHED THE INBOUND COPY

      //// DID WE JUST STASH THE FINAL CODON?
      if (ccopy as QLabelMark) {
        if (labelMatch(ccopy)) {
          //// WE DID JUST STASH THE FINAL CODON.
          
          markDSPForRotationForward(dss, 0u, cPUNIT_OUT); // roll out to first insn after IR
          mRecvPhase = cRP_FINISH; // Move on to final phase
          return true;
        }
      }

      //// WE DID NOT JUST STASH THE FINAL CODON.
      markDSPForRotationForward(dss, 0u, cPUNIT_INP); // ask src for next non-EC
      markDSPForRotation(dss, 0u, cPUNIT_OUT, cDSTATUS_TEMP);  // so ask out for empty spot
      return true;
    }//// END OF PHASE cRP_COPY

    //// ARE WE DONE FINISHING UP?
    if (mRecvPhase == cRP_FINISH) {
      //// WE ARE NOT DONE FINISHING UP

      ////@STABILIZATION: WAIT TILL THE KILLING IS DONE
      Bool kinp = killPU(cPUNIT_INP, dss); // kill inp
      if (!kinp) return true;              // killing in progress

      /// INP IS DEAD
      ////@ACT
      
      dss.swapPUs(cPUNIT_OUT,cPUNIT_XEQ); // _OUT is now live code

      SN oursn = ew.getSiteNumber(self);
      if (oursn == SN.maxof)
        f.fail(__FILE__,__LINE__); // wtf we just killed it

      ew[oursn] = Empty.instanceof; // we are gone SELF IS STALE
      return true;
    }////END PHASE FINISH

    f.fail(__FILE__,__LINE__);
    return false; // NOT REACHED
  }

  //// CODON API
  virtual Void init() {
    super.init();
    mDSType = cDS_NORM;
  }

}
