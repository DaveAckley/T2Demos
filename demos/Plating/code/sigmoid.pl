#!/usr/bin/perl -w

# Generate ulam code for a 255-entry odds table representing a sigmoid
# decision rule at a temperature of 25.  (Note ulam Strings are
# limited to a max of 255 bytes!)

print qq~/** GENERATED BY $0 DO NOT EDIT */
local constant String cSIGMOID_TABLE = "~;

my $T = 25; # Int
sub sigmoid {
    my $e = shift;
    return 1.0/(1.0 + exp(-$e/$T));
}
sub u8Sigmoid {
    my $e = shift;
    return int(sigmoid($e)*256);
}

for (my $i = 0; $i < 255; ++$i) {
    my $e = $i-127;
    my $v = u8Sigmoid($e);
    printf("\\x%02x",$v);
}

print qq~";
~;

print <<"EOF";

quark Sigmoid {
  constant Unsigned cTEMPERATURE = $T;
  Unsigned getTemperature() { return cTEMPERATURE; }
  typedef Int(8) Domain;
  typedef Unsigned(8) Odds;
  Odds energyToOdds(Int energy, Unsigned temperature) {
    Int scalede = (energy * cTEMPERATURE) / (Int) temperature;
//    ByteStreamLogger bsl;
//    bsl.printf("sig(e=%d,se=%d)\\n", energy, scalede);
    if (scalede <= Domain.minof) return Odds.minof;
    if (scalede >  Domain.maxof) return Odds.maxof;
    Unsigned idx = (Unsigned) (scalede-(Domain.minof+1));
    Odds odds = cSIGMOID_TABLE[idx];
//    bsl.printf("sig(idx=%d)=\\n", idx, odds);
    return odds;
  }

  Bool withOdds(Odds odds) {
    Random random;
    return random.oddsOf(odds,Odds.maxof);
  }

  Bool decide(Int energy, Unsigned temperature) {
    Odds odds = energyToOdds(energy, temperature);
    return withOdds(odds);
  }
}
EOF
