/** GENERATED BY /data/ackley/PART4/code/D/T2Demos/demos/Plating/code/sigmoid.pl DO NOT EDIT */
local constant String cSIGMOID_TABLE = "\x01\x01\x01\x01\x01\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x03\x03\x03\x03\x03\x03\x04\x04\x04\x04\x04\x04\x05\x05\x05\x05\x06\x06\x06\x06\x07\x07\x07\x07\x08\x08\x08\x09\x09\x0a\x0a\x0a\x0b\x0b\x0c\x0c\x0d\x0d\x0e\x0e\x0f\x0f\x10\x11\x11\x12\x13\x13\x14\x15\x16\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x23\x24\x25\x26\x28\x29\x2b\x2c\x2d\x2f\x31\x32\x34\x35\x37\x39\x3b\x3d\x3e\x40\x42\x44\x46\x48\x4b\x4d\x4f\x51\x53\x56\x58\x5a\x5d\x5f\x61\x64\x66\x69\x6b\x6e\x70\x73\x75\x78\x7a\x7d\x80\x82\x85\x87\x8a\x8c\x8f\x91\x94\x96\x99\x9b\x9e\xa0\xa2\xa5\xa7\xa9\xac\xae\xb0\xb2\xb4\xb7\xb9\xbb\xbd\xbf\xc1\xc2\xc4\xc6\xc8\xca\xcb\xcd\xce\xd0\xd2\xd3\xd4\xd6\xd7\xd9\xda\xdb\xdc\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xe9\xea\xeb\xec\xec\xed\xee\xee\xef\xf0\xf0\xf1\xf1\xf2\xf2\xf3\xf3\xf4\xf4\xf5\xf5\xf5\xf6\xf6\xf7\xf7\xf7\xf8\xf8\xf8\xf8\xf9\xf9\xf9\xf9\xfa\xfa\xfa\xfa\xfb\xfb\xfb\xfb\xfb\xfb\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfe\xfe\xfe\xfe\xfe\xfe";

quark Sigmoid {
  constant Unsigned cTEMPERATURE = 25;
  Unsigned getTemperature() { return cTEMPERATURE; }
  typedef Int(8) Domain;
  typedef Unsigned(8) Odds;
  Odds energyToOdds(Int energy, Unsigned temperature) {
    Int scalede = (energy * cTEMPERATURE) / (Int) temperature;
//    ByteStreamLogger bsl;
//    bsl.printf("sig(e=%d,se=%d)\n", energy, scalede);
    if (scalede <= Domain.minof) return Odds.minof;
    if (scalede >  Domain.maxof) return Odds.maxof;
    Unsigned idx = (Unsigned) (scalede-(Domain.minof+1));
    Odds odds = cSIGMOID_TABLE[idx];
//    bsl.printf("sig(idx=%d)=\n", idx, odds);
    return odds;
  }

  Bool withOdds(Odds odds) {
    Random random;
    return random.oddsOf(odds,Odds.maxof);
  }

  Bool decide(Int energy, Unsigned temperature) {
    Odds odds = energyToOdds(energy, temperature);
    return withOdds(odds);
  }
}
