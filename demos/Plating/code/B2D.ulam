quark B2DT(Unary(8) cBITS_PER_COORD) {
  constant Unsigned cCOMPILATION_ERROR_UNLESS_BITS_GE_2 = 1u/(cBITS_PER_COORD-1u);
  typedef Unsigned(cBITS_PER_COORD) BCoord;
  constant BCoord cILLEGAL = BCoord.maxof;
  constant BCoord cMAXVAL = BCoord.maxof-1u;
  constant BCoord cMINVAL = BCoord.minof;
  BCoord mX = cILLEGAL;
  BCoord mY = cILLEGAL;

  Self(BCoord x, BCoord y) {
    mX = x;
    mY = y;
  }

  Self min(Self other) {
    Self ret = self;
    if (other.mX < ret.mX) ret.mX = other.mX;
    if (other.mY < ret.mY) ret.mY = other.mY;
    return ret;
  }

  Self max(Self other) {
    Self ret = self;
    if (other.mX > ret.mX) ret.mX = other.mX;
    if (other.mY > ret.mY) ret.mY = other.mY;
    return ret;
  }

  Self & operator=(Self other) {
    init(other);
    return self;
  }

  Bool operator==(constant Self & other) {
    return mX == other.mX && mY == other.mY;
  }

  Self operator-(Self other) {
    Self ret = self;
    if (ret.isValid() && other.isValid()) {
      ret.mX -= other.mX;
      ret.mY -= other.mY;
    }
    return ret;
  }

  Self operator+(Self other) {
    Self ret = self;
    if (ret.isValid() && other.isValid()) {
      ret.mX += other.mX;
      ret.mY += other.mY;
    }
    return ret;
  }

  Self & operator-=(Self other) { self = self - other; return self; }

  Self & operator+=(Self other) { self = self + other; return self; }

  /* Make BCoord.maxof an illegal value.  Gives us an OoB value for signaling
  */
  Bool isValid() {
    return mY != cILLEGAL && mY != cILLEGAL;
  }

  Void invalidate() {
    mX = mY = cILLEGAL;
  }

  C2D toC2D() {
    if (!isValid()) {
      Fail f;
      f.fail("toC2D invalid B2D");
    }
    C2D ret(mX,mY);
    return ret;
  }

  Bool fromC2D(C2D c) {
    init(c.getX(),c.getY());
    return isValid();
  }

  Self(Int x, Int y) {
    init(x,y);
  }

  Self(C2D c) {
    fromC2D(c);
  }

  Void init(Self s) {
    init(s.mX,s.mY);
  }
  
  Void init(C2D coord) {
    init(coord.getX(), coord.getY());
  }

  Void init(Int x, Int y) {
    if (x < cMINVAL || x < cMINVAL ||
        y > cMAXVAL || y > cMAXVAL)
      invalidate();
    else {
      mX = (BCoord) x;
      mY = (BCoord) y;
    }
  }
}

quark B2D : B2DT(7) {
  constant BCoord cMAXVAL = Super.cMAXVAL;
  constant BCoord cMINVAL = Super.cMINVAL;
  constant Super cMAX = { .mX = cMAXVAL, .mY = cMAXVAL };
}

quark B2D4 : B2DT(4) {
  constant BCoord cMAXVAL = Super.cMAXVAL;
  constant BCoord cMINVAL = Super.cMINVAL;
  constant Super cMAX = { .mX = cMAXVAL, .mY = cMAXVAL };
}
