quark QNumber {
  typedef Int Number;
  typedef Unsigned(5) BitWidth;
  //// Number API
  virtual Number getNumber() ;
  virtual Number getMaxof() ;
  virtual Number getMinof() ;
}

quark QMutableNumber : QNumber {
  //// QMutableNumber API
  virtual Bool setNumber(Number n) ;
}

quark QMutableNumberT(Unsigned(5) cBITS) : QMutableNumber {
  typedef Int(cBITS) MutableNumber;
  MutableNumber mMutableNumber = MutableNumber.minof;

  //// QNumber API
  virtual Number getNumber() { return (Number) mMutableNumber; }
  virtual Number getMaxof() { return (Number) MutableNumber.maxof; }
  virtual Number getMinof() { return (Number) MutableNumber.minof; }

  //// QMutableNumber API
  virtual Bool setNumber(Number n) {
    mMutableNumber = (MutableNumber) n;
    return n == (Number) mMutableNumber;
  }
}

/** NumberPlate - Hold a 24-bit number for display
    \symbol NP
    \color #aaa
 */
element NumberPlate : B2DPlate + CategorizedSite + Flood + QMutableNumberT(24u) {

  typedef EventWindow.SiteNum SN;
  DebugUtils du;

  typedef Unsigned(4) DigitCount;
  FontSet.FontNumber mFontNumber;
  DigitCount mDigitCount;

  typedef MutableNumber Number;

  Void configure(FontSet.FontNumber fn, DigitCount digs) {
    self.mFontNumber = fn;
    self.mDigitCount = digs;

    PlateUtils pu;
    FontSet fs;
    Font & font = fs.getFont(mFontNumber);
    C2D digitSize = font.fontSize();
    C2D dims((C2D.Coord) (digitSize.getX()*mDigitCount+2),
             (C2D.Coord) (digitSize.getY()+2));
    self.mSizeOfPlate.fromC2D(dims);
    self.mPosOnPlate.fromC2D(pu.c0x0);
  }

  //// Flood API
  @Override
  virtual C2D getRoot() { PlateUtils pu; return pu.c0x0; }

  @Override
  virtual Bool fire() { return false; }

  @Override
  virtual Bool consider(Flood& ngb, Bool isup) {
    if (isup) {
      if (ngb as Self) {
        setNumber(ngb.getNumber());
      } else return false;
    }
    return true;
  }


  //// B2DPlate API
  /*
  @Override
  virtual Atom copyOf() { 
    Self s = self;
    if (s.hasPayload()) { // And we don't dupe communications!
      RawBits dump;
      s.storeTo(dump);
      s.mBufferStatus = QStream12.cBUFFER_EMPTY;
    }
    return s.atomof;
  }
  */

  constant Unsigned cTIMER_BITS = 4u;
  typedef XTimer(cTIMER_BITS,Unsigned(cTIMER_BITS).maxof,4096u) BlockDog;
  BlockDog mBlockDogTimer; //  About one in half a billion cumulative shot

  //// Plate API

  //// UrSelf API
  @Override
  ARGB getColor(Unsigned selector) {
    ColorUtils cu;
    ARGB ret = cu.color(0xffffffff);
    ARGB floodc = getFloodColor();
    ret = cu.between(floodc,ret,20);
    return super.getColor(selector);
  }


  Bool die() {
    du.printContext();
    du.print("DIIDDIDIEEEE");
    return true;
  }

  Unsigned countAbsDigits(Number ofnum) {
    if (ofnum < 0) ofnum = -ofnum;
    Unsigned count = 1;
    while (ofnum > 9) {
      count++;
      ofnum = ofnum / 10;
    }
    return count;
  }

  ASCII getDigit(Unsigned digit, Number ofnum) {
    if (ofnum < 0) ofnum = -ofnum;
    if (digit == 0u) return (ASCII) ((ofnum%10u) + '0');
    return getDigit(digit - 1u, ofnum/10u);
  }

  Bool digitSpread() {
    C2D pos = positionOnPlate();
    if (pos.getY() != 0) return false;
    C2D siz = sizeOfPlate();

    PlateUtils pu;
    FontSet fs;
    Font & font = fs.getFont(mFontNumber);
    C2D digitSize = font.fontSize();
    if ((pos.getX() % digitSize.getX()) != 1) return false;
    if ((pos.getX() + digitSize.getX()) > siz.getX()) return false;
    EventWindow ew;
    if (!ew.isAccessible(3)) return false;
    Atom & a = ew[3];
    if (a as ASCIIPlate) {
      Unsigned atdigit = (Unsigned) (mDigitCount - (pos.getX() - 1) / digitSize.getX());
      Number num = (Number) getNumber();
      Unsigned numdigs = countAbsDigits(num);
      ASCII byte;
      if (atdigit > numdigs) {
        if (atdigit == numdigs + 1u && num < 0) byte = '-';
        else byte = ' ';
      } else byte = getDigit(atdigit-1u, num);
      if (a.mDisplayByte != byte || a.mFontNumber != mFontNumber) {
        a.mDisplayByte = byte;
        a.mFontNumber = self.mFontNumber;
        return true;
      }
      return false;
    }
    ASCIIPlate ap;
    ap.mSizeOfPlate.fromC2D(digitSize);
    ap.mPosOnPlate.fromC2D(pu.c0x0);
    ap.mFontNumber = self.mFontNumber;
    ap.mDisplayByte = ' ';
    ew[3] = ap.atomof;
    return true;
  }

  Bool checkLocalActions() {
    floodUpdate();
    return digitSpread();
  }

  Void behave() {
    if (mustBlockOrDie()) {
      //// WARNING: self might be erased at this point!
      EventWindow ew;   
      Atom & a = ew[0];  // So get a new ref from the ew
      if (a as Self) 
        a.mBlockDogTimer.reset(); // If it's still alive, it was blocked
      return;
    }
    // Block dog alarm means there's been no movement or growth for a looong time
    if (mBlockDogTimer.countAlarm()) return (Void) die();

    checkGrowthAndHealing();
    if (checkLocalActions()) return;
  }

}



/** Seed NumberPlate
    \symbol Sn
 */
element SeedNumberPlate {
  NumberPlate.DigitCount mDigits = 5u;
  FontSet.FontNumber mFontNum = 0u;
  Void behave() {
    EventWindow ew;
    NumberPlate ad;
    Random random;
    PlateUtils pu;
    ad.configure(mFontNum, mDigits);
    ad.setNumber(0);
    ew[0] = ad;
  }
}

/** Change NumberPlate number
    \symbol Rn
*/
element Renumber {
  typedef EventWindow.SiteNum SN;
  Void behave() {
    EventWindow ew;
    PlateUtils pu;
    for (SN sn = 1u; sn < 41u; ++sn) {
      if (!ew.isAccessible(sn)) continue;
      Atom & a = ew[sn];
      if (a as NumberPlate) {
        if (a.positionOnPlate() == pu.c0x0) {
          Random random;
          a.setNumber((NumberPlate.Number) random.between(-1000,1000));
          break;
        }
      }
    }
    ew[0] = Empty.instanceof;
  }
}

